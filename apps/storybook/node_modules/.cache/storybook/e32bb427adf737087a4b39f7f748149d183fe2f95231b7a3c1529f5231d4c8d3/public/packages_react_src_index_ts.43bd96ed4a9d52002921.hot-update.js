"use strict";
self["webpackHotUpdate_liquid_ui_storybook"]("packages_react_src_index_ts",{

/***/ "../../packages/react/src/components/LiquidInput.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidInput.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidInput: () => (/* binding */ LiquidInput)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");
/* harmony import */ var _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useInteractiveGlass */ "../../packages/react/src/hooks/useInteractiveGlass.ts");



/**
 * LiquidInput - Glass form input component
 * 
 * A beautiful input field with liquid glass effects, perfect for forms and data entry.
 * Includes labels, error states, helper text, and icons.
 */ const LiquidInputBase = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ variant = 'frosted', intensity = 'subtle', opacity = 'regular', interactive = true, adaptiveOpacity = false, environmentBlending = false, label, error, helperText, leftIcon, rightIcon, fullWidth = false, className, disabled, style, ...props }, ref)=>{
    const [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const [isFloating, setIsFloating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const [validationState, setValidationState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('neutral');
    const [showValidation, setShowValidation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    // Add CSS styles for placeholder on client side only
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (typeof document === 'undefined') return;
        const styleId = 'liquid-input-styles';
        if (document.getElementById(styleId)) return;
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
        .liquid-input input::placeholder {
          color: rgba(255, 255, 255, 0.4);
          transition: color 0.2s ease;
        }
        .liquid-input input:focus::placeholder {
          color: rgba(255, 255, 255, 0.3);
        }
        .liquid-input input:disabled::placeholder {
          color: rgba(255, 255, 255, 0.2);
        }
        .liquid-input input::-webkit-input-placeholder {
          color: rgba(255, 255, 255, 0.4);
          transition: color 0.2s ease;
        }
        .liquid-input input:focus::-webkit-input-placeholder {
          color: rgba(255, 255, 255, 0.3);
        }
        .liquid-input input::-moz-placeholder {
          color: rgba(255, 255, 255, 0.4);
          opacity: 1;
          transition: color 0.2s ease;
        }
        .liquid-input input:focus::-moz-placeholder {
          color: rgba(255, 255, 255, 0.3);
          opacity: 1;
        }
        .liquid-input input:-ms-input-placeholder {
          color: rgba(255, 255, 255, 0.4);
        }
        .liquid-input input:focus:-ms-input-placeholder {
          color: rgba(255, 255, 255, 0.3);
        }
      `;
        document.head.appendChild(style);
    }, []);
    const [hasValue, setHasValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(props.value || props.defaultValue));
    const [inputValue, setInputValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.value || props.defaultValue || '');
    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Enhanced validation patterns
    const validationPatterns = {
        email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        phone: /^[\+]?[1-9][\d]{0,3}?[\s\-\(]?[\d]{3}[\s\-\)]?[\d]{3}[\s\-]?[\d]{4}$/,
        url: /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/,
        number: /^[0-9]+$/,
        decimal: /^[0-9]+\.?[0-9]*$/
    };
    // Auto-validation based on type and patterns
    const validateInput = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{
        if (!value || !showValidation) {
            setValidationState('neutral');
            return;
        }
        // Type-based validation
        if (props.type === 'email' && !validationPatterns.email.test(value)) {
            setValidationState('invalid');
            return;
        }
        // Custom validation via props
        if (props.pattern && !new RegExp(props.pattern).test(value)) {
            setValidationState('invalid');
            return;
        }
        // Min/max length validation
        if (props.minLength && value.length < props.minLength) {
            setValidationState('invalid');
            return;
        }
        if (props.maxLength && value.length > props.maxLength) {
            setValidationState('invalid');
            return;
        }
        // Required field validation
        if (props.required && !value.trim()) {
            setValidationState('invalid');
            return;
        }
        setValidationState('valid');
    }, [
        props.type,
        props.pattern,
        props.minLength,
        props.maxLength,
        props.required,
        showValidation
    ]);
    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();
    const inputId = props.id || `liquid-input-${id}`;
    const errorId = error ? `${inputId}-error` : undefined;
    const helperId = helperText ? `${inputId}-helper` : undefined;
    // Generate glass styles for the wrapper
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_1__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Interactive effects on the wrapper
    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = (0,_hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_2__.useInteractiveGlass)({
        elementRef: wrapperRef,
        enabled: interactive && !disabled
    });
    // Handle floating label animation
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        setIsFloating(hasValue || isFocused);
    }, [
        hasValue,
        isFocused
    ]);
    // Handle validation on value change
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        validateInput(String(inputValue));
    }, [
        inputValue,
        validateInput
    ]);
    // Handle input events
    const onFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setIsFocused(true);
        setShowValidation(true);
        props.onFocus?.(e);
    }, [
        props.onFocus
    ]);
    const onBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setIsFocused(false);
        props.onBlur?.(e);
    }, [
        props.onBlur
    ]);
    const onChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        const value = e.target.value;
        setHasValue(Boolean(value));
        setInputValue(value);
        // Auto-formatting based on type
        if (props.type === 'tel') {
            // Simple phone number formatting (US format)
            const cleaned = value.replace(/\D/g, '');
            const match = cleaned.match(/^(1|)?([2-9]\d{2})([2-9]\d{2})(\d{4})$/);
            if (match) {
                const formatted = `${match[1] ? '+1 ' : ''}(${match[2]}) ${match[3]}-${match[4]}`;
                e.target.value = formatted;
                setInputValue(formatted);
            }
        }
        props.onChange?.(e);
    }, [
        props.onChange,
        props.type
    ]);
    // Handle wrapper mouse events
    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseEnter();
    }, [
        handleMouseEnter
    ]);
    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseLeave();
    }, [
        handleMouseLeave
    ]);
    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseMove(e);
    }, [
        handleMouseMove
    ]);
    // Base styles
    const containerStyle = {
        display: 'flex',
        flexDirection: 'column',
        width: fullWidth ? '100%' : 'auto',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
    };
    const labelStyle = {
        fontSize: '14px',
        fontWeight: 500,
        marginBottom: '6px',
        color: error ? '#ef4444' : validationState === 'valid' ? '#10b981' : validationState === 'invalid' ? '#ef4444' : isFocused ? '#3b82f6' : 'rgba(255, 255, 255, 0.9)',
        transition: 'color 0.2s ease'
    };
    const floatingLabelStyle = {
        position: 'absolute',
        left: leftIcon ? '44px' : '16px',
        fontSize: isFloating ? '12px' : '15px',
        fontWeight: 500,
        color: error ? '#ef4444' : validationState === 'valid' ? '#10b981' : validationState === 'invalid' ? '#ef4444' : isFocused ? '#3b82f6' : 'rgba(255, 255, 255, 0.6)',
        transition: 'all 0.2s ease',
        transform: isFloating ? 'translateY(-22px)' : 'translateY(0px)',
        transformOrigin: 'left center',
        pointerEvents: 'none',
        background: isFloating ? 'linear-gradient(to right, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.8) 80%, transparent 100%)' : 'none',
        padding: isFloating ? '0 4px' : '0',
        zIndex: 1
    };
    const wrapperStyle = {
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        borderRadius: '12px',
        border: `2px solid ${error ? 'rgba(239, 68, 68, 0.5)' : validationState === 'valid' ? 'rgba(16, 185, 129, 0.5)' : validationState === 'invalid' ? 'rgba(239, 68, 68, 0.5)' : isFocused ? 'rgba(59, 130, 246, 0.5)' : 'rgba(255, 255, 255, 0.15)'}`,
        transition: 'all 0.3s ease',
        cursor: disabled ? 'not-allowed' : 'text',
        opacity: disabled ? 0.5 : 1,
        transform: interactive && !disabled ? 'translateZ(0)' : 'none',
        boxShadow: isFocused ? `0 0 0 3px ${error ? 'rgba(239, 68, 68, 0.1)' : validationState === 'valid' ? 'rgba(16, 185, 129, 0.1)' : validationState === 'invalid' ? 'rgba(239, 68, 68, 0.1)' : 'rgba(59, 130, 246, 0.1)'}, 0 8px 32px rgba(0, 0, 0, 0.12)` : validationState === 'valid' ? '0 4px 16px rgba(16, 185, 129, 0.08)' : validationState === 'invalid' ? '0 4px 16px rgba(239, 68, 68, 0.08)' : '0 4px 16px rgba(0, 0, 0, 0.08)',
        ...glassStyles
    };
    const inputStyle = {
        width: '100%',
        background: 'transparent',
        border: 'none',
        outline: 'none',
        padding: label ? '16px 16px 8px 16px' : '12px 16px',
        paddingLeft: leftIcon ? label ? '44px' : '44px' : label ? '16px' : '16px',
        paddingRight: rightIcon ? '44px' : validationState !== 'neutral' ? '44px' : '16px',
        fontSize: '15px',
        lineHeight: '1.4',
        color: 'rgba(255, 255, 255, 0.95)',
        fontFamily: 'inherit',
        borderRadius: '10px'
    };
    const iconStyle = {
        position: 'absolute',
        top: '50%',
        transform: 'translateY(-50%)',
        width: '18px',
        height: '18px',
        color: 'rgba(255, 255, 255, 0.6)',
        pointerEvents: 'none',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
    };
    const leftIconStyle = {
        ...iconStyle,
        left: '14px'
    };
    const rightIconStyle = {
        ...iconStyle,
        right: '14px'
    };
    const validationIconStyle = {
        ...iconStyle,
        right: rightIcon ? '44px' : '14px',
        color: validationState === 'valid' ? '#10b981' : validationState === 'invalid' ? '#ef4444' : 'rgba(255, 255, 255, 0.6)'
    };
    const helperStyle = {
        fontSize: '12px',
        marginTop: '6px',
        color: error ? '#ef4444' : validationState === 'valid' ? '#10b981' : validationState === 'invalid' ? '#ef4444' : 'rgba(255, 255, 255, 0.6)',
        lineHeight: '1.4',
        transition: 'color 0.2s ease'
    };
    // Auto-suggestion styles
    const suggestionStyle = {
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        zIndex: 10,
        marginTop: '4px',
        borderRadius: '8px',
        overflow: 'hidden',
        ...glassStyles
    };
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: containerStyle,
        className: `liquid-input ${className || ''}`
    }, label && !props.placeholder && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("label", {
        htmlFor: inputId,
        style: labelStyle
    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: wrapperRef,
        style: {
            ...wrapperStyle,
            ...style
        },
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onMouseMove: onMouseMove
    }, label && props.placeholder && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("label", {
        htmlFor: inputId,
        style: floatingLabelStyle
    }, label), leftIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: leftIconStyle
    }, leftIcon), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
        ref: (node)=>{
            // Handle both forwarded ref and internal ref
            if (typeof ref === 'function') {
                ref(node);
            } else if (ref) {
                ref.current = node;
            }
            inputRef.current = node;
        },
        id: inputId,
        style: inputStyle,
        disabled: disabled,
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: onChange,
        "aria-invalid": error ? 'true' : 'false',
        "aria-describedby": errorId || helperId || undefined,
        ...props
    }), validationState !== 'neutral' && showValidation && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: validationIconStyle
    }, validationState === 'valid' ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        width: "18",
        height: "18",
        viewBox: "0 0 20 20",
        fill: "currentColor"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        fillRule: "evenodd",
        d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
        clipRule: "evenodd"
    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        width: "18",
        height: "18",
        viewBox: "0 0 20 20",
        fill: "currentColor"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        fillRule: "evenodd",
        d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z",
        clipRule: "evenodd"
    }))), rightIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: rightIconStyle
    }, rightIcon)), (helperText || error) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        id: errorId || helperId,
        style: helperStyle
    }, error || helperText));
});
LiquidInputBase.displayName = 'LiquidInput';
// Create the main component with proper typing
const LiquidInput = LiquidInputBase;
// Preset components for easier usage
LiquidInput.Default = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LiquidInputBase, {
        ref: ref,
        variant: "frosted",
        intensity: "subtle",
        interactive: true,
        ...props
    }));
LiquidInput.Default.displayName = 'LiquidInput.Default';
LiquidInput.Clear = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LiquidInputBase, {
        ref: ref,
        variant: "clear",
        opacity: "light",
        interactive: true,
        ...props
    }));
LiquidInput.Clear.displayName = 'LiquidInput.Clear';
LiquidInput.Email = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LiquidInputBase, {
        ref: ref,
        type: "email",
        variant: "frosted",
        intensity: "subtle",
        interactive: true,
        ...props
    }));
LiquidInput.Email.displayName = 'LiquidInput.Email';
LiquidInput.Password = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LiquidInputBase, {
        ref: ref,
        type: "password",
        variant: "frosted",
        intensity: "subtle",
        interactive: true,
        ...props
    }));
LiquidInput.Password.displayName = 'LiquidInput.Password';
LiquidInput.Search = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LiquidInputBase, {
        ref: ref,
        type: "search",
        variant: "clear",
        intensity: "subtle",
        interactive: true,
        ...props
    }));
LiquidInput.Search.displayName = 'LiquidInput.Search';

try {
    // @ts-ignore
    LiquidInput.displayName = "LiquidInput";
    // @ts-ignore
    LiquidInput.__docgenInfo = { "description": "", "displayName": "LiquidInput", "props": { "label": { "defaultValue": null, "description": "", "name": "label", "required": false, "type": { "name": "string" } }, "error": { "defaultValue": null, "description": "", "name": "error", "required": false, "type": { "name": "string" } }, "helperText": { "defaultValue": null, "description": "", "name": "helperText", "required": false, "type": { "name": "string" } }, "leftIcon": { "defaultValue": null, "description": "", "name": "leftIcon", "required": false, "type": { "name": "ReactNode" } }, "rightIcon": { "defaultValue": null, "description": "", "name": "rightIcon", "required": false, "type": { "name": "ReactNode" } }, "fullWidth": { "defaultValue": { value: "false" }, "description": "", "name": "fullWidth", "required": false, "type": { "name": "boolean" } }, "variant": { "defaultValue": { value: "frosted" }, "description": "", "name": "variant", "required": false, "type": { "name": "enum", "value": [{ "value": "\"clear\"" }, { "value": "\"frosted\"" }, { "value": "\"tinted\"" }, { "value": "\"dark\"" }, { "value": "\"aurora\"" }, { "value": "\"solid\"" }] } }, "intensity": { "defaultValue": { value: "subtle" }, "description": "", "name": "intensity", "required": false, "type": { "name": "enum", "value": [{ "value": "\"subtle\"" }, { "value": "\"regular\"" }, { "value": "\"strong\"" }, { "value": "\"none\"" }] } }, "opacity": { "defaultValue": { value: "regular" }, "description": "", "name": "opacity", "required": false, "type": { "name": "enum", "value": [{ "value": "\"regular\"" }, { "value": "\"strong\"" }, { "value": "\"light\"" }, { "value": "\"medium\"" }] } }, "interactive": { "defaultValue": { value: "true" }, "description": "", "name": "interactive", "required": false, "type": { "name": "boolean" } }, "adaptiveOpacity": { "defaultValue": { value: "false" }, "description": "", "name": "adaptiveOpacity", "required": false, "type": { "name": "boolean" } }, "environmentBlending": { "defaultValue": { value: "false" }, "description": "", "name": "environmentBlending", "required": false, "type": { "name": "boolean" } }, "className": { "defaultValue": null, "description": "", "name": "className", "required": false, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidInput.tsx#LiquidInput"] = { docgenInfo: LiquidInput.__docgenInfo, name: "LiquidInput", path: "../../packages/react/src/components/LiquidInput.tsx#LiquidInput" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=packages_react_src_index_ts.43bd96ed4a9d52002921.hot-update.js.map