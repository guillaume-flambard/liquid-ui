{"version":3,"file":"packages_react_src_components_LiquidButton_tsx-packages_react_src_components_LiquidModal_tsx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAuBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAmBA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAIA;AAAA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvMA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAMA;AACA;AACA;AAEA","sources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidButton.tsx","webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidModal.tsx"],"sourcesContent":["import React, { forwardRef, useRef, useState, useCallback } from 'react'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport { useInteractiveGlass } from '../hooks/useInteractiveGlass'\nimport type { LiquidButtonProps } from '../types'\n\n/**\n * LiquidButton - Interactive glass button component\n * \n * A beautiful button with liquid glass effects, perfect for CTAs and interactive elements.\n * Includes loading states, icons, and responsive design.\n */\nexport const LiquidButton = forwardRef<HTMLButtonElement, LiquidButtonProps>(\n  (\n    {\n      variant = 'frosted',\n      intensity = 'regular',\n      opacity = 'regular',\n      interactive = true,\n      adaptiveOpacity = false,\n      environmentBlending = false,\n      size = 'md',\n      fullWidth = false,\n      loading = false,\n      leftIcon,\n      rightIcon,\n      className,\n      children,\n      disabled,\n      style,\n      ...props\n    },\n    ref\n  ) => {\n    const [isPressed, setIsPressed] = useState(false)\n    const buttonRef = useRef<HTMLButtonElement>(null)\n    \n    // Generate glass styles\n    const glassStyles = useLiquidGlass({\n      variant,\n      intensity,\n      opacity,\n      interactive,\n      adaptiveOpacity,\n      environmentBlending\n    })\n    \n    // Interactive physics effects\n    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = useInteractiveGlass({\n      elementRef: buttonRef,\n      enabled: interactive && !disabled && !loading\n    })\n    \n    // Size classes\n    const sizeClasses = {\n      sm: 'px-3 py-1.5 text-sm min-h-[2rem]',\n      md: 'px-4 py-2 text-base min-h-[2.5rem]',\n      lg: 'px-6 py-3 text-lg min-h-[3rem]'\n    }\n    \n    // Handle mouse events\n    const onMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      handleMouseEnter()\n      props.onMouseEnter?.(e)\n    }, [handleMouseEnter, props.onMouseEnter])\n    \n    const onMouseLeave = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      handleMouseLeave()\n      setIsPressed(false)\n      props.onMouseLeave?.(e)\n    }, [handleMouseLeave, props.onMouseLeave])\n    \n    const onMouseMove = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      handleMouseMove(e)\n      props.onMouseMove?.(e)\n    }, [handleMouseMove, props.onMouseMove])\n    \n    const onMouseDown = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      setIsPressed(true)\n      props.onMouseDown?.(e)\n    }, [props.onMouseDown])\n    \n    const onMouseUp = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      setIsPressed(false)\n      props.onMouseUp?.(e)\n    }, [props.onMouseUp])\n    \n    // Build classes\n    const classes = clsx(\n      // Base button styles\n      'liquid-button',\n      'relative',\n      'inline-flex',\n      'items-center',\n      'justify-center',\n      'gap-2',\n      'font-medium',\n      'rounded-lg',\n      'border',\n      'border-white/10',\n      'transition-all',\n      'duration-200',\n      'ease-out',\n      'focus:outline-none',\n      'focus:ring-2',\n      'focus:ring-blue-500/50',\n      'transform-gpu',\n      \n      // Size styles\n      sizeClasses[size],\n      \n      // Width styles\n      fullWidth && 'w-full',\n      \n      // State styles\n      !disabled && !loading && [\n        'hover:shadow-lg',\n        'active:scale-[0.98]',\n        isPressed && 'scale-[0.98]'\n      ],\n      \n      // Disabled styles\n      (disabled || loading) && [\n        'opacity-50',\n        'cursor-not-allowed',\n        'pointer-events-none'\n      ],\n      \n      // Interactive styles\n      interactive && !disabled && !loading && 'cursor-pointer',\n      \n      className\n    )\n    \n    // Combine styles\n    const combinedStyles = {\n      ...glassStyles,\n      ...style\n    }\n    \n    // Loading spinner component\n    const LoadingSpinner = () => (\n      <svg\n        className=\"animate-spin h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          strokeWidth=\"4\"\n        />\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    )\n    \n    return (\n      <button\n        ref={(node) => {\n          // Handle both forwarded ref and internal ref\n          if (typeof ref === 'function') {\n            ref(node)\n          } else if (ref) {\n            (ref as React.MutableRefObject<HTMLButtonElement | null>).current = node\n          }\n          (buttonRef as React.MutableRefObject<HTMLButtonElement | null>).current = node\n        }}\n        className={classes}\n        style={combinedStyles}\n        disabled={disabled || loading}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onMouseMove={onMouseMove}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        {...props}\n      >\n        {loading && <LoadingSpinner />}\n        {!loading && leftIcon && <span className=\"flex-shrink-0\">{leftIcon}</span>}\n        \n        {children && (\n          <span className={loading ? 'opacity-0' : undefined}>\n            {children}\n          </span>\n        )}\n        \n        {!loading && rightIcon && <span className=\"flex-shrink-0\">{rightIcon}</span>}\n      </button>\n    )\n  }\n)\n\nLiquidButton.displayName = 'LiquidButton'","import React, { useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport type { LiquidModalProps } from '../types'\n\n/**\n * LiquidModal - Glass modal and overlay component\n * \n * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.\n * Includes backdrop blur, keyboard navigation, and accessibility features.\n */\nexport const LiquidModal: React.FC<LiquidModalProps> = ({\n  open,\n  onClose,\n  title,\n  showCloseButton = true,\n  closeOnBackdropClick = true,\n  closeOnEscape = true,\n  size = 'md',\n  centered = true,\n  variant = 'frosted',\n  intensity = 'strong',\n  opacity = 'regular',\n  interactive = false,\n  adaptiveOpacity = false,\n  environmentBlending = true,\n  className,\n  children\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null)\n  const backdropRef = useRef<HTMLDivElement>(null)\n  \n  // Generate glass styles for the modal content\n  const glassStyles = useLiquidGlass({\n    variant,\n    intensity,\n    opacity,\n    interactive,\n    adaptiveOpacity,\n    environmentBlending\n  })\n  \n  // Generate backdrop glass styles\n  const backdropGlassStyles = useLiquidGlass({\n    variant: 'dark',\n    intensity: 'regular',\n    opacity: 'light',\n    interactive: false,\n    adaptiveOpacity: false,\n    environmentBlending: true\n  })\n  \n  // Size classes\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  }\n  \n  // Handle escape key\n  useEffect(() => {\n    if (!open || !closeOnEscape) return\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose()\n      }\n    }\n    \n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [open, closeOnEscape, onClose])\n  \n  // Handle focus management\n  useEffect(() => {\n    if (!open) return\n    \n    const previousActiveElement = document.activeElement as HTMLElement\n    \n    // Focus the modal when opened\n    if (modalRef.current) {\n      modalRef.current.focus()\n    }\n    \n    // Restore focus when closed\n    return () => {\n      if (previousActiveElement && previousActiveElement.focus) {\n        previousActiveElement.focus()\n      }\n    }\n  }, [open])\n  \n  // Handle body scroll lock\n  useEffect(() => {\n    if (!open) return\n    \n    const originalStyle = window.getComputedStyle(document.body).overflow\n    document.body.style.overflow = 'hidden'\n    \n    return () => {\n      document.body.style.overflow = originalStyle\n    }\n  }, [open])\n  \n  // Handle backdrop click\n  const handleBackdropClick = useCallback((e: React.MouseEvent) => {\n    if (closeOnBackdropClick && e.target === backdropRef.current) {\n      onClose()\n    }\n  }, [closeOnBackdropClick, onClose])\n  \n  // Handle close button click\n  const handleCloseClick = useCallback(() => {\n    onClose()\n  }, [onClose])\n  \n  if (!open) return null\n  \n  const modalContent = (\n    <div\n      ref={backdropRef}\n      className={clsx(\n        'liquid-modal-backdrop',\n        'fixed',\n        'inset-0',\n        'z-50',\n        'flex',\n        'items-center',\n        'justify-center',\n        'p-4',\n        'min-h-screen',\n        centered ? 'items-center' : 'items-start pt-16'\n      )}\n      style={backdropGlassStyles}\n      onClick={handleBackdropClick}\n    >\n      <div\n        ref={modalRef}\n        className={clsx(\n          'liquid-modal',\n          'relative',\n          'w-full',\n          sizeClasses[size],\n          'max-h-[90vh]',\n          'overflow-hidden',\n          'rounded-xl',\n          'border',\n          'border-white/10',\n          'shadow-2xl',\n          'transform',\n          'transition-all',\n          'duration-300',\n          'ease-out',\n          'animate-in',\n          'fade-in-0',\n          'zoom-in-95',\n          className\n        )}\n        style={glassStyles}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? 'modal-title' : undefined}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"liquid-modal-header flex items-center justify-between p-6 border-b border-white/10\">\n            {title && (\n              <h2 id=\"modal-title\" className=\"text-lg font-semibold text-white\">\n                {title}\n              </h2>\n            )}\n            \n            {showCloseButton && (\n              <button\n                type=\"button\"\n                className={clsx(\n                  'flex',\n                  'items-center',\n                  'justify-center',\n                  'w-8',\n                  'h-8',\n                  'rounded-full',\n                  'text-gray-400',\n                  'hover:text-white',\n                  'hover:bg-white/10',\n                  'transition-colors',\n                  'duration-200'\n                )}\n                onClick={handleCloseClick}\n                aria-label=\"Close modal\"\n              >\n                <svg\n                  className=\"w-4 h-4\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className=\"liquid-modal-content overflow-y-auto max-h-full\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n  \n  // Render modal in a portal\n  return createPortal(modalContent, document.body)\n}\n\nLiquidModal.displayName = 'LiquidModal'"],"names":[],"sourceRoot":""}