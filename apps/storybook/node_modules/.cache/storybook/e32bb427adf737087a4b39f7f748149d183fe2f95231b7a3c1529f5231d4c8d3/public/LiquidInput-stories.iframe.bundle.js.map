{"version":3,"file":"LiquidInput-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAMA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChOA;AACA;AAUA;;;;;AAKA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidModal.tsx","webpack://@liquid-ui/storybook/../../packages/react/src/hooks/useAdaptiveGlass.ts","webpack://@liquid-ui/storybook/../../packages/react/src/index.ts","webpack://@liquid-ui/storybook/./src/stories/LiquidInput.stories.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport type { LiquidModalProps } from '../types'\n\n/**\n * LiquidModal - Glass modal and overlay component\n * \n * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.\n * Includes backdrop blur, keyboard navigation, and accessibility features.\n */\nexport const LiquidModal: React.FC<LiquidModalProps> = ({\n  open,\n  onClose,\n  title,\n  showCloseButton = true,\n  closeOnBackdropClick = true,\n  closeOnEscape = true,\n  size = 'md',\n  centered = true,\n  variant = 'frosted',\n  intensity = 'strong',\n  opacity = 'regular',\n  interactive = false,\n  adaptiveOpacity = false,\n  environmentBlending = true,\n  className,\n  children\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null)\n  const backdropRef = useRef<HTMLDivElement>(null)\n  \n  // Generate glass styles for the modal content\n  const glassStyles = useLiquidGlass({\n    variant,\n    intensity,\n    opacity,\n    interactive,\n    adaptiveOpacity,\n    environmentBlending\n  })\n  \n  // Generate backdrop glass styles\n  const backdropGlassStyles = useLiquidGlass({\n    variant: 'dark',\n    intensity: 'regular',\n    opacity: 'light',\n    interactive: false,\n    adaptiveOpacity: false,\n    environmentBlending: true\n  })\n  \n  // Size classes\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  }\n  \n  // Handle escape key\n  useEffect(() => {\n    if (!open || !closeOnEscape) return\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose()\n      }\n    }\n    \n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [open, closeOnEscape, onClose])\n  \n  // Handle focus management\n  useEffect(() => {\n    if (!open) return\n    \n    const previousActiveElement = document.activeElement as HTMLElement\n    \n    // Focus the modal when opened\n    if (modalRef.current) {\n      modalRef.current.focus()\n    }\n    \n    // Restore focus when closed\n    return () => {\n      if (previousActiveElement && previousActiveElement.focus) {\n        previousActiveElement.focus()\n      }\n    }\n  }, [open])\n  \n  // Handle body scroll lock\n  useEffect(() => {\n    if (!open) return\n    \n    const originalStyle = window.getComputedStyle(document.body).overflow\n    document.body.style.overflow = 'hidden'\n    \n    return () => {\n      document.body.style.overflow = originalStyle\n    }\n  }, [open])\n  \n  // Handle backdrop click\n  const handleBackdropClick = useCallback((e: React.MouseEvent) => {\n    if (closeOnBackdropClick && e.target === backdropRef.current) {\n      onClose()\n    }\n  }, [closeOnBackdropClick, onClose])\n  \n  // Handle close button click\n  const handleCloseClick = useCallback(() => {\n    onClose()\n  }, [onClose])\n  \n  if (!open) return null\n  \n  const modalContent = (\n    <div\n      ref={backdropRef}\n      className={clsx(\n        'liquid-modal-backdrop',\n        'fixed',\n        'inset-0',\n        'z-50',\n        'flex',\n        'items-center',\n        'justify-center',\n        'p-4',\n        'min-h-screen',\n        centered ? 'items-center' : 'items-start pt-16'\n      )}\n      style={backdropGlassStyles}\n      onClick={handleBackdropClick}\n    >\n      <div\n        ref={modalRef}\n        className={clsx(\n          'liquid-modal',\n          'relative',\n          'w-full',\n          sizeClasses[size],\n          'max-h-[90vh]',\n          'overflow-hidden',\n          'rounded-xl',\n          'border',\n          'border-white/10',\n          'shadow-2xl',\n          'transform',\n          'transition-all',\n          'duration-300',\n          'ease-out',\n          'animate-in',\n          'fade-in-0',\n          'zoom-in-95',\n          className\n        )}\n        style={glassStyles}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? 'modal-title' : undefined}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"liquid-modal-header flex items-center justify-between p-6 border-b border-white/10\">\n            {title && (\n              <h2 id=\"modal-title\" className=\"text-lg font-semibold text-white\">\n                {title}\n              </h2>\n            )}\n            \n            {showCloseButton && (\n              <button\n                type=\"button\"\n                className={clsx(\n                  'flex',\n                  'items-center',\n                  'justify-center',\n                  'w-8',\n                  'h-8',\n                  'rounded-full',\n                  'text-gray-400',\n                  'hover:text-white',\n                  'hover:bg-white/10',\n                  'transition-colors',\n                  'duration-200'\n                )}\n                onClick={handleCloseClick}\n                aria-label=\"Close modal\"\n              >\n                <svg\n                  className=\"w-4 h-4\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className=\"liquid-modal-content overflow-y-auto max-h-full\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n  \n  // Render modal in a portal\n  return createPortal(modalContent, document.body)\n}\n\nLiquidModal.displayName = 'LiquidModal'","import { useState, useEffect, useCallback, type RefObject } from 'react'\nimport { LiquidGlassEngine, calculateLuminance, parseColor, debounce } from '@liquid-ui/core'\nimport type { GlassConfig } from '@liquid-ui/core'\n\ninterface UseAdaptiveGlassProps {\n  elementRef: RefObject<HTMLElement>\n  config: GlassConfig\n  enabled?: boolean\n  debounceMs?: number\n}\n\n/**\n * useAdaptiveGlass - Hook for adaptive glass effects based on background\n * \n * This hook analyzes the background behind the glass element and adjusts\n * opacity and tint automatically for optimal visual contrast and readability.\n */\nexport function useAdaptiveGlass({\n  elementRef,\n  config,\n  enabled = true,\n  debounceMs = 100\n}: UseAdaptiveGlassProps) {\n  const [adaptiveStyles, setAdaptiveStyles] = useState<Record<string, string>>({})\n  const [backgroundLuminance, setBackgroundLuminance] = useState(0.5)\n  \n  // Analyze background and calculate adaptive styles\n  const analyzeBackground = useCallback(\n    debounce(() => {\n      if (!enabled || !elementRef.current) return\n      \n      const element = elementRef.current\n      const computedStyle = window.getComputedStyle(element.parentElement || element)\n      const backgroundColor = computedStyle.backgroundColor\n      \n      // Parse background color and calculate luminance\n      const colorData = parseColor(backgroundColor)\n      if (colorData) {\n        const luminance = calculateLuminance(colorData.r, colorData.g, colorData.b)\n        setBackgroundLuminance(luminance)\n        \n        // Generate adaptive background using the engine\n        const engine = LiquidGlassEngine.getInstance()\n        const adaptiveBackground = engine.getAdaptiveBackground(config, luminance)\n        \n        setAdaptiveStyles({\n          background: adaptiveBackground,\n          // Adjust border opacity based on background\n          borderColor: luminance > 0.5 \n            ? 'rgba(0, 0, 0, 0.1)' \n            : 'rgba(255, 255, 255, 0.1)'\n        })\n      }\n    }, debounceMs),\n    [enabled, elementRef, config, debounceMs]\n  )\n  \n  // Set up intersection observer to detect background changes\n  useEffect(() => {\n    if (!enabled || !elementRef.current) return\n    \n    const element = elementRef.current\n    \n    // Initial analysis\n    analyzeBackground()\n    \n    // Create mutation observer to watch for style changes\n    const observer = new MutationObserver((mutations) => {\n      const hasStyleChanges = mutations.some(\n        mutation => \n          mutation.type === 'attributes' && \n          mutation.attributeName === 'style'\n      )\n      \n      if (hasStyleChanges) {\n        analyzeBackground()\n      }\n    })\n    \n    // Observe parent elements for style changes\n    let currentElement: HTMLElement | null = element.parentElement\n    while (currentElement) {\n      observer.observe(currentElement, {\n        attributes: true,\n        attributeFilter: ['style', 'class']\n      })\n      currentElement = currentElement.parentElement\n    }\n    \n    // Also listen for window resize (might change background)\n    window.addEventListener('resize', analyzeBackground)\n    \n    return () => {\n      observer.disconnect()\n      window.removeEventListener('resize', analyzeBackground)\n    }\n  }, [enabled, elementRef, analyzeBackground])\n  \n  // Re-analyze when config changes\n  useEffect(() => {\n    if (enabled) {\n      analyzeBackground()\n    }\n  }, [config, analyzeBackground, enabled])\n  \n  return {\n    adaptiveStyles,\n    backgroundLuminance,\n    reanalyze: analyzeBackground\n  }\n}","// Components\nexport { LiquidCard } from './components/LiquidCard'\nexport { LiquidButton } from './components/LiquidButton'\nexport { LiquidInput } from './components/LiquidInput'\nexport { LiquidModal } from './components/LiquidModal'\n\n// Hooks\nexport { useLiquidGlass } from './hooks/useLiquidGlass'\nexport { useInteractiveGlass } from './hooks/useInteractiveGlass'\nexport { useAdaptiveGlass } from './hooks/useAdaptiveGlass'\n\n// Types (re-export from core + component-specific)\nexport type {\n  GlassConfig,\n  GlassVariant,\n  BlurIntensity,\n  OpacityLevel,\n  Point,\n  Rect,\n  LiquidGlassStyles\n} from '@liquid-ui/core'\n\nexport type {\n  LiquidCardProps,\n  LiquidButtonProps,\n  LiquidInputProps,\n  LiquidModalProps\n} from './types'","import type { Meta, StoryObj } from '@storybook/react'\nimport { LiquidInput } from '@liquid-ui/react'\nimport { useState } from 'react'\n\nconst meta: Meta<typeof LiquidInput> = {\n  title: 'Components/LiquidInput',\n  component: LiquidInput,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nThe LiquidInput is a beautiful glass form input component with floating labels, validation states, and advanced features inspired by the LiquidModal design patterns.\n\n## Features\n- **Floating Labels**: Smooth glass label animations that float on focus/input\n- **Validation States**: Visual feedback with color transitions and icons\n- **Auto-formatting**: Format-aware input with real-time preview (phone numbers, etc.)\n- **Input Masking**: Type-based input formatting and validation\n- **Glass Effects**: Multiple variants with customizable intensity and opacity\n- **Accessibility**: ARIA states, proper labeling, and keyboard navigation\n        `\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['frosted', 'clear', 'tinted', 'dark'],\n      description: 'Glass effect variant'\n    },\n    intensity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'strong'],\n      description: 'Blur intensity'\n    },\n    opacity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'strong'],\n      description: 'Background opacity'\n    },\n    interactive: {\n      control: 'boolean',\n      description: 'Enable interactive glass effects'\n    },\n    adaptiveOpacity: {\n      control: 'boolean',\n      description: 'Adaptive opacity based on content'\n    },\n    environmentBlending: {\n      control: 'boolean',\n      description: 'Environment color blending'\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Full width input'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disabled state'\n    },\n    label: {\n      control: 'text',\n      description: 'Input label'\n    },\n    error: {\n      control: 'text',\n      description: 'Error message'\n    },\n    helperText: {\n      control: 'text',\n      description: 'Helper text'\n    }\n  },\n  tags: ['autodocs']\n}\n\nexport default meta\ntype Story = StoryObj<typeof meta>\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    placeholder: 'Enter your name',\n    variant: 'frosted',\n    intensity: 'regular',\n    opacity: 'regular',\n    interactive: true,\n    fullWidth: false\n  }\n}\n\nexport const WithFloatingLabel: Story = {\n  args: {\n    label: 'Full Name',\n    placeholder: 'Enter your full name',\n    variant: 'frosted',\n    intensity: 'regular',\n    interactive: true,\n    fullWidth: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Input with floating label animation. The label floats up when focused or when there is content.'\n      }\n    }\n  }\n}\n\n// Validation States\nexport const ValidationStates: Story = {\n  render: () => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [phone, setPhone] = useState('')\n    \n    return (\n      <div className=\"space-y-6 w-96\">\n        <LiquidInput\n          type=\"email\"\n          label=\"Email Address\"\n          placeholder=\"Enter your email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n            </svg>\n          }\n          fullWidth\n        />\n        \n        <LiquidInput\n          type=\"password\"\n          label=\"Password\"\n          placeholder=\"Enter your password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          minLength={8}\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n            </svg>\n          }\n          helperText=\"Must be at least 8 characters\"\n          fullWidth\n        />\n        \n        <LiquidInput\n          type=\"tel\"\n          label=\"Phone Number\"\n          placeholder=\"Enter your phone number\"\n          value={phone}\n          onChange={(e) => setPhone(e.target.value)}\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n            </svg>\n          }\n          helperText=\"Auto-formatted as you type\"\n          fullWidth\n        />\n      </div>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real-time validation with visual feedback, color-coded borders, and validation icons.'\n      }\n    }\n  }\n}\n\n// Glass Variants\nexport const GlassVariants: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <LiquidInput\n        variant=\"frosted\"\n        label=\"Frosted Glass\"\n        placeholder=\"Classic frosted effect\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n          </svg>\n        }\n      />\n      \n      <LiquidInput\n        variant=\"clear\"\n        label=\"Clear Glass\"\n        placeholder=\"Ultra-minimal transparency\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n          </svg>\n        }\n      />\n      \n      <LiquidInput\n        variant=\"tinted\"\n        label=\"Tinted Glass\"\n        placeholder=\"Subtle color tinting\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z\" />\n          </svg>\n        }\n      />\n      \n      <LiquidInput\n        variant=\"dark\"\n        label=\"Dark Glass\"\n        placeholder=\"Dark glass variant\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n          </svg>\n        }\n      />\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different glass effect variants with floating labels and validation states.'\n      }\n    }\n  }\n}\n\n// Error States\nexport const ErrorStates: Story = {\n  render: () => (\n    <div className=\"space-y-6 w-96\">\n      <LiquidInput\n        label=\"Email\"\n        placeholder=\"Enter your email\"\n        error=\"Please enter a valid email address\"\n        value=\"invalid-email\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n          </svg>\n        }\n        fullWidth\n      />\n      \n      <LiquidInput\n        label=\"Password\"\n        placeholder=\"Enter password\"\n        type=\"password\"\n        error=\"Password must be at least 8 characters\"\n        value=\"123\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n          </svg>\n        }\n        fullWidth\n      />\n      \n      <LiquidInput\n        label=\"Required Field\"\n        placeholder=\"This field is required\"\n        error=\"This field cannot be empty\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>\n        }\n        fullWidth\n      />\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Error states with validation feedback, red borders, error icons, and descriptive messages.'\n      }\n    }\n  }\n}\n\n// Interactive Form\nexport const InteractiveForm: Story = {\n  render: () => {\n    const [formData, setFormData] = useState({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      website: '',\n      message: ''\n    })\n    \n    const [showSuccess, setShowSuccess] = useState(false)\n    \n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault()\n      setShowSuccess(true)\n      setTimeout(() => setShowSuccess(false), 3000)\n    }\n    \n    return (\n      <form onSubmit={handleSubmit} className=\"w-96 space-y-6\">\n        {showSuccess && (\n          <div className=\"p-4 bg-green-500/20 border border-green-500/30 rounded-lg text-green-300 text-sm\">\n            ✅ Form submitted successfully!\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <LiquidInput\n            label=\"First Name\"\n            placeholder=\"John\"\n            value={formData.firstName}\n            onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n            required\n          />\n          \n          <LiquidInput\n            label=\"Last Name\"\n            placeholder=\"Doe\"\n            value={formData.lastName}\n            onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n            required\n          />\n        </div>\n        \n        <LiquidInput\n          type=\"email\"\n          label=\"Email Address\"\n          placeholder=\"john@example.com\"\n          value={formData.email}\n          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n          required\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n            </svg>\n          }\n          fullWidth\n        />\n        \n        <LiquidInput\n          type=\"tel\"\n          label=\"Phone Number\"\n          placeholder=\"(555) 123-4567\"\n          value={formData.phone}\n          onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n            </svg>\n          }\n          helperText=\"Auto-formatted as you type\"\n          fullWidth\n        />\n        \n        <LiquidInput\n          type=\"url\"\n          label=\"Website\"\n          placeholder=\"https://example.com\"\n          value={formData.website}\n          onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9\" />\n            </svg>\n          }\n          helperText=\"Optional website URL\"\n          fullWidth\n        />\n        \n        <button\n          type=\"submit\"\n          className=\"w-full px-4 py-3 bg-blue-500/20 border border-blue-500/30 rounded-lg text-blue-300 font-medium hover:bg-blue-500/30 transition-colors\"\n        >\n          Submit Form\n        </button>\n      </form>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Complete interactive form with validation, auto-formatting, and real-time feedback.'\n      }\n    }\n  }\n}\n\n// Preset Components\nexport const PresetComponents: Story = {\n  render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Input Type Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LiquidInput.Email\n            label=\"Email\"\n            placeholder=\"Enter your email\"\n            helperText=\"We'll never share your email\"\n          />\n          \n          <LiquidInput.Password\n            label=\"Password\"\n            placeholder=\"Enter your password\"\n            helperText=\"Must be at least 8 characters\"\n          />\n          \n          <LiquidInput.Search\n            placeholder=\"Search...\"\n            leftIcon={\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n              </svg>\n            }\n          />\n          \n          <LiquidInput.Default\n            label=\"Full Name\"\n            placeholder=\"Enter your full name\"\n            leftIcon={\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n              </svg>\n            }\n          />\n        </div>\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Style Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LiquidInput.Clear\n            label=\"Clear Style\"\n            placeholder=\"Minimal transparency\"\n          />\n          \n          <LiquidInput.Default\n            label=\"Default Style\"\n            placeholder=\"Frosted glass effect\"\n          />\n        </div>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Pre-configured input components optimized for common use cases and input types.'\n      }\n    }\n  }\n}\n\n// Advanced Features\nexport const AdvancedFeatures: Story = {\n  render: () => {\n    const [searchTerm, setSearchTerm] = useState('')\n    const [value, setValue] = useState('')\n    \n    return (\n      <div className=\"space-y-8 w-96\">\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-white\">Auto-formatting</h3>\n          <LiquidInput\n            type=\"tel\"\n            label=\"Phone Number\"\n            placeholder=\"Enter phone number\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            leftIcon={\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n              </svg>\n            }\n            helperText=\"Auto-formats to (555) 123-4567\"\n            fullWidth\n          />\n        </div>\n        \n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-white\">Real-time Search</h3>\n          <LiquidInput\n            type=\"search\"\n            label=\"Search\"\n            placeholder=\"Type to search...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n              </svg>\n            }\n            rightIcon={searchTerm && (\n              <button \n                onClick={() => setSearchTerm('')}\n                className=\"text-gray-400 hover:text-white transition-colors\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            )}\n            helperText={searchTerm ? `Searching for \"${searchTerm}\"...` : 'Start typing to search'}\n            fullWidth\n          />\n        </div>\n        \n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-white\">Environment Blending</h3>\n          <LiquidInput\n            label=\"Advanced Input\"\n            placeholder=\"Environment-aware styling\"\n            variant=\"frosted\"\n            intensity=\"strong\"\n            environmentBlending\n            adaptiveOpacity\n            leftIcon={\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            }\n            helperText=\"Adapts to background colors\"\n            fullWidth\n          />\n        </div>\n      </div>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Advanced features including auto-formatting, real-time feedback, and environment-aware styling.'\n      }\n    }\n  }\n}\n\n// Disabled States\nexport const DisabledStates: Story = {\n  render: () => (\n    <div className=\"space-y-6 w-96\">\n      <LiquidInput\n        label=\"Disabled Input\"\n        placeholder=\"This input is disabled\"\n        disabled\n        value=\"Cannot edit this\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n          </svg>\n        }\n        helperText=\"This field is currently disabled\"\n        fullWidth\n      />\n      \n      <LiquidInput\n        label=\"Disabled with Error\"\n        placeholder=\"Disabled with error state\"\n        disabled\n        error=\"Field is disabled due to validation error\"\n        value=\"Invalid value\"\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>\n        }\n        fullWidth\n      />\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Disabled input states with proper styling and accessibility considerations.'\n      }\n    }\n  }\n}"],"names":[],"sourceRoot":""}