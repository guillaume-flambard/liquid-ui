"use strict";
(self["webpackChunk_liquid_ui_storybook"] = self["webpackChunk_liquid_ui_storybook"] || []).push([["LiquidButton-stories"],{

/***/ "../../packages/react/src/components/LiquidModal.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidModal: () => (/* binding */ LiquidModal)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ "../../node_modules/clsx/dist/clsx.mjs");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");




/**
 * LiquidModal - Glass modal and overlay component
 * 
 * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.
 * Includes backdrop blur, keyboard navigation, and accessibility features.
 */ const LiquidModal = ({ open, onClose, title, showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, size = 'md', centered = true, variant = 'frosted', intensity = 'strong', opacity = 'regular', interactive = false, adaptiveOpacity = false, environmentBlending = true, className, children })=>{
    const modalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const backdropRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Generate glass styles for the modal content
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Generate backdrop glass styles
    const backdropGlassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant: 'dark',
        intensity: 'regular',
        opacity: 'light',
        interactive: false,
        adaptiveOpacity: false,
        environmentBlending: true
    });
    // Size classes
    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl'
    };
    // Handle escape key
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open || !closeOnEscape) return;
        const handleKeyDown = (e)=>{
            if (e.key === 'Escape') {
                onClose();
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown);
    }, [
        open,
        closeOnEscape,
        onClose
    ]);
    // Handle focus management
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const previousActiveElement = document.activeElement;
        // Focus the modal when opened
        if (modalRef.current) {
            modalRef.current.focus();
        }
        // Restore focus when closed
        return ()=>{
            if (previousActiveElement && previousActiveElement.focus) {
                previousActiveElement.focus();
            }
        };
    }, [
        open
    ]);
    // Handle body scroll lock
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const originalStyle = window.getComputedStyle(document.body).overflow;
        document.body.style.overflow = 'hidden';
        return ()=>{
            document.body.style.overflow = originalStyle;
        };
    }, [
        open
    ]);
    // Handle backdrop click
    const handleBackdropClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        if (closeOnBackdropClick && e.target === backdropRef.current) {
            onClose();
        }
    }, [
        closeOnBackdropClick,
        onClose
    ]);
    // Handle close button click
    const handleCloseClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        onClose();
    }, [
        onClose
    ]);
    if (!open) return null;
    const modalContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: backdropRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal-backdrop', 'fixed', 'inset-0', 'z-50', 'flex', 'items-center', 'justify-center', 'p-4', 'min-h-screen', centered ? 'items-center' : 'items-start pt-16'),
        style: backdropGlassStyles,
        onClick: handleBackdropClick
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: modalRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal', 'relative', 'w-full', sizeClasses[size], 'max-h-[90vh]', 'overflow-hidden', 'rounded-xl', 'border', 'border-white/10', 'shadow-2xl', 'transform', 'transition-all', 'duration-300', 'ease-out', 'animate-in', 'fade-in-0', 'zoom-in-95', className),
        style: glassStyles,
        tabIndex: -1,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": title ? 'modal-title' : undefined
    }, (title || showCloseButton) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
    }, title && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("h2", {
        id: "modal-title",
        className: "text-lg font-semibold text-white"
    }, title), showCloseButton && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        type: "button",
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('flex', 'items-center', 'justify-center', 'w-8', 'h-8', 'rounded-full', 'text-gray-400', 'hover:text-white', 'hover:bg-white/10', 'transition-colors', 'duration-200'),
        onClick: handleCloseClick,
        "aria-label": "Close modal"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6 18L18 6M6 6l12 12"
    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-content overflow-y-auto max-h-full"
    }, children)));
    // Render modal in a portal
    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(modalContent, document.body);
};
LiquidModal.displayName = 'LiquidModal';

try {
    // @ts-ignore
    LiquidModal.displayName = "LiquidModal";
    // @ts-ignore
    LiquidModal.__docgenInfo = { "description": "LiquidModal - Glass modal and overlay component\n\nA beautiful modal with liquid glass effects, perfect for dialogs and overlays.\nIncludes backdrop blur, keyboard navigation, and accessibility features.", "displayName": "LiquidModal", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidModal.tsx#LiquidModal"] = { docgenInfo: LiquidModal.__docgenInfo, name: "LiquidModal", path: "../../packages/react/src/components/LiquidModal.tsx#LiquidModal" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "../../packages/react/src/hooks/useAdaptiveGlass.ts":
/*!**********************************************************!*\
  !*** ../../packages/react/src/hooks/useAdaptiveGlass.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useAdaptiveGlass: () => (/* binding */ useAdaptiveGlass)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liquid-ui/core */ "../../packages/core/src/index.ts");


/**
 * useAdaptiveGlass - Hook for adaptive glass effects based on background
 * 
 * This hook analyzes the background behind the glass element and adjusts
 * opacity and tint automatically for optimal visual contrast and readability.
 */ function useAdaptiveGlass({ elementRef, config, enabled = true, debounceMs = 100 }) {
    const [adaptiveStyles, setAdaptiveStyles] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
    const [backgroundLuminance, setBackgroundLuminance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0.5);
    // Analyze background and calculate adaptive styles
    const analyzeBackground = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.debounce)(()=>{
        if (!enabled || !elementRef.current) return;
        const element = elementRef.current;
        const computedStyle = window.getComputedStyle(element.parentElement || element);
        const backgroundColor = computedStyle.backgroundColor;
        // Parse background color and calculate luminance
        const colorData = (0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.parseColor)(backgroundColor);
        if (colorData) {
            const luminance = (0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.calculateLuminance)(colorData.r, colorData.g, colorData.b);
            setBackgroundLuminance(luminance);
            // Generate adaptive background using the engine
            const engine = _liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.LiquidGlassEngine.getInstance();
            const adaptiveBackground = engine.getAdaptiveBackground(config, luminance);
            setAdaptiveStyles({
                background: adaptiveBackground,
                // Adjust border opacity based on background
                borderColor: luminance > 0.5 ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
            });
        }
    }, debounceMs), [
        enabled,
        elementRef,
        config,
        debounceMs
    ]);
    // Set up intersection observer to detect background changes
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!enabled || !elementRef.current) return;
        const element = elementRef.current;
        // Initial analysis
        analyzeBackground();
        // Create mutation observer to watch for style changes
        const observer = new MutationObserver((mutations)=>{
            const hasStyleChanges = mutations.some((mutation)=>mutation.type === 'attributes' && mutation.attributeName === 'style');
            if (hasStyleChanges) {
                analyzeBackground();
            }
        });
        // Observe parent elements for style changes
        let currentElement = element.parentElement;
        while(currentElement){
            observer.observe(currentElement, {
                attributes: true,
                attributeFilter: [
                    'style',
                    'class'
                ]
            });
            currentElement = currentElement.parentElement;
        }
        // Also listen for window resize (might change background)
        window.addEventListener('resize', analyzeBackground);
        return ()=>{
            observer.disconnect();
            window.removeEventListener('resize', analyzeBackground);
        };
    }, [
        enabled,
        elementRef,
        analyzeBackground
    ]);
    // Re-analyze when config changes
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (enabled) {
            analyzeBackground();
        }
    }, [
        config,
        analyzeBackground,
        enabled
    ]);
    return {
        adaptiveStyles,
        backgroundLuminance,
        reanalyze: analyzeBackground
    };
}


/***/ }),

/***/ "../../packages/react/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/react/src/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidButton: () => (/* reexport safe */ _components_LiquidButton__WEBPACK_IMPORTED_MODULE_1__.LiquidButton),
/* harmony export */   LiquidCard: () => (/* reexport safe */ _components_LiquidCard__WEBPACK_IMPORTED_MODULE_0__.LiquidCard),
/* harmony export */   LiquidInput: () => (/* reexport safe */ _components_LiquidInput__WEBPACK_IMPORTED_MODULE_2__.LiquidInput),
/* harmony export */   LiquidModal: () => (/* reexport safe */ _components_LiquidModal__WEBPACK_IMPORTED_MODULE_3__.LiquidModal),
/* harmony export */   useAdaptiveGlass: () => (/* reexport safe */ _hooks_useAdaptiveGlass__WEBPACK_IMPORTED_MODULE_6__.useAdaptiveGlass),
/* harmony export */   useInteractiveGlass: () => (/* reexport safe */ _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_5__.useInteractiveGlass),
/* harmony export */   useLiquidGlass: () => (/* reexport safe */ _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_4__.useLiquidGlass)
/* harmony export */ });
/* harmony import */ var _components_LiquidCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/LiquidCard */ "../../packages/react/src/components/LiquidCard.tsx");
/* harmony import */ var _components_LiquidButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/LiquidButton */ "../../packages/react/src/components/LiquidButton.tsx");
/* harmony import */ var _components_LiquidInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/LiquidInput */ "../../packages/react/src/components/LiquidInput.tsx");
/* harmony import */ var _components_LiquidModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/LiquidModal */ "../../packages/react/src/components/LiquidModal.tsx");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");
/* harmony import */ var _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useInteractiveGlass */ "../../packages/react/src/hooks/useInteractiveGlass.ts");
/* harmony import */ var _hooks_useAdaptiveGlass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useAdaptiveGlass */ "../../packages/react/src/hooks/useAdaptiveGlass.ts");
// Components




// Hooks





/***/ }),

/***/ "./src/stories/LiquidButton.stories.tsx":
/*!**********************************************!*\
  !*** ./src/stories/LiquidButton.stories.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedCustomization: () => (/* binding */ AdvancedCustomization),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   FocusAndAccessibility: () => (/* binding */ FocusAndAccessibility),
/* harmony export */   FullWidth: () => (/* binding */ FullWidth),
/* harmony export */   GlassVariants: () => (/* binding */ GlassVariants),
/* harmony export */   InteractiveStates: () => (/* binding */ InteractiveStates),
/* harmony export */   LoadingStates: () => (/* binding */ LoadingStates),
/* harmony export */   PresetComponents: () => (/* binding */ PresetComponents),
/* harmony export */   Sizes: () => (/* binding */ Sizes),
/* harmony export */   WithIcons: () => (/* binding */ WithIcons),
/* harmony export */   WithRippleEffects: () => (/* binding */ WithRippleEffects),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liquid-ui/react */ "../../packages/react/src/index.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


const meta = {
  title: 'Components/LiquidButton',
  component: _liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: `
The LiquidButton is an interactive glass button component with beautiful liquid glass effects, ripple animations, and advanced interactions inspired by the LiquidModal design patterns.

## Features
- **Ripple Effects**: Interactive ripple animations on click and keyboard activation
- **Advanced Loading States**: Enhanced spinner with glass morphing
- **Micro-interactions**: Subtle scale/blur transitions on press and hover
- **Accessibility**: ARIA states, keyboard navigation, and focus management
- **Glass Effects**: Multiple variants with customizable intensity and opacity
        `
      }
    }
  },
  argTypes: {
    variant: {
      control: {
        type: 'select'
      },
      options: ['frosted', 'clear', 'tinted', 'dark'],
      description: 'Glass effect variant'
    },
    intensity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'strong'],
      description: 'Blur intensity'
    },
    opacity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'strong'],
      description: 'Background opacity'
    },
    size: {
      control: {
        type: 'select'
      },
      options: ['sm', 'md', 'lg'],
      description: 'Button size'
    },
    interactive: {
      control: 'boolean',
      description: 'Enable interactive glass effects'
    },
    adaptiveOpacity: {
      control: 'boolean',
      description: 'Adaptive opacity based on content'
    },
    environmentBlending: {
      control: 'boolean',
      description: 'Environment color blending'
    },
    fullWidth: {
      control: 'boolean',
      description: 'Full width button'
    },
    loading: {
      control: 'boolean',
      description: 'Loading state'
    },
    disabled: {
      control: 'boolean',
      description: 'Disabled state'
    }
  },
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Basic Examples
const Default = {
  args: {
    children: 'Default Button',
    variant: 'frosted',
    intensity: 'regular',
    opacity: 'regular',
    interactive: true,
    size: 'md'
  }
};
const WithRippleEffects = {
  args: {
    children: 'Click me for ripples!',
    variant: 'frosted',
    intensity: 'regular',
    interactive: true,
    size: 'md'
  },
  parameters: {
    docs: {
      description: {
        story: 'Click or use keyboard (Enter/Space) to see the ripple effects in action.'
      }
    }
  }
};
// Size Variants
const Sizes = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    size: "sm"
  }, "Small"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    size: "md"
  }, "Medium"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    size: "lg"
  }, "Large")),
  parameters: {
    docs: {
      description: {
        story: 'Different button sizes with consistent ripple and hover effects.'
      }
    }
  }
};
// Glass Variants
const GlassVariants = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "flex flex-col gap-4"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "frosted"
  }, "Frosted"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "clear"
  }, "Clear"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "tinted"
  }, "Tinted"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "dark"
  }, "Dark"))),
  parameters: {
    docs: {
      description: {
        story: 'Different glass effect variants, each with enhanced hover and focus states.'
      }
    }
  }
};
// Interactive States
const InteractiveStates = {
  render: () => {
    const [clickCount, setClickCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);
    return /*#__PURE__*/React.createElement("div", {
      className: "flex flex-col gap-4"
    }, /*#__PURE__*/React.createElement("div", {
      className: "flex gap-4"
    }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
      onClick: () => setClickCount(c => c + 1),
      variant: "frosted"
    }, "Clicked ", clickCount, " times"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
      loading: true,
      variant: "clear"
    }, "Loading..."), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
      disabled: true,
      variant: "tinted"
    }, "Disabled")));
  },
  parameters: {
    docs: {
      description: {
        story: 'Interactive states showing ripple effects, loading spinner, and disabled state.'
      }
    }
  }
};
// With Icons
const WithIcons = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "flex flex-col gap-4"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M12 4v16m8-8H4"
    })),
    variant: "frosted"
  }, "Add Item"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    rightIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M9 5l7 7-7 7"
    })),
    variant: "clear"
  }, "Continue"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
    })),
    rightIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M5 13l4 4L19 7"
    })),
    variant: "tinted"
  }, "Save Favorite"))),
  parameters: {
    docs: {
      description: {
        story: 'Buttons with left and right icons, maintaining ripple effects and glass aesthetics.'
      }
    }
  }
};
// Loading States
const LoadingStates = {
  render: () => {
    const [loadingStates, setLoadingStates] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
      button1: false,
      button2: false,
      button3: false
    });
    const handleClick = button => {
      setLoadingStates(prev => ({
        ...prev,
        [button]: true
      }));
      setTimeout(() => {
        setLoadingStates(prev => ({
          ...prev,
          [button]: false
        }));
      }, 2000);
    };
    return /*#__PURE__*/React.createElement("div", {
      className: "flex gap-4"
    }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
      loading: loadingStates.button1,
      onClick: () => handleClick('button1'),
      variant: "frosted"
    }, loadingStates.button1 ? 'Processing...' : 'Process'), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
      loading: loadingStates.button2,
      onClick: () => handleClick('button2'),
      variant: "clear",
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"
      }))
    }, loadingStates.button2 ? 'Downloading...' : 'Download'), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
      loading: loadingStates.button3,
      onClick: () => handleClick('button3'),
      variant: "tinted",
      size: "lg"
    }, loadingStates.button3 ? 'Uploading...' : 'Upload File'));
  },
  parameters: {
    docs: {
      description: {
        story: 'Interactive loading states with glass spinner effects. Click to trigger loading.'
      }
    }
  }
};
// Focus and Accessibility
const FocusAndAccessibility = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "flex flex-col gap-4"
  }, /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-600 mb-2"
  }, "Use Tab to navigate, Enter or Space to activate. Notice the enhanced focus indicators."), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "frosted"
  }, "First Button"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "clear"
  }, "Second Button"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "tinted"
  }, "Third Button"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    variant: "dark"
  }, "Fourth Button"))),
  parameters: {
    docs: {
      description: {
        story: 'Demonstrates keyboard navigation, focus management, and accessibility features with enhanced visual feedback.'
      }
    }
  }
};
// Preset Components
const PresetComponents = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "flex flex-col gap-6"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold mb-3"
  }, "Style Presets"), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton.Primary, null, "Primary Action"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton.Secondary, null, "Secondary Action"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton.Tinted, null, "Tinted Action"))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold mb-3"
  }, "Size Presets"), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4 items-center"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton.Small, null, "Small Button"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton.Large, null, "Large Button")))),
  parameters: {
    docs: {
      description: {
        story: 'Pre-configured button components with optimized settings for common use cases.'
      }
    }
  }
};
// Full Width
const FullWidth = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "w-96 space-y-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    fullWidth: true,
    variant: "frosted"
  }, "Full Width Frosted"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    fullWidth: true,
    variant: "clear",
    size: "lg"
  }, "Full Width Large"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidButton, {
    fullWidth: true,
    variant: "tinted",
    loading: true,
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
    }))
  }, "Processing Upload...")),
  parameters: {
    docs: {
      description: {
        story: 'Full-width buttons with consistent ripple effects and glass styling.'
      }
    }
  }
};
// Advanced Customization
const AdvancedCustomization = {
  args: {
    children: 'Custom Button',
    variant: 'frosted',
    intensity: 'strong',
    opacity: 'light',
    interactive: true,
    adaptiveOpacity: true,
    environmentBlending: true,
    size: 'lg',
    className: 'border-2 border-blue-500/30 shadow-2xl shadow-blue-500/20'
  },
  parameters: {
    docs: {
      description: {
        story: 'Advanced customization with environment blending, adaptive opacity, and custom styling while maintaining ripple effects.'
      }
    }
  }
};
;
const __namedExportsOrder = ["Default", "WithRippleEffects", "Sizes", "GlassVariants", "InteractiveStates", "WithIcons", "LoadingStates", "FocusAndAccessibility", "PresetComponents", "FullWidth", "AdvancedCustomization"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    children: 'Default Button',\n    variant: 'frosted',\n    intensity: 'regular',\n    opacity: 'regular',\n    interactive: true,\n    size: 'md'\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
WithRippleEffects.parameters = {
  ...WithRippleEffects.parameters,
  docs: {
    ...WithRippleEffects.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    children: 'Click me for ripples!',\n    variant: 'frosted',\n    intensity: 'regular',\n    interactive: true,\n    size: 'md'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Click or use keyboard (Enter/Space) to see the ripple effects in action.'\n      }\n    }\n  }\n}",
      ...WithRippleEffects.parameters?.docs?.source
    }
  }
};
Sizes.parameters = {
  ...Sizes.parameters,
  docs: {
    ...Sizes.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"flex items-center gap-4\">\n      <LiquidButton size=\"sm\">Small</LiquidButton>\n      <LiquidButton size=\"md\">Medium</LiquidButton>\n      <LiquidButton size=\"lg\">Large</LiquidButton>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different button sizes with consistent ripple and hover effects.'\n      }\n    }\n  }\n}",
      ...Sizes.parameters?.docs?.source
    }
  }
};
GlassVariants.parameters = {
  ...GlassVariants.parameters,
  docs: {
    ...GlassVariants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"flex flex-col gap-4\">\n      <div className=\"flex gap-4\">\n        <LiquidButton variant=\"frosted\">Frosted</LiquidButton>\n        <LiquidButton variant=\"clear\">Clear</LiquidButton>\n        <LiquidButton variant=\"tinted\">Tinted</LiquidButton>\n        <LiquidButton variant=\"dark\">Dark</LiquidButton>\n      </div>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different glass effect variants, each with enhanced hover and focus states.'\n      }\n    }\n  }\n}",
      ...GlassVariants.parameters?.docs?.source
    }
  }
};
InteractiveStates.parameters = {
  ...InteractiveStates.parameters,
  docs: {
    ...InteractiveStates.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [clickCount, setClickCount] = useState(0);\n    return <div className=\"flex flex-col gap-4\">\n        <div className=\"flex gap-4\">\n          <LiquidButton onClick={() => setClickCount(c => c + 1)} variant=\"frosted\">\n            Clicked {clickCount} times\n          </LiquidButton>\n          <LiquidButton loading variant=\"clear\">\n            Loading...\n          </LiquidButton>\n          <LiquidButton disabled variant=\"tinted\">\n            Disabled\n          </LiquidButton>\n        </div>\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive states showing ripple effects, loading spinner, and disabled state.'\n      }\n    }\n  }\n}",
      ...InteractiveStates.parameters?.docs?.source
    }
  }
};
WithIcons.parameters = {
  ...WithIcons.parameters,
  docs: {
    ...WithIcons.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"flex flex-col gap-4\">\n      <div className=\"flex gap-4\">\n        <LiquidButton leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n            </svg>} variant=\"frosted\">\n          Add Item\n        </LiquidButton>\n        <LiquidButton rightIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>} variant=\"clear\">\n          Continue\n        </LiquidButton>\n        <LiquidButton leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n            </svg>} rightIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>} variant=\"tinted\">\n          Save Favorite\n        </LiquidButton>\n      </div>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Buttons with left and right icons, maintaining ripple effects and glass aesthetics.'\n      }\n    }\n  }\n}",
      ...WithIcons.parameters?.docs?.source
    }
  }
};
LoadingStates.parameters = {
  ...LoadingStates.parameters,
  docs: {
    ...LoadingStates.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [loadingStates, setLoadingStates] = useState({\n      button1: false,\n      button2: false,\n      button3: false\n    });\n    const handleClick = (button: keyof typeof loadingStates) => {\n      setLoadingStates(prev => ({\n        ...prev,\n        [button]: true\n      }));\n      setTimeout(() => {\n        setLoadingStates(prev => ({\n          ...prev,\n          [button]: false\n        }));\n      }, 2000);\n    };\n    return <div className=\"flex gap-4\">\n        <LiquidButton loading={loadingStates.button1} onClick={() => handleClick('button1')} variant=\"frosted\">\n          {loadingStates.button1 ? 'Processing...' : 'Process'}\n        </LiquidButton>\n        <LiquidButton loading={loadingStates.button2} onClick={() => handleClick('button2')} variant=\"clear\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n            </svg>}>\n          {loadingStates.button2 ? 'Downloading...' : 'Download'}\n        </LiquidButton>\n        <LiquidButton loading={loadingStates.button3} onClick={() => handleClick('button3')} variant=\"tinted\" size=\"lg\">\n          {loadingStates.button3 ? 'Uploading...' : 'Upload File'}\n        </LiquidButton>\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive loading states with glass spinner effects. Click to trigger loading.'\n      }\n    }\n  }\n}",
      ...LoadingStates.parameters?.docs?.source
    }
  }
};
FocusAndAccessibility.parameters = {
  ...FocusAndAccessibility.parameters,
  docs: {
    ...FocusAndAccessibility.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"flex flex-col gap-4\">\n      <p className=\"text-sm text-gray-600 mb-2\">\n        Use Tab to navigate, Enter or Space to activate. Notice the enhanced focus indicators.\n      </p>\n      <div className=\"flex gap-4\">\n        <LiquidButton variant=\"frosted\">First Button</LiquidButton>\n        <LiquidButton variant=\"clear\">Second Button</LiquidButton>\n        <LiquidButton variant=\"tinted\">Third Button</LiquidButton>\n        <LiquidButton variant=\"dark\">Fourth Button</LiquidButton>\n      </div>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates keyboard navigation, focus management, and accessibility features with enhanced visual feedback.'\n      }\n    }\n  }\n}",
      ...FocusAndAccessibility.parameters?.docs?.source
    }
  }
};
PresetComponents.parameters = {
  ...PresetComponents.parameters,
  docs: {
    ...PresetComponents.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"flex flex-col gap-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-3\">Style Presets</h3>\n        <div className=\"flex gap-4\">\n          <LiquidButton.Primary>Primary Action</LiquidButton.Primary>\n          <LiquidButton.Secondary>Secondary Action</LiquidButton.Secondary>\n          <LiquidButton.Tinted>Tinted Action</LiquidButton.Tinted>\n        </div>\n      </div>\n      <div>\n        <h3 className=\"text-lg font-semibold mb-3\">Size Presets</h3>\n        <div className=\"flex gap-4 items-center\">\n          <LiquidButton.Small>Small Button</LiquidButton.Small>\n          <LiquidButton.Large>Large Button</LiquidButton.Large>\n        </div>\n      </div>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Pre-configured button components with optimized settings for common use cases.'\n      }\n    }\n  }\n}",
      ...PresetComponents.parameters?.docs?.source
    }
  }
};
FullWidth.parameters = {
  ...FullWidth.parameters,
  docs: {
    ...FullWidth.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"w-96 space-y-4\">\n      <LiquidButton fullWidth variant=\"frosted\">\n        Full Width Frosted\n      </LiquidButton>\n      <LiquidButton fullWidth variant=\"clear\" size=\"lg\">\n        Full Width Large\n      </LiquidButton>\n      <LiquidButton fullWidth variant=\"tinted\" loading leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12\" />\n          </svg>}>\n        Processing Upload...\n      </LiquidButton>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Full-width buttons with consistent ripple effects and glass styling.'\n      }\n    }\n  }\n}",
      ...FullWidth.parameters?.docs?.source
    }
  }
};
AdvancedCustomization.parameters = {
  ...AdvancedCustomization.parameters,
  docs: {
    ...AdvancedCustomization.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    children: 'Custom Button',\n    variant: 'frosted',\n    intensity: 'strong',\n    opacity: 'light',\n    interactive: true,\n    adaptiveOpacity: true,\n    environmentBlending: true,\n    size: 'lg',\n    className: 'border-2 border-blue-500/30 shadow-2xl shadow-blue-500/20'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Advanced customization with environment blending, adaptive opacity, and custom styling while maintaining ripple effects.'\n      }\n    }\n  }\n}",
      ...AdvancedCustomization.parameters?.docs?.source
    }
  }
};

/***/ })

}]);
//# sourceMappingURL=LiquidButton-stories.iframe.bundle.js.map