"use strict";
self["webpackHotUpdate_liquid_ui_storybook"]("components-LiquidInput-stories",{

/***/ "../../packages/react/src/components/LiquidInput.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidInput.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidInput: () => (/* binding */ LiquidInput)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");
/* harmony import */ var _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useInteractiveGlass */ "../../packages/react/src/hooks/useInteractiveGlass.ts");
/* harmony import */ var _styles_LiquidInput_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/LiquidInput.css */ "../../packages/react/src/styles/LiquidInput.css");




/**
 * LiquidInput - Glass form input component
 * 
 * A beautiful input field with liquid glass effects, perfect for forms and data entry.
 * Includes labels, error states, helper text, and icons.
 */ const LiquidInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ variant = 'frosted', intensity = 'subtle', opacity = 'regular', interactive = true, adaptiveOpacity = false, environmentBlending = false, label, error, helperText, leftIcon, rightIcon, fullWidth = false, className, disabled, style, ...props }, ref)=>{
    const [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const [hasValue, setHasValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(props.value || props.defaultValue));
    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();
    const inputId = props.id || `liquid-input-${id}`;
    const errorId = error ? `${inputId}-error` : undefined;
    const helperId = helperText ? `${inputId}-helper` : undefined;
    // Generate glass styles for the wrapper
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_1__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Interactive effects on the wrapper
    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = (0,_hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_2__.useInteractiveGlass)({
        elementRef: wrapperRef,
        enabled: interactive && !disabled
    });
    // Handle input events
    const onFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setIsFocused(true);
        props.onFocus?.(e);
    }, [
        props.onFocus
    ]);
    const onBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setIsFocused(false);
        props.onBlur?.(e);
    }, [
        props.onBlur
    ]);
    const onChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setHasValue(Boolean(e.target.value));
        props.onChange?.(e);
    }, [
        props.onChange
    ]);
    // Handle wrapper mouse events
    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseEnter();
    }, [
        handleMouseEnter
    ]);
    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseLeave();
    }, [
        handleMouseLeave
    ]);
    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseMove(e);
    }, [
        handleMouseMove
    ]);
    // Base styles
    const containerStyle = {
        display: 'flex',
        flexDirection: 'column',
        width: fullWidth ? '100%' : 'auto',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
    };
    const labelStyle = {
        fontSize: '14px',
        fontWeight: 500,
        marginBottom: '6px',
        color: error ? '#ef4444' : isFocused ? '#3b82f6' : 'rgba(255, 255, 255, 0.9)',
        transition: 'color 0.2s ease'
    };
    const wrapperStyle = {
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        borderRadius: '12px',
        border: `1px solid ${error ? 'rgba(239, 68, 68, 0.5)' : isFocused ? 'rgba(59, 130, 246, 0.5)' : 'rgba(255, 255, 255, 0.15)'}`,
        transition: 'all 0.2s ease',
        cursor: disabled ? 'not-allowed' : 'text',
        opacity: disabled ? 0.5 : 1,
        transform: interactive && !disabled ? 'translateZ(0)' : 'none',
        boxShadow: isFocused ? `0 0 0 3px ${error ? 'rgba(239, 68, 68, 0.1)' : 'rgba(59, 130, 246, 0.1)'}, 0 8px 32px rgba(0, 0, 0, 0.12)` : '0 4px 16px rgba(0, 0, 0, 0.08)',
        ...glassStyles
    };
    const inputStyle = {
        width: '100%',
        background: 'transparent',
        border: 'none',
        outline: 'none',
        padding: '12px 16px',
        paddingLeft: leftIcon ? '44px' : '16px',
        paddingRight: rightIcon ? '44px' : '16px',
        fontSize: '15px',
        lineHeight: '1.4',
        color: 'rgba(255, 255, 255, 0.95)',
        fontFamily: 'inherit',
        borderRadius: '12px'
    };
    const iconStyle = {
        position: 'absolute',
        top: '50%',
        transform: 'translateY(-50%)',
        width: '18px',
        height: '18px',
        color: 'rgba(255, 255, 255, 0.6)',
        pointerEvents: 'none',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
    };
    const leftIconStyle = {
        ...iconStyle,
        left: '14px'
    };
    const rightIconStyle = {
        ...iconStyle,
        right: '14px'
    };
    const helperStyle = {
        fontSize: '12px',
        marginTop: '6px',
        color: error ? '#ef4444' : 'rgba(255, 255, 255, 0.6)',
        lineHeight: '1.4'
    };
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: containerStyle,
        className: `liquid-input ${className || ''}`
    }, label && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("label", {
        htmlFor: inputId,
        style: labelStyle
    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: wrapperRef,
        style: {
            ...wrapperStyle,
            ...style
        },
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onMouseMove: onMouseMove
    }, leftIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: leftIconStyle
    }, leftIcon), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
        ref: (node)=>{
            // Handle both forwarded ref and internal ref
            if (typeof ref === 'function') {
                ref(node);
            } else if (ref) {
                ref.current = node;
            }
            inputRef.current = node;
        },
        id: inputId,
        style: inputStyle,
        disabled: disabled,
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: onChange,
        "aria-invalid": error ? 'true' : 'false',
        "aria-describedby": errorId || helperId || undefined,
        ...props
    }), rightIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        style: rightIconStyle
    }, rightIcon)), (helperText || error) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        id: errorId || helperId,
        style: helperStyle
    }, error || helperText));
});
LiquidInput.displayName = 'LiquidInput';

try {
    // @ts-ignore
    LiquidInput.displayName = "LiquidInput";
    // @ts-ignore
    LiquidInput.__docgenInfo = { "description": "LiquidInput - Glass form input component\n\nA beautiful input field with liquid glass effects, perfect for forms and data entry.\nIncludes labels, error states, helper text, and icons.", "displayName": "LiquidInput", "props": { "label": { "defaultValue": null, "description": "", "name": "label", "required": false, "type": { "name": "string" } }, "error": { "defaultValue": null, "description": "", "name": "error", "required": false, "type": { "name": "string" } }, "helperText": { "defaultValue": null, "description": "", "name": "helperText", "required": false, "type": { "name": "string" } }, "leftIcon": { "defaultValue": null, "description": "", "name": "leftIcon", "required": false, "type": { "name": "ReactNode" } }, "rightIcon": { "defaultValue": null, "description": "", "name": "rightIcon", "required": false, "type": { "name": "ReactNode" } }, "fullWidth": { "defaultValue": { value: "false" }, "description": "", "name": "fullWidth", "required": false, "type": { "name": "boolean" } }, "variant": { "defaultValue": { value: "frosted" }, "description": "", "name": "variant", "required": false, "type": { "name": "enum", "value": [{ "value": "\"clear\"" }, { "value": "\"frosted\"" }, { "value": "\"tinted\"" }, { "value": "\"dark\"" }, { "value": "\"aurora\"" }, { "value": "\"solid\"" }] } }, "intensity": { "defaultValue": { value: "subtle" }, "description": "", "name": "intensity", "required": false, "type": { "name": "enum", "value": [{ "value": "\"subtle\"" }, { "value": "\"regular\"" }, { "value": "\"strong\"" }, { "value": "\"none\"" }] } }, "opacity": { "defaultValue": { value: "regular" }, "description": "", "name": "opacity", "required": false, "type": { "name": "enum", "value": [{ "value": "\"regular\"" }, { "value": "\"strong\"" }, { "value": "\"light\"" }, { "value": "\"medium\"" }] } }, "interactive": { "defaultValue": { value: "true" }, "description": "", "name": "interactive", "required": false, "type": { "name": "boolean" } }, "adaptiveOpacity": { "defaultValue": { value: "false" }, "description": "", "name": "adaptiveOpacity", "required": false, "type": { "name": "boolean" } }, "environmentBlending": { "defaultValue": { value: "false" }, "description": "", "name": "environmentBlending", "required": false, "type": { "name": "boolean" } }, "className": { "defaultValue": null, "description": "", "name": "className", "required": false, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidInput.tsx#LiquidInput"] = { docgenInfo: LiquidInput.__docgenInfo, name: "LiquidInput", path: "../../packages/react/src/components/LiquidInput.tsx#LiquidInput" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=components-LiquidInput-stories.d38ee24917b4473442d4.hot-update.js.map