{"version":3,"file":"LiquidCard-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAMA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChOA;AACA;AAUA;;;;;AAKA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidModal.tsx","webpack://@liquid-ui/storybook/../../packages/react/src/hooks/useAdaptiveGlass.ts","webpack://@liquid-ui/storybook/../../packages/react/src/index.ts","webpack://@liquid-ui/storybook/./src/stories/LiquidCard.stories.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport type { LiquidModalProps } from '../types'\n\n/**\n * LiquidModal - Glass modal and overlay component\n * \n * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.\n * Includes backdrop blur, keyboard navigation, and accessibility features.\n */\nexport const LiquidModal: React.FC<LiquidModalProps> = ({\n  open,\n  onClose,\n  title,\n  showCloseButton = true,\n  closeOnBackdropClick = true,\n  closeOnEscape = true,\n  size = 'md',\n  centered = true,\n  variant = 'frosted',\n  intensity = 'strong',\n  opacity = 'regular',\n  interactive = false,\n  adaptiveOpacity = false,\n  environmentBlending = true,\n  className,\n  children\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null)\n  const backdropRef = useRef<HTMLDivElement>(null)\n  \n  // Generate glass styles for the modal content\n  const glassStyles = useLiquidGlass({\n    variant,\n    intensity,\n    opacity,\n    interactive,\n    adaptiveOpacity,\n    environmentBlending\n  })\n  \n  // Generate backdrop glass styles\n  const backdropGlassStyles = useLiquidGlass({\n    variant: 'dark',\n    intensity: 'regular',\n    opacity: 'light',\n    interactive: false,\n    adaptiveOpacity: false,\n    environmentBlending: true\n  })\n  \n  // Size classes\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  }\n  \n  // Handle escape key\n  useEffect(() => {\n    if (!open || !closeOnEscape) return\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose()\n      }\n    }\n    \n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [open, closeOnEscape, onClose])\n  \n  // Handle focus management\n  useEffect(() => {\n    if (!open) return\n    \n    const previousActiveElement = document.activeElement as HTMLElement\n    \n    // Focus the modal when opened\n    if (modalRef.current) {\n      modalRef.current.focus()\n    }\n    \n    // Restore focus when closed\n    return () => {\n      if (previousActiveElement && previousActiveElement.focus) {\n        previousActiveElement.focus()\n      }\n    }\n  }, [open])\n  \n  // Handle body scroll lock\n  useEffect(() => {\n    if (!open) return\n    \n    const originalStyle = window.getComputedStyle(document.body).overflow\n    document.body.style.overflow = 'hidden'\n    \n    return () => {\n      document.body.style.overflow = originalStyle\n    }\n  }, [open])\n  \n  // Handle backdrop click\n  const handleBackdropClick = useCallback((e: React.MouseEvent) => {\n    if (closeOnBackdropClick && e.target === backdropRef.current) {\n      onClose()\n    }\n  }, [closeOnBackdropClick, onClose])\n  \n  // Handle close button click\n  const handleCloseClick = useCallback(() => {\n    onClose()\n  }, [onClose])\n  \n  if (!open) return null\n  \n  const modalContent = (\n    <div\n      ref={backdropRef}\n      className={clsx(\n        'liquid-modal-backdrop',\n        'fixed',\n        'inset-0',\n        'z-50',\n        'flex',\n        'items-center',\n        'justify-center',\n        'p-4',\n        'min-h-screen',\n        centered ? 'items-center' : 'items-start pt-16'\n      )}\n      style={backdropGlassStyles}\n      onClick={handleBackdropClick}\n    >\n      <div\n        ref={modalRef}\n        className={clsx(\n          'liquid-modal',\n          'relative',\n          'w-full',\n          sizeClasses[size],\n          'max-h-[90vh]',\n          'overflow-hidden',\n          'rounded-xl',\n          'border',\n          'border-white/10',\n          'shadow-2xl',\n          'transform',\n          'transition-all',\n          'duration-300',\n          'ease-out',\n          'animate-in',\n          'fade-in-0',\n          'zoom-in-95',\n          className\n        )}\n        style={glassStyles}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? 'modal-title' : undefined}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"liquid-modal-header flex items-center justify-between p-6 border-b border-white/10\">\n            {title && (\n              <h2 id=\"modal-title\" className=\"text-lg font-semibold text-white\">\n                {title}\n              </h2>\n            )}\n            \n            {showCloseButton && (\n              <button\n                type=\"button\"\n                className={clsx(\n                  'flex',\n                  'items-center',\n                  'justify-center',\n                  'w-8',\n                  'h-8',\n                  'rounded-full',\n                  'text-gray-400',\n                  'hover:text-white',\n                  'hover:bg-white/10',\n                  'transition-colors',\n                  'duration-200'\n                )}\n                onClick={handleCloseClick}\n                aria-label=\"Close modal\"\n              >\n                <svg\n                  className=\"w-4 h-4\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className=\"liquid-modal-content overflow-y-auto max-h-full\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n  \n  // Render modal in a portal\n  return createPortal(modalContent, document.body)\n}\n\nLiquidModal.displayName = 'LiquidModal'","import { useState, useEffect, useCallback, type RefObject } from 'react'\nimport { LiquidGlassEngine, calculateLuminance, parseColor, debounce } from '@liquid-ui/core'\nimport type { GlassConfig } from '@liquid-ui/core'\n\ninterface UseAdaptiveGlassProps {\n  elementRef: RefObject<HTMLElement>\n  config: GlassConfig\n  enabled?: boolean\n  debounceMs?: number\n}\n\n/**\n * useAdaptiveGlass - Hook for adaptive glass effects based on background\n * \n * This hook analyzes the background behind the glass element and adjusts\n * opacity and tint automatically for optimal visual contrast and readability.\n */\nexport function useAdaptiveGlass({\n  elementRef,\n  config,\n  enabled = true,\n  debounceMs = 100\n}: UseAdaptiveGlassProps) {\n  const [adaptiveStyles, setAdaptiveStyles] = useState<Record<string, string>>({})\n  const [backgroundLuminance, setBackgroundLuminance] = useState(0.5)\n  \n  // Analyze background and calculate adaptive styles\n  const analyzeBackground = useCallback(\n    debounce(() => {\n      if (!enabled || !elementRef.current) return\n      \n      const element = elementRef.current\n      const computedStyle = window.getComputedStyle(element.parentElement || element)\n      const backgroundColor = computedStyle.backgroundColor\n      \n      // Parse background color and calculate luminance\n      const colorData = parseColor(backgroundColor)\n      if (colorData) {\n        const luminance = calculateLuminance(colorData.r, colorData.g, colorData.b)\n        setBackgroundLuminance(luminance)\n        \n        // Generate adaptive background using the engine\n        const engine = LiquidGlassEngine.getInstance()\n        const adaptiveBackground = engine.getAdaptiveBackground(config, luminance)\n        \n        setAdaptiveStyles({\n          background: adaptiveBackground,\n          // Adjust border opacity based on background\n          borderColor: luminance > 0.5 \n            ? 'rgba(0, 0, 0, 0.1)' \n            : 'rgba(255, 255, 255, 0.1)'\n        })\n      }\n    }, debounceMs),\n    [enabled, elementRef, config, debounceMs]\n  )\n  \n  // Set up intersection observer to detect background changes\n  useEffect(() => {\n    if (!enabled || !elementRef.current) return\n    \n    const element = elementRef.current\n    \n    // Initial analysis\n    analyzeBackground()\n    \n    // Create mutation observer to watch for style changes\n    const observer = new MutationObserver((mutations) => {\n      const hasStyleChanges = mutations.some(\n        mutation => \n          mutation.type === 'attributes' && \n          mutation.attributeName === 'style'\n      )\n      \n      if (hasStyleChanges) {\n        analyzeBackground()\n      }\n    })\n    \n    // Observe parent elements for style changes\n    let currentElement: HTMLElement | null = element.parentElement\n    while (currentElement) {\n      observer.observe(currentElement, {\n        attributes: true,\n        attributeFilter: ['style', 'class']\n      })\n      currentElement = currentElement.parentElement\n    }\n    \n    // Also listen for window resize (might change background)\n    window.addEventListener('resize', analyzeBackground)\n    \n    return () => {\n      observer.disconnect()\n      window.removeEventListener('resize', analyzeBackground)\n    }\n  }, [enabled, elementRef, analyzeBackground])\n  \n  // Re-analyze when config changes\n  useEffect(() => {\n    if (enabled) {\n      analyzeBackground()\n    }\n  }, [config, analyzeBackground, enabled])\n  \n  return {\n    adaptiveStyles,\n    backgroundLuminance,\n    reanalyze: analyzeBackground\n  }\n}","// Components\nexport { LiquidCard } from './components/LiquidCard'\nexport { LiquidButton } from './components/LiquidButton'\nexport { LiquidInput } from './components/LiquidInput'\nexport { LiquidModal } from './components/LiquidModal'\n\n// Hooks\nexport { useLiquidGlass } from './hooks/useLiquidGlass'\nexport { useInteractiveGlass } from './hooks/useInteractiveGlass'\nexport { useAdaptiveGlass } from './hooks/useAdaptiveGlass'\n\n// Types (re-export from core + component-specific)\nexport type {\n  GlassConfig,\n  GlassVariant,\n  BlurIntensity,\n  OpacityLevel,\n  Point,\n  Rect,\n  LiquidGlassStyles\n} from '@liquid-ui/core'\n\nexport type {\n  LiquidCardProps,\n  LiquidButtonProps,\n  LiquidInputProps,\n  LiquidModalProps\n} from './types'","import type { Meta, StoryObj } from '@storybook/react'\nimport { LiquidCard } from '@liquid-ui/react'\nimport { useState } from 'react'\n\nconst meta: Meta<typeof LiquidCard> = {\n  title: 'Components/LiquidCard',\n  component: LiquidCard,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nThe LiquidCard is a beautiful glass card component with liquid glass effects, drag & drop support, and magnetic edges inspired by the LiquidModal design patterns.\n\n## Features\n- **Drag & Drop Support**: Native drag events with glass distortion and 3D transforms\n- **Magnetic Edges**: Subtle attraction effects near cursor with visual feedback\n- **Dynamic Shadows**: Depth-aware shadows that respond to interactions\n- **Gesture Recognition**: Mouse and touch support for all interactions\n- **Auto-layout**: Smart content adaptation and overflow handling\n- **Glass Effects**: Multiple variants with customizable intensity and opacity\n        `\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['frosted', 'clear', 'tinted', 'dark'],\n      description: 'Glass effect variant'\n    },\n    intensity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'strong'],\n      description: 'Blur intensity'\n    },\n    opacity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'strong'],\n      description: 'Background opacity'\n    },\n    interactive: {\n      control: 'boolean',\n      description: 'Enable interactive glass effects'\n    },\n    adaptiveOpacity: {\n      control: 'boolean',\n      description: 'Adaptive opacity based on content'\n    },\n    environmentBlending: {\n      control: 'boolean',\n      description: 'Environment color blending'\n    },\n    hover: {\n      control: 'boolean',\n      description: 'Enable hover effects'\n    },\n    shadow: {\n      control: 'boolean',\n      description: 'Enable shadows'\n    },\n    border: {\n      control: 'boolean',\n      description: 'Enable borders'\n    },\n    draggable: {\n      control: 'boolean',\n      description: 'Enable drag and drop'\n    },\n    magneticEdges: {\n      control: 'boolean',\n      description: 'Enable magnetic edge effects'\n    },\n    magneticStrength: {\n      control: { type: 'range', min: 0, max: 1, step: 0.1 },\n      description: 'Magnetic effect strength'\n    }\n  },\n  tags: ['autodocs']\n}\n\nexport default meta\ntype Story = StoryObj<typeof meta>\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    children: (\n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold text-white mb-2\">Default Card</h3>\n        <p className=\"text-gray-300\">A beautiful glass card with default settings.</p>\n      </div>\n    ),\n    variant: 'frosted',\n    intensity: 'regular',\n    opacity: 'regular',\n    interactive: true,\n    hover: true,\n    shadow: true,\n    border: true\n  }\n}\n\nexport const WithDragAndDrop: Story = {\n  args: {\n    children: (\n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold text-white mb-2\">Draggable Card</h3>\n        <p className=\"text-gray-300 mb-4\">Click and drag me around! Notice the 3D effects and shadows.</p>\n        <div className=\"text-sm text-blue-200\">\n          ✨ Drag indicator appears on hover\n        </div>\n      </div>\n    ),\n    variant: 'frosted',\n    intensity: 'regular',\n    interactive: true,\n    hover: true,\n    shadow: true,\n    border: true,\n    draggable: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Drag this card around to see the beautiful 3D transforms, enhanced shadows, and glass distortion effects.'\n      }\n    }\n  }\n}\n\n// Glass Variants\nexport const GlassVariants: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-2 gap-6\">\n      <LiquidCard variant=\"frosted\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Frosted</h4>\n        <p className=\"text-gray-300 text-sm\">Classic frosted glass effect</p>\n      </LiquidCard>\n      <LiquidCard variant=\"clear\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Clear</h4>\n        <p className=\"text-gray-300 text-sm\">Ultra-minimal transparency</p>\n      </LiquidCard>\n      <LiquidCard variant=\"tinted\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Tinted</h4>\n        <p className=\"text-gray-300 text-sm\">Subtle color tinting</p>\n      </LiquidCard>\n      <LiquidCard variant=\"dark\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Dark</h4>\n        <p className=\"text-gray-300 text-sm\">Dark glass variant</p>\n      </LiquidCard>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different glass effect variants, each with enhanced hover and depth effects.'\n      }\n    }\n  }\n}\n\n// Magnetic Effects\nexport const MagneticEffects: Story = {\n  render: () => {\n    const [magneticStrength, setMagneticStrength] = useState(0.3)\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n            Magnetic Strength: {magneticStrength}\n          </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.1\"\n            value={magneticStrength}\n            onChange={(e) => setMagneticStrength(parseFloat(e.target.value))}\n            className=\"w-48\"\n          />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <LiquidCard \n            variant=\"frosted\" \n            magneticEdges \n            magneticStrength={magneticStrength}\n            className=\"p-6\"\n          >\n            <h4 className=\"text-lg font-semibold text-white mb-2\">Magnetic Card</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Hover near me and feel the magnetic attraction! The closer you get, the stronger the pull.\n            </p>\n          </LiquidCard>\n          \n          <LiquidCard \n            variant=\"tinted\" \n            magneticEdges \n            magneticStrength={magneticStrength}\n            draggable\n            className=\"p-6\"\n          >\n            <h4 className=\"text-lg font-semibold text-white mb-2\">Magnetic + Draggable</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Combines magnetic effects with drag functionality for ultimate interactivity.\n            </p>\n          </LiquidCard>\n        </div>\n      </div>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Magnetic edge effects that respond to cursor proximity with visual feedback and color shifts.'\n      }\n    }\n  }\n}\n\n// Interactive Playground\nexport const InteractivePlayground: Story = {\n  render: () => {\n    const [dragEvents, setDragEvents] = useState<string[]>([])\n    const [hoverCount, setHoverCount] = useState(0)\n    \n    const addEvent = (event: string) => {\n      setDragEvents(prev => [...prev.slice(-4), `${new Date().toLocaleTimeString()}: ${event}`])\n    }\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <LiquidCard\n            variant=\"frosted\"\n            draggable\n            magneticEdges\n            magneticStrength={0.5}\n            className=\"p-6 min-h-[200px]\"\n            onDragStart={() => addEvent('Drag started')}\n            onDrag={(_, pos) => addEvent(`Dragging (${Math.round(pos.x)}, ${Math.round(pos.y)})`)}\n            onDragEnd={() => addEvent('Drag ended')}\n            onHover={(hovered) => {\n              if (hovered) setHoverCount(c => c + 1)\n              addEvent(hovered ? 'Hover enter' : 'Hover leave')\n            }}\n          >\n            <h4 className=\"text-lg font-semibold text-white mb-2\">\n              Interactive Playground\n            </h4>\n            <p className=\"text-gray-300 text-sm mb-4\">\n              Drag me around and watch the event log!\n            </p>\n            <div className=\"text-xs text-blue-200\">\n              Hovers: {hoverCount}\n            </div>\n          </LiquidCard>\n          \n          <div className=\"space-y-4\">\n            <h5 className=\"text-lg font-semibold text-white\">Event Log</h5>\n            <div className=\"bg-black/30 rounded-lg p-4 font-mono text-xs\">\n              {dragEvents.length === 0 ? (\n                <div className=\"text-gray-500\">No events yet...</div>\n              ) : (\n                dragEvents.map((event, i) => (\n                  <div key={i} className=\"text-gray-300\">{event}</div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive playground showing all drag and hover events with real-time feedback.'\n      }\n    }\n  }\n}\n\n// Shadow Depth Showcase\nexport const ShadowDepth: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n      <LiquidCard variant=\"frosted\" shadow={false} className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">No Shadow</h4>\n        <p className=\"text-gray-300 text-sm\">Clean, flat appearance</p>\n      </LiquidCard>\n      \n      <LiquidCard variant=\"frosted\" shadow hover className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Hover Shadow</h4>\n        <p className=\"text-gray-300 text-sm\">Dynamic shadow on hover</p>\n      </LiquidCard>\n      \n      <LiquidCard variant=\"frosted\" shadow draggable className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Drag Shadow</h4>\n        <p className=\"text-gray-300 text-sm\">Enhanced shadow when dragging</p>\n      </LiquidCard>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Showcase of dynamic shadow depths that respond to different interaction states.'\n      }\n    }\n  }\n}\n\n// Preset Components\nexport const PresetComponents: Story = {\n  render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Style Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <LiquidCard.Frosted className=\"p-4\">\n            <h4 className=\"font-semibold text-white\">Frosted Preset</h4>\n            <p className=\"text-gray-300 text-sm\">Pre-configured frosted glass</p>\n          </LiquidCard.Frosted>\n          \n          <LiquidCard.Clear className=\"p-4\">\n            <h4 className=\"font-semibold text-white\">Clear Preset</h4>\n            <p className=\"text-gray-300 text-sm\">Ultra-minimal transparency</p>\n          </LiquidCard.Clear>\n          \n          <LiquidCard.Tinted className=\"p-4\">\n            <h4 className=\"font-semibold text-white\">Tinted Preset</h4>\n            <p className=\"text-gray-300 text-sm\">Subtle color tinting</p>\n          </LiquidCard.Tinted>\n        </div>\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Behavior Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LiquidCard.Interactive className=\"p-6\">\n            <h4 className=\"font-semibold text-white mb-2\">Interactive Preset</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Full interactivity with hover, shadow, and border effects\n            </p>\n          </LiquidCard.Interactive>\n          \n          <LiquidCard.Static className=\"p-6\">\n            <h4 className=\"font-semibold text-white mb-2\">Static Preset</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Pure display card without interactive effects\n            </p>\n          </LiquidCard.Static>\n        </div>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Pre-configured card components with optimized settings for common use cases.'\n      }\n    }\n  }\n}\n\n// Content Showcase\nexport const ContentShowcase: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <LiquidCard.Frosted className=\"p-6 space-y-4\" draggable>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white\">Performance</h4>\n            <p className=\"text-sm text-gray-400\">60fps smooth</p>\n          </div>\n        </div>\n        <p className=\"text-gray-300 text-sm\">\n          Optimized rendering with hardware acceleration and efficient updates.\n        </p>\n      </LiquidCard.Frosted>\n      \n      <LiquidCard.Clear className=\"p-6 space-y-4\" magneticEdges>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white\">Accessible</h4>\n            <p className=\"text-sm text-gray-400\">WCAG compliant</p>\n          </div>\n        </div>\n        <p className=\"text-gray-300 text-sm\">\n          Built with accessibility in mind, supporting keyboard navigation and screen readers.\n        </p>\n      </LiquidCard.Clear>\n      \n      <LiquidCard.Tinted className=\"p-6 space-y-4\" draggable magneticEdges>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z\" />\n            </svg>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white\">Responsive</h4>\n            <p className=\"text-sm text-gray-400\">Mobile ready</p>\n          </div>\n        </div>\n        <p className=\"text-gray-300 text-sm\">\n          Touch-friendly with gesture support and responsive design principles.\n        </p>\n      </LiquidCard.Tinted>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real-world content examples showcasing different features and combinations.'\n      }\n    }\n  }\n}\n\n// Advanced Customization\nexport const AdvancedCustomization: Story = {\n  args: {\n    children: (\n      <div className=\"p-8 space-y-4\">\n        <h3 className=\"text-2xl font-bold text-white\">Advanced Card</h3>\n        <p className=\"text-gray-300\">\n          This card combines all advanced features: drag & drop, magnetic edges, \n          environment blending, and adaptive opacity.\n        </p>\n        <div className=\"flex flex-wrap gap-2\">\n          {['Draggable', 'Magnetic', 'Adaptive', 'Blended'].map((tag) => (\n            <span key={tag} className=\"px-2 py-1 bg-white/10 rounded text-xs text-gray-300\">\n              {tag}\n            </span>\n          ))}\n        </div>\n      </div>\n    ),\n    variant: 'frosted',\n    intensity: 'strong',\n    opacity: 'light',\n    interactive: true,\n    adaptiveOpacity: true,\n    environmentBlending: true,\n    hover: true,\n    shadow: true,\n    border: true,\n    draggable: true,\n    magneticEdges: true,\n    magneticStrength: 0.6,\n    className: 'border-2 border-blue-500/30 shadow-2xl shadow-blue-500/20'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Advanced customization combining all features with custom styling and maximum interactivity.'\n      }\n    }\n  }\n}"],"names":[],"sourceRoot":""}