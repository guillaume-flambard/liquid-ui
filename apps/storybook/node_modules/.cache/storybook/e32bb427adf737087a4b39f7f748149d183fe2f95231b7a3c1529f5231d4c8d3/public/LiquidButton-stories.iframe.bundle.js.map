{"version":3,"file":"LiquidButton-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAMA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChOA;AACA;AAUA;;;;;AAKA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidModal.tsx","webpack://@liquid-ui/storybook/../../packages/react/src/hooks/useAdaptiveGlass.ts","webpack://@liquid-ui/storybook/../../packages/react/src/index.ts","webpack://@liquid-ui/storybook/./src/stories/LiquidButton.stories.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport type { LiquidModalProps } from '../types'\n\n/**\n * LiquidModal - Glass modal and overlay component\n * \n * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.\n * Includes backdrop blur, keyboard navigation, and accessibility features.\n */\nexport const LiquidModal: React.FC<LiquidModalProps> = ({\n  open,\n  onClose,\n  title,\n  showCloseButton = true,\n  closeOnBackdropClick = true,\n  closeOnEscape = true,\n  size = 'md',\n  centered = true,\n  variant = 'frosted',\n  intensity = 'strong',\n  opacity = 'regular',\n  interactive = false,\n  adaptiveOpacity = false,\n  environmentBlending = true,\n  className,\n  children\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null)\n  const backdropRef = useRef<HTMLDivElement>(null)\n  \n  // Generate glass styles for the modal content\n  const glassStyles = useLiquidGlass({\n    variant,\n    intensity,\n    opacity,\n    interactive,\n    adaptiveOpacity,\n    environmentBlending\n  })\n  \n  // Generate backdrop glass styles\n  const backdropGlassStyles = useLiquidGlass({\n    variant: 'dark',\n    intensity: 'regular',\n    opacity: 'light',\n    interactive: false,\n    adaptiveOpacity: false,\n    environmentBlending: true\n  })\n  \n  // Size classes\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  }\n  \n  // Handle escape key\n  useEffect(() => {\n    if (!open || !closeOnEscape) return\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose()\n      }\n    }\n    \n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [open, closeOnEscape, onClose])\n  \n  // Handle focus management\n  useEffect(() => {\n    if (!open) return\n    \n    const previousActiveElement = document.activeElement as HTMLElement\n    \n    // Focus the modal when opened\n    if (modalRef.current) {\n      modalRef.current.focus()\n    }\n    \n    // Restore focus when closed\n    return () => {\n      if (previousActiveElement && previousActiveElement.focus) {\n        previousActiveElement.focus()\n      }\n    }\n  }, [open])\n  \n  // Handle body scroll lock\n  useEffect(() => {\n    if (!open) return\n    \n    const originalStyle = window.getComputedStyle(document.body).overflow\n    document.body.style.overflow = 'hidden'\n    \n    return () => {\n      document.body.style.overflow = originalStyle\n    }\n  }, [open])\n  \n  // Handle backdrop click\n  const handleBackdropClick = useCallback((e: React.MouseEvent) => {\n    if (closeOnBackdropClick && e.target === backdropRef.current) {\n      onClose()\n    }\n  }, [closeOnBackdropClick, onClose])\n  \n  // Handle close button click\n  const handleCloseClick = useCallback(() => {\n    onClose()\n  }, [onClose])\n  \n  if (!open) return null\n  \n  const modalContent = (\n    <div\n      ref={backdropRef}\n      className={clsx(\n        'liquid-modal-backdrop',\n        'fixed',\n        'inset-0',\n        'z-50',\n        'flex',\n        'items-center',\n        'justify-center',\n        'p-4',\n        'min-h-screen',\n        centered ? 'items-center' : 'items-start pt-16'\n      )}\n      style={backdropGlassStyles}\n      onClick={handleBackdropClick}\n    >\n      <div\n        ref={modalRef}\n        className={clsx(\n          'liquid-modal',\n          'relative',\n          'w-full',\n          sizeClasses[size],\n          'max-h-[90vh]',\n          'overflow-hidden',\n          'rounded-xl',\n          'border',\n          'border-white/10',\n          'shadow-2xl',\n          'transform',\n          'transition-all',\n          'duration-300',\n          'ease-out',\n          'animate-in',\n          'fade-in-0',\n          'zoom-in-95',\n          className\n        )}\n        style={glassStyles}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? 'modal-title' : undefined}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"liquid-modal-header flex items-center justify-between p-6 border-b border-white/10\">\n            {title && (\n              <h2 id=\"modal-title\" className=\"text-lg font-semibold text-white\">\n                {title}\n              </h2>\n            )}\n            \n            {showCloseButton && (\n              <button\n                type=\"button\"\n                className={clsx(\n                  'flex',\n                  'items-center',\n                  'justify-center',\n                  'w-8',\n                  'h-8',\n                  'rounded-full',\n                  'text-gray-400',\n                  'hover:text-white',\n                  'hover:bg-white/10',\n                  'transition-colors',\n                  'duration-200'\n                )}\n                onClick={handleCloseClick}\n                aria-label=\"Close modal\"\n              >\n                <svg\n                  className=\"w-4 h-4\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className=\"liquid-modal-content overflow-y-auto max-h-full\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n  \n  // Render modal in a portal\n  return createPortal(modalContent, document.body)\n}\n\nLiquidModal.displayName = 'LiquidModal'","import { useState, useEffect, useCallback, type RefObject } from 'react'\nimport { LiquidGlassEngine, calculateLuminance, parseColor, debounce } from '@liquid-ui/core'\nimport type { GlassConfig } from '@liquid-ui/core'\n\ninterface UseAdaptiveGlassProps {\n  elementRef: RefObject<HTMLElement>\n  config: GlassConfig\n  enabled?: boolean\n  debounceMs?: number\n}\n\n/**\n * useAdaptiveGlass - Hook for adaptive glass effects based on background\n * \n * This hook analyzes the background behind the glass element and adjusts\n * opacity and tint automatically for optimal visual contrast and readability.\n */\nexport function useAdaptiveGlass({\n  elementRef,\n  config,\n  enabled = true,\n  debounceMs = 100\n}: UseAdaptiveGlassProps) {\n  const [adaptiveStyles, setAdaptiveStyles] = useState<Record<string, string>>({})\n  const [backgroundLuminance, setBackgroundLuminance] = useState(0.5)\n  \n  // Analyze background and calculate adaptive styles\n  const analyzeBackground = useCallback(\n    debounce(() => {\n      if (!enabled || !elementRef.current) return\n      \n      const element = elementRef.current\n      const computedStyle = window.getComputedStyle(element.parentElement || element)\n      const backgroundColor = computedStyle.backgroundColor\n      \n      // Parse background color and calculate luminance\n      const colorData = parseColor(backgroundColor)\n      if (colorData) {\n        const luminance = calculateLuminance(colorData.r, colorData.g, colorData.b)\n        setBackgroundLuminance(luminance)\n        \n        // Generate adaptive background using the engine\n        const engine = LiquidGlassEngine.getInstance()\n        const adaptiveBackground = engine.getAdaptiveBackground(config, luminance)\n        \n        setAdaptiveStyles({\n          background: adaptiveBackground,\n          // Adjust border opacity based on background\n          borderColor: luminance > 0.5 \n            ? 'rgba(0, 0, 0, 0.1)' \n            : 'rgba(255, 255, 255, 0.1)'\n        })\n      }\n    }, debounceMs),\n    [enabled, elementRef, config, debounceMs]\n  )\n  \n  // Set up intersection observer to detect background changes\n  useEffect(() => {\n    if (!enabled || !elementRef.current) return\n    \n    const element = elementRef.current\n    \n    // Initial analysis\n    analyzeBackground()\n    \n    // Create mutation observer to watch for style changes\n    const observer = new MutationObserver((mutations) => {\n      const hasStyleChanges = mutations.some(\n        mutation => \n          mutation.type === 'attributes' && \n          mutation.attributeName === 'style'\n      )\n      \n      if (hasStyleChanges) {\n        analyzeBackground()\n      }\n    })\n    \n    // Observe parent elements for style changes\n    let currentElement: HTMLElement | null = element.parentElement\n    while (currentElement) {\n      observer.observe(currentElement, {\n        attributes: true,\n        attributeFilter: ['style', 'class']\n      })\n      currentElement = currentElement.parentElement\n    }\n    \n    // Also listen for window resize (might change background)\n    window.addEventListener('resize', analyzeBackground)\n    \n    return () => {\n      observer.disconnect()\n      window.removeEventListener('resize', analyzeBackground)\n    }\n  }, [enabled, elementRef, analyzeBackground])\n  \n  // Re-analyze when config changes\n  useEffect(() => {\n    if (enabled) {\n      analyzeBackground()\n    }\n  }, [config, analyzeBackground, enabled])\n  \n  return {\n    adaptiveStyles,\n    backgroundLuminance,\n    reanalyze: analyzeBackground\n  }\n}","// Components\nexport { LiquidCard } from './components/LiquidCard'\nexport { LiquidButton } from './components/LiquidButton'\nexport { LiquidInput } from './components/LiquidInput'\nexport { LiquidModal } from './components/LiquidModal'\n\n// Hooks\nexport { useLiquidGlass } from './hooks/useLiquidGlass'\nexport { useInteractiveGlass } from './hooks/useInteractiveGlass'\nexport { useAdaptiveGlass } from './hooks/useAdaptiveGlass'\n\n// Types (re-export from core + component-specific)\nexport type {\n  GlassConfig,\n  GlassVariant,\n  BlurIntensity,\n  OpacityLevel,\n  Point,\n  Rect,\n  LiquidGlassStyles\n} from '@liquid-ui/core'\n\nexport type {\n  LiquidCardProps,\n  LiquidButtonProps,\n  LiquidInputProps,\n  LiquidModalProps\n} from './types'","import type { Meta, StoryObj } from '@storybook/react'\nimport { LiquidButton } from '@liquid-ui/react'\nimport { useState } from 'react'\n\nconst meta: Meta<typeof LiquidButton> = {\n  title: 'Components/LiquidButton',\n  component: LiquidButton,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nThe LiquidButton is an interactive glass button component with beautiful liquid glass effects, ripple animations, and advanced interactions inspired by the LiquidModal design patterns.\n\n## Features\n- **Ripple Effects**: Interactive ripple animations on click and keyboard activation\n- **Advanced Loading States**: Enhanced spinner with glass morphing\n- **Micro-interactions**: Subtle scale/blur transitions on press and hover\n- **Accessibility**: ARIA states, keyboard navigation, and focus management\n- **Glass Effects**: Multiple variants with customizable intensity and opacity\n        `\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['frosted', 'clear', 'tinted', 'dark'],\n      description: 'Glass effect variant'\n    },\n    intensity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'strong'],\n      description: 'Blur intensity'\n    },\n    opacity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'strong'],\n      description: 'Background opacity'\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n      description: 'Button size'\n    },\n    interactive: {\n      control: 'boolean',\n      description: 'Enable interactive glass effects'\n    },\n    adaptiveOpacity: {\n      control: 'boolean',\n      description: 'Adaptive opacity based on content'\n    },\n    environmentBlending: {\n      control: 'boolean',\n      description: 'Environment color blending'\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Full width button'\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Loading state'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disabled state'\n    }\n  },\n  tags: ['autodocs']\n}\n\nexport default meta\ntype Story = StoryObj<typeof meta>\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    children: 'Default Button',\n    variant: 'frosted',\n    intensity: 'regular',\n    opacity: 'regular',\n    interactive: true,\n    size: 'md'\n  }\n}\n\nexport const WithRippleEffects: Story = {\n  args: {\n    children: 'Click me for ripples!',\n    variant: 'frosted',\n    intensity: 'regular',\n    interactive: true,\n    size: 'md'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Click or use keyboard (Enter/Space) to see the ripple effects in action.'\n      }\n    }\n  }\n}\n\n// Size Variants\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"flex items-center gap-4\">\n      <LiquidButton size=\"sm\">Small</LiquidButton>\n      <LiquidButton size=\"md\">Medium</LiquidButton>\n      <LiquidButton size=\"lg\">Large</LiquidButton>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different button sizes with consistent ripple and hover effects.'\n      }\n    }\n  }\n}\n\n// Glass Variants\nexport const GlassVariants: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex gap-4\">\n        <LiquidButton variant=\"frosted\">Frosted</LiquidButton>\n        <LiquidButton variant=\"clear\">Clear</LiquidButton>\n        <LiquidButton variant=\"tinted\">Tinted</LiquidButton>\n        <LiquidButton variant=\"dark\">Dark</LiquidButton>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different glass effect variants, each with enhanced hover and focus states.'\n      }\n    }\n  }\n}\n\n// Interactive States\nexport const InteractiveStates: Story = {\n  render: () => {\n    const [clickCount, setClickCount] = useState(0)\n    \n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex gap-4\">\n          <LiquidButton \n            onClick={() => setClickCount(c => c + 1)}\n            variant=\"frosted\"\n          >\n            Clicked {clickCount} times\n          </LiquidButton>\n          <LiquidButton loading variant=\"clear\">\n            Loading...\n          </LiquidButton>\n          <LiquidButton disabled variant=\"tinted\">\n            Disabled\n          </LiquidButton>\n        </div>\n      </div>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive states showing ripple effects, loading spinner, and disabled state.'\n      }\n    }\n  }\n}\n\n// With Icons\nexport const WithIcons: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex gap-4\">\n        <LiquidButton \n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n            </svg>\n          }\n          variant=\"frosted\"\n        >\n          Add Item\n        </LiquidButton>\n        <LiquidButton \n          rightIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          }\n          variant=\"clear\"\n        >\n          Continue\n        </LiquidButton>\n        <LiquidButton \n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n            </svg>\n          }\n          rightIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          }\n          variant=\"tinted\"\n        >\n          Save Favorite\n        </LiquidButton>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Buttons with left and right icons, maintaining ripple effects and glass aesthetics.'\n      }\n    }\n  }\n}\n\n// Loading States\nexport const LoadingStates: Story = {\n  render: () => {\n    const [loadingStates, setLoadingStates] = useState({\n      button1: false,\n      button2: false,\n      button3: false\n    })\n    \n    const handleClick = (button: keyof typeof loadingStates) => {\n      setLoadingStates(prev => ({ ...prev, [button]: true }))\n      setTimeout(() => {\n        setLoadingStates(prev => ({ ...prev, [button]: false }))\n      }, 2000)\n    }\n    \n    return (\n      <div className=\"flex gap-4\">\n        <LiquidButton \n          loading={loadingStates.button1}\n          onClick={() => handleClick('button1')}\n          variant=\"frosted\"\n        >\n          {loadingStates.button1 ? 'Processing...' : 'Process'}\n        </LiquidButton>\n        <LiquidButton \n          loading={loadingStates.button2}\n          onClick={() => handleClick('button2')}\n          variant=\"clear\"\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n            </svg>\n          }\n        >\n          {loadingStates.button2 ? 'Downloading...' : 'Download'}\n        </LiquidButton>\n        <LiquidButton \n          loading={loadingStates.button3}\n          onClick={() => handleClick('button3')}\n          variant=\"tinted\"\n          size=\"lg\"\n        >\n          {loadingStates.button3 ? 'Uploading...' : 'Upload File'}\n        </LiquidButton>\n      </div>\n    )\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive loading states with glass spinner effects. Click to trigger loading.'\n      }\n    }\n  }\n}\n\n// Focus and Accessibility\nexport const FocusAndAccessibility: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <p className=\"text-sm text-gray-600 mb-2\">\n        Use Tab to navigate, Enter or Space to activate. Notice the enhanced focus indicators.\n      </p>\n      <div className=\"flex gap-4\">\n        <LiquidButton variant=\"frosted\">First Button</LiquidButton>\n        <LiquidButton variant=\"clear\">Second Button</LiquidButton>\n        <LiquidButton variant=\"tinted\">Third Button</LiquidButton>\n        <LiquidButton variant=\"dark\">Fourth Button</LiquidButton>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates keyboard navigation, focus management, and accessibility features with enhanced visual feedback.'\n      }\n    }\n  }\n}\n\n// Preset Components\nexport const PresetComponents: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-3\">Style Presets</h3>\n        <div className=\"flex gap-4\">\n          <LiquidButton.Primary>Primary Action</LiquidButton.Primary>\n          <LiquidButton.Secondary>Secondary Action</LiquidButton.Secondary>\n          <LiquidButton.Tinted>Tinted Action</LiquidButton.Tinted>\n        </div>\n      </div>\n      <div>\n        <h3 className=\"text-lg font-semibold mb-3\">Size Presets</h3>\n        <div className=\"flex gap-4 items-center\">\n          <LiquidButton.Small>Small Button</LiquidButton.Small>\n          <LiquidButton.Large>Large Button</LiquidButton.Large>\n        </div>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Pre-configured button components with optimized settings for common use cases.'\n      }\n    }\n  }\n}\n\n// Full Width\nexport const FullWidth: Story = {\n  render: () => (\n    <div className=\"w-96 space-y-4\">\n      <LiquidButton fullWidth variant=\"frosted\">\n        Full Width Frosted\n      </LiquidButton>\n      <LiquidButton fullWidth variant=\"clear\" size=\"lg\">\n        Full Width Large\n      </LiquidButton>\n      <LiquidButton \n        fullWidth \n        variant=\"tinted\" \n        loading\n        leftIcon={\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12\" />\n          </svg>\n        }\n      >\n        Processing Upload...\n      </LiquidButton>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Full-width buttons with consistent ripple effects and glass styling.'\n      }\n    }\n  }\n}\n\n// Advanced Customization\nexport const AdvancedCustomization: Story = {\n  args: {\n    children: 'Custom Button',\n    variant: 'frosted',\n    intensity: 'strong',\n    opacity: 'light',\n    interactive: true,\n    adaptiveOpacity: true,\n    environmentBlending: true,\n    size: 'lg',\n    className: 'border-2 border-blue-500/30 shadow-2xl shadow-blue-500/20'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Advanced customization with environment blending, adaptive opacity, and custom styling while maintaining ripple effects.'\n      }\n    }\n  }\n}"],"names":[],"sourceRoot":""}