"use strict";
(self["webpackChunk_liquid_ui_storybook"] = self["webpackChunk_liquid_ui_storybook"] || []).push([["components-LiquidModal-stories"],{

/***/ "../../packages/react/src/components/LiquidModal.stories.tsx":
/*!*******************************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.stories.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Centered: () => (/* binding */ Centered),
/* harmony export */   ComplexContent: () => (/* binding */ ComplexContent),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   PreventBackdropClose: () => (/* binding */ PreventBackdropClose),
/* harmony export */   Sizes: () => (/* binding */ Sizes),
/* harmony export */   Variants: () => (/* binding */ Variants),
/* harmony export */   WithoutCloseButton: () => (/* binding */ WithoutCloseButton),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _LiquidModal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LiquidModal */ "../../packages/react/src/components/LiquidModal.tsx");
/* harmony import */ var _LiquidButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LiquidButton */ "../../packages/react/src/components/LiquidButton.tsx");



const meta = {
  title: 'Components/LiquidModal',
  component: _LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal,
  parameters: {
    layout: 'centered',
    backgrounds: {
      default: 'gradient',
      values: [{
        name: 'gradient',
        value: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
      }, {
        name: 'dark',
        value: '#1a1a1a'
      }, {
        name: 'light',
        value: '#f5f5f5'
      }]
    }
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: {
        type: 'select'
      },
      options: ['frosted', 'clear', 'aurora', 'solid']
    },
    intensity: {
      control: {
        type: 'select'
      },
      options: ['subtle', 'regular', 'strong']
    },
    opacity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'medium', 'strong']
    },
    size: {
      control: {
        type: 'select'
      },
      options: ['sm', 'md', 'lg', 'xl']
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const Default = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Default Modal"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This is a beautiful liquid glass modal with smooth animations and backdrop blur.")));
  }
};
const Sizes = {
  render: () => {
    const [openSize, setOpenSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const sizes = ['sm', 'md', 'lg', 'xl'];
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '1rem'
      }
    }, sizes.map(size => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      key: size,
      onClick: () => setOpenSize(size)
    }, "Open ", size.toUpperCase()))), sizes.map(size => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      key: size,
      open: openSize === size,
      onClose: () => setOpenSize(null),
      title: `${size.toUpperCase()} Modal`,
      size: size
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This is a ", size, " sized modal. Notice how the width changes based on the size prop."))));
  }
};
const WithoutCloseButton = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "No Close Button",
      showCloseButton: false
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal doesn't show a close button. Click outside or press ESC to close.")));
  }
};
const PreventBackdropClose = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Persistent Modal",
      closeOnBackdropClick: false
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal won't close when you click the backdrop. You must use the close button or ESC key.")));
  }
};
const Centered = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Centered Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Centered Modal",
      centered: true
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal is perfectly centered on the screen.")));
  }
};
const ComplexContent = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Complex Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Subscribe to Newsletter",
      size: "lg"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        marginBottom: '1.5rem'
      }
    }, "Stay updated with our latest news and updates. We promise not to spam!"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
      type: "email",
      placeholder: "Enter your email",
      style: {
        padding: '0.75rem',
        borderRadius: '8px',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        background: 'rgba(255, 255, 255, 0.1)',
        color: 'white',
        fontSize: '1rem',
        backdropFilter: 'blur(10px)'
      }
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '0.5rem',
        alignItems: 'center'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
      type: "checkbox",
      id: "terms"
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("label", {
      htmlFor: "terms",
      style: {
        fontSize: '0.9rem'
      }
    }, "I agree to the terms and conditions")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '1rem',
        marginTop: '1rem'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      fullWidth: true,
      variant: "aurora"
    }, "Subscribe"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      fullWidth: true,
      variant: "clear",
      onClick: () => setIsOpen(false)
    }, "Cancel"))))));
  }
};
const Variants = {
  render: () => {
    const [openVariant, setOpenVariant] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const variants = ['frosted', 'clear', 'aurora', 'solid'];
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '1rem',
        flexWrap: 'wrap'
      }
    }, variants.map(variant => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      key: variant,
      variant: variant,
      onClick: () => setOpenVariant(variant)
    }, variant.charAt(0).toUpperCase() + variant.slice(1), " Modal"))), variants.map(variant => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      key: variant,
      open: openVariant === variant,
      onClose: () => setOpenVariant(null),
      title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Variant`,
      variant: variant
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal uses the ", variant, " glass variant. Notice the different visual effects!"))));
  }
};
;
const __namedExportsOrder = ["Default", "Sizes", "WithoutCloseButton", "PreventBackdropClose", "Centered", "ComplexContent", "Variants"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Default Modal\">\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This is a beautiful liquid glass modal with smooth animations and backdrop blur.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
Sizes.parameters = {
  ...Sizes.parameters,
  docs: {
    ...Sizes.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [openSize, setOpenSize] = useState<string | null>(null);\n    const sizes = ['sm', 'md', 'lg', 'xl'] as const;\n    return <>\n        <div style={{\n        display: 'flex',\n        gap: '1rem'\n      }}>\n          {sizes.map(size => <LiquidButton key={size} onClick={() => setOpenSize(size)}>\n              Open {size.toUpperCase()}\n            </LiquidButton>)}\n        </div>\n        {sizes.map(size => <LiquidModal key={size} open={openSize === size} onClose={() => setOpenSize(null)} title={`${size.toUpperCase()} Modal`} size={size}>\n            <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n              This is a {size} sized modal. Notice how the width changes based on the size prop.\n            </p>\n          </LiquidModal>)}\n      </>;\n  }\n}",
      ...Sizes.parameters?.docs?.source
    }
  }
};
WithoutCloseButton.parameters = {
  ...WithoutCloseButton.parameters,
  docs: {
    ...WithoutCloseButton.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"No Close Button\" showCloseButton={false}>\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This modal doesn't show a close button. Click outside or press ESC to close.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...WithoutCloseButton.parameters?.docs?.source
    }
  }
};
PreventBackdropClose.parameters = {
  ...PreventBackdropClose.parameters,
  docs: {
    ...PreventBackdropClose.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Persistent Modal\" closeOnBackdropClick={false}>\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This modal won't close when you click the backdrop. You must use the close button or ESC key.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...PreventBackdropClose.parameters?.docs?.source
    }
  }
};
Centered.parameters = {
  ...Centered.parameters,
  docs: {
    ...Centered.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Centered Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Centered Modal\" centered>\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This modal is perfectly centered on the screen.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...Centered.parameters?.docs?.source
    }
  }
};
ComplexContent.parameters = {
  ...ComplexContent.parameters,
  docs: {
    ...ComplexContent.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Complex Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Subscribe to Newsletter\" size=\"lg\">\n          <div style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            <p style={{\n            marginBottom: '1.5rem'\n          }}>\n              Stay updated with our latest news and updates. We promise not to spam!\n            </p>\n            \n            <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '1rem'\n          }}>\n              <input type=\"email\" placeholder=\"Enter your email\" style={{\n              padding: '0.75rem',\n              borderRadius: '8px',\n              border: '1px solid rgba(255, 255, 255, 0.2)',\n              background: 'rgba(255, 255, 255, 0.1)',\n              color: 'white',\n              fontSize: '1rem',\n              backdropFilter: 'blur(10px)'\n            }} />\n              \n              <div style={{\n              display: 'flex',\n              gap: '0.5rem',\n              alignItems: 'center'\n            }}>\n                <input type=\"checkbox\" id=\"terms\" />\n                <label htmlFor=\"terms\" style={{\n                fontSize: '0.9rem'\n              }}>\n                  I agree to the terms and conditions\n                </label>\n              </div>\n              \n              <div style={{\n              display: 'flex',\n              gap: '1rem',\n              marginTop: '1rem'\n            }}>\n                <LiquidButton fullWidth variant=\"aurora\">\n                  Subscribe\n                </LiquidButton>\n                <LiquidButton fullWidth variant=\"clear\" onClick={() => setIsOpen(false)}>\n                  Cancel\n                </LiquidButton>\n              </div>\n            </div>\n          </div>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...ComplexContent.parameters?.docs?.source
    }
  }
};
Variants.parameters = {
  ...Variants.parameters,
  docs: {
    ...Variants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [openVariant, setOpenVariant] = useState<string | null>(null);\n    const variants = ['frosted', 'clear', 'aurora', 'solid'] as const;\n    return <>\n        <div style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap'\n      }}>\n          {variants.map(variant => <LiquidButton key={variant} variant={variant} onClick={() => setOpenVariant(variant)}>\n              {variant.charAt(0).toUpperCase() + variant.slice(1)} Modal\n            </LiquidButton>)}\n        </div>\n        {variants.map(variant => <LiquidModal key={variant} open={openVariant === variant} onClose={() => setOpenVariant(null)} title={`${variant.charAt(0).toUpperCase() + variant.slice(1)} Variant`} variant={variant}>\n            <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n              This modal uses the {variant} glass variant. Notice the different visual effects!\n            </p>\n          </LiquidModal>)}\n      </>;\n  }\n}",
      ...Variants.parameters?.docs?.source
    }
  }
};

/***/ }),

/***/ "../../packages/react/src/components/LiquidModal.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidModal: () => (/* binding */ LiquidModal)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ "../../node_modules/clsx/dist/clsx.mjs");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");




/**
 * LiquidModal - Glass modal and overlay component
 * 
 * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.
 * Includes backdrop blur, keyboard navigation, and accessibility features.
 */ const LiquidModal = ({ open, onClose, title, showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, size = 'md', centered = true, variant = 'frosted', intensity = 'strong', opacity = 'regular', interactive = false, adaptiveOpacity = false, environmentBlending = true, className, children })=>{
    const modalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const backdropRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Generate glass styles for the modal content
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Generate backdrop glass styles
    const backdropGlassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant: 'dark',
        intensity: 'regular',
        opacity: 'light',
        interactive: false,
        adaptiveOpacity: false,
        environmentBlending: true
    });
    // Size classes
    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl'
    };
    // Handle escape key
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open || !closeOnEscape) return;
        const handleKeyDown = (e)=>{
            if (e.key === 'Escape') {
                onClose();
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown);
    }, [
        open,
        closeOnEscape,
        onClose
    ]);
    // Handle focus management
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const previousActiveElement = document.activeElement;
        // Focus the modal when opened
        if (modalRef.current) {
            modalRef.current.focus();
        }
        // Restore focus when closed
        return ()=>{
            if (previousActiveElement && previousActiveElement.focus) {
                previousActiveElement.focus();
            }
        };
    }, [
        open
    ]);
    // Handle body scroll lock
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const originalStyle = window.getComputedStyle(document.body).overflow;
        document.body.style.overflow = 'hidden';
        return ()=>{
            document.body.style.overflow = originalStyle;
        };
    }, [
        open
    ]);
    // Handle backdrop click
    const handleBackdropClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        if (closeOnBackdropClick && e.target === backdropRef.current) {
            onClose();
        }
    }, [
        closeOnBackdropClick,
        onClose
    ]);
    // Handle close button click
    const handleCloseClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        onClose();
    }, [
        onClose
    ]);
    if (!open) return null;
    const modalContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: backdropRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal-backdrop', 'fixed', 'inset-0', 'z-50', 'flex', 'items-center', 'justify-center', 'p-4', 'min-h-screen', centered ? 'items-center' : 'items-start pt-16'),
        style: backdropGlassStyles,
        onClick: handleBackdropClick
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: modalRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal', 'relative', 'w-full', sizeClasses[size], 'max-h-[90vh]', 'overflow-hidden', 'rounded-xl', 'border', 'border-white/10', 'shadow-2xl', 'transform', 'transition-all', 'duration-300', 'ease-out', 'animate-in', 'fade-in-0', 'zoom-in-95', className),
        style: glassStyles,
        tabIndex: -1,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": title ? 'modal-title' : undefined
    }, (title || showCloseButton) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
    }, title && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("h2", {
        id: "modal-title",
        className: "text-lg font-semibold text-white"
    }, title), showCloseButton && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        type: "button",
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('flex', 'items-center', 'justify-center', 'w-8', 'h-8', 'rounded-full', 'text-gray-400', 'hover:text-white', 'hover:bg-white/10', 'transition-colors', 'duration-200'),
        onClick: handleCloseClick,
        "aria-label": "Close modal"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6 18L18 6M6 6l12 12"
    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-content overflow-y-auto max-h-full"
    }, children)));
    // Render modal in a portal
    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(modalContent, document.body);
};
LiquidModal.displayName = 'LiquidModal';

try {
    // @ts-ignore
    LiquidModal.displayName = "LiquidModal";
    // @ts-ignore
    LiquidModal.__docgenInfo = { "description": "LiquidModal - Glass modal and overlay component\n\nA beautiful modal with liquid glass effects, perfect for dialogs and overlays.\nIncludes backdrop blur, keyboard navigation, and accessibility features.", "displayName": "LiquidModal", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidModal.tsx#LiquidModal"] = { docgenInfo: LiquidModal.__docgenInfo, name: "LiquidModal", path: "../../packages/react/src/components/LiquidModal.tsx#LiquidModal" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

}]);
//# sourceMappingURL=components-LiquidModal-stories.iframe.bundle.js.map