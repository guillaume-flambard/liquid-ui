{"version":3,"file":"packages_react_src_components_LiquidButton_tsx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAUA;;;;;AAKA;AAueA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAGA;AACA;AAIA;AAAA;AAGA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;;AAGA","sources":["webpack://@liquid-ui/storybook/../../node_modules/clsx/dist/clsx.mjs","webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidButton.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import React, { forwardRef, useRef, useState, useCallback, useEffect } from 'react'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport { useInteractiveGlass } from '../hooks/useInteractiveGlass'\nimport type { LiquidButtonProps, LiquidButtonComponent } from '../types'\n\ninterface RippleEffect {\n  id: string\n  x: number\n  y: number\n  size: number\n}\n\n/**\n * LiquidButton - Interactive glass button component\n * \n * A beautiful button with liquid glass effects, perfect for CTAs and interactive elements.\n * Includes loading states, icons, and responsive design.\n */\nconst LiquidButtonBase = forwardRef<HTMLButtonElement, LiquidButtonProps>(\n  (\n    {\n      variant = 'frosted',\n      intensity = 'regular',\n      opacity = 'regular',\n      interactive = true,\n      adaptiveOpacity = false,\n      environmentBlending = false,\n      size = 'md',\n      fullWidth = false,\n      loading = false,\n      leftIcon,\n      rightIcon,\n      className,\n      children,\n      disabled,\n      style,\n      ...props\n    },\n    ref\n  ) => {\n    const [isPressed, setIsPressed] = useState(false)\n    const [isHovered, setIsHovered] = useState(false)\n    const [ripples, setRipples] = useState<RippleEffect[]>([])\n    const [focusVisible, setFocusVisible] = useState(false)\n    const buttonRef = useRef<HTMLButtonElement>(null)\n    const rippleTimeouts = useRef<Map<string, NodeJS.Timeout>>(new Map())\n    \n    // Generate glass styles\n    const glassStyles = useLiquidGlass({\n      variant,\n      intensity,\n      opacity,\n      interactive,\n      adaptiveOpacity,\n      environmentBlending\n    })\n    \n    // Interactive physics effects\n    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = useInteractiveGlass({\n      elementRef: buttonRef,\n      enabled: interactive && !disabled && !loading,\n      onHover: (hovered) => {\n        setIsHovered(hovered)\n      }\n    })\n    \n    // Cleanup ripple timeouts on unmount\n    useEffect(() => {\n      return () => {\n        rippleTimeouts.current.forEach(timeout => clearTimeout(timeout))\n        rippleTimeouts.current.clear()\n      }\n    }, [])\n    \n    // Create ripple effect\n    const createRipple = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n      if (disabled || loading) return\n      \n      const button = buttonRef.current\n      if (!button) return\n      \n      const rect = button.getBoundingClientRect()\n      const size = Math.max(rect.width, rect.height)\n      const x = event.clientX - rect.left - size / 2\n      const y = event.clientY - rect.top - size / 2\n      \n      const ripple: RippleEffect = {\n        id: Date.now().toString(),\n        x,\n        y,\n        size\n      }\n      \n      setRipples(prev => [...prev, ripple])\n      \n      // Remove ripple after animation\n      const timeout = setTimeout(() => {\n        setRipples(prev => prev.filter(r => r.id !== ripple.id))\n        rippleTimeouts.current.delete(ripple.id)\n      }, 600)\n      \n      rippleTimeouts.current.set(ripple.id, timeout)\n    }, [disabled, loading])\n    \n    // Size classes\n    const sizeClasses = {\n      sm: 'px-3 py-1.5 text-sm min-h-[2rem]',\n      md: 'px-4 py-2 text-base min-h-[2.5rem]',\n      lg: 'px-6 py-3 text-lg min-h-[3rem]'\n    }\n    \n    // Handle mouse events\n    const onMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      handleMouseEnter()\n      props.onMouseEnter?.(e)\n    }, [handleMouseEnter, props.onMouseEnter])\n    \n    const onMouseLeave = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      handleMouseLeave()\n      setIsPressed(false)\n      props.onMouseLeave?.(e)\n    }, [handleMouseLeave, props.onMouseLeave])\n    \n    const onMouseMove = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      handleMouseMove(e)\n      props.onMouseMove?.(e)\n    }, [handleMouseMove, props.onMouseMove])\n    \n    const onMouseDown = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      setIsPressed(true)\n      createRipple(e)\n      props.onMouseDown?.(e)\n    }, [props.onMouseDown, createRipple])\n    \n    const onMouseUp = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      setIsPressed(false)\n      props.onMouseUp?.(e)\n    }, [props.onMouseUp])\n    \n    const onFocus = useCallback((e: React.FocusEvent<HTMLButtonElement>) => {\n      setFocusVisible(true)\n      props.onFocus?.(e)\n    }, [props.onFocus])\n    \n    const onBlur = useCallback((e: React.FocusEvent<HTMLButtonElement>) => {\n      setFocusVisible(false)\n      props.onBlur?.(e)\n    }, [props.onBlur])\n    \n    const onKeyDown = useCallback((e: React.KeyboardEvent<HTMLButtonElement>) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        setIsPressed(true)\n        // Create ripple effect for keyboard activation\n        if (buttonRef.current) {\n          const rect = buttonRef.current.getBoundingClientRect()\n          const mockEvent = {\n            clientX: rect.left + rect.width / 2,\n            clientY: rect.top + rect.height / 2\n          } as React.MouseEvent<HTMLButtonElement>\n          createRipple(mockEvent)\n        }\n      }\n      props.onKeyDown?.(e)\n    }, [props.onKeyDown, createRipple])\n    \n    const onKeyUp = useCallback((e: React.KeyboardEvent<HTMLButtonElement>) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        setIsPressed(false)\n      }\n      props.onKeyUp?.(e)\n    }, [props.onKeyUp])\n    \n    // Build classes\n    const classes = clsx(\n      // Base button styles\n      'liquid-button',\n      'relative',\n      'inline-flex',\n      'items-center',\n      'justify-center',\n      'gap-2',\n      'font-medium',\n      'rounded-lg',\n      'border',\n      'border-white/10',\n      'transition-all',\n      'duration-200',\n      'ease-out',\n      'focus:outline-none',\n      focusVisible && [\n        'ring-2',\n        'ring-blue-500/50',\n        'ring-offset-2',\n        'ring-offset-transparent'\n      ],\n      'transform-gpu',\n      \n      // Size styles\n      sizeClasses[size],\n      \n      // Width styles\n      fullWidth && 'w-full',\n      \n      // State styles\n      !disabled && !loading && [\n        'hover:shadow-lg',\n        'hover:shadow-blue-500/25',\n        'active:scale-[0.98]',\n        isPressed && 'scale-[0.98]',\n        isHovered && [\n          'shadow-xl',\n          'shadow-blue-500/30',\n          'brightness-110'\n        ]\n      ],\n      \n      // Disabled styles\n      (disabled || loading) && [\n        'opacity-50',\n        'cursor-not-allowed',\n        'pointer-events-none'\n      ],\n      \n      // Interactive styles\n      interactive && !disabled && !loading && 'cursor-pointer',\n      \n      className\n    )\n    \n    // Combine styles\n    const combinedStyles = {\n      ...glassStyles,\n      ...style\n    }\n    \n    // Loading spinner component\n    const LoadingSpinner = () => (\n      <svg\n        className=\"animate-spin h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          strokeWidth=\"4\"\n        />\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    )\n    \n    return (\n      <button\n        ref={(node) => {\n          // Handle both forwarded ref and internal ref\n          if (typeof ref === 'function') {\n            ref(node)\n          } else if (ref) {\n            (ref as React.MutableRefObject<HTMLButtonElement | null>).current = node\n          }\n          (buttonRef as React.MutableRefObject<HTMLButtonElement | null>).current = node\n        }}\n        className={classes}\n        style={combinedStyles}\n        disabled={disabled || loading}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onMouseMove={onMouseMove}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n        onKeyUp={onKeyUp}\n        {...props}\n      >\n        {/* Ripple Effects */}\n        <div className=\"absolute inset-0 overflow-hidden rounded-lg pointer-events-none\">\n          {ripples.map((ripple) => (\n            <div\n              key={ripple.id}\n              className=\"absolute rounded-full bg-white/30 animate-ping\"\n              style={{\n                left: ripple.x,\n                top: ripple.y,\n                width: ripple.size,\n                height: ripple.size,\n                animationDuration: '600ms',\n                animationTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)'\n              }}\n            />\n          ))}\n        </div>\n        {loading && <LoadingSpinner />}\n        {!loading && leftIcon && <span className=\"flex-shrink-0\">{leftIcon}</span>}\n        \n        {children && (\n          <span className={loading ? 'opacity-0' : undefined}>\n            {children}\n          </span>\n        )}\n        \n        {!loading && rightIcon && <span className=\"flex-shrink-0\">{rightIcon}</span>}\n      </button>\n    )\n  }\n)\n\nLiquidButtonBase.displayName = 'LiquidButton'\n\n// Create the main component with proper typing\nexport const LiquidButton = LiquidButtonBase as LiquidButtonComponent\n\n// Preset components for easier usage\nLiquidButton.Primary = forwardRef<HTMLButtonElement, Omit<LiquidButtonProps, 'variant' | 'intensity' | 'interactive'>>((props, ref) => (\n  <LiquidButtonBase\n    ref={ref}\n    variant=\"frosted\"\n    intensity=\"regular\"\n    interactive\n    {...props}\n  />\n))\nLiquidButton.Primary.displayName = 'LiquidButton.Primary'\n\nLiquidButton.Secondary = forwardRef<HTMLButtonElement, Omit<LiquidButtonProps, 'variant' | 'opacity' | 'interactive'>>((props, ref) => (\n  <LiquidButtonBase\n    ref={ref}\n    variant=\"clear\"\n    opacity=\"light\"\n    interactive\n    {...props}\n  />\n))\nLiquidButton.Secondary.displayName = 'LiquidButton.Secondary'\n\nLiquidButton.Tinted = forwardRef<HTMLButtonElement, Omit<LiquidButtonProps, 'variant' | 'intensity' | 'interactive'>>((props, ref) => (\n  <LiquidButtonBase\n    ref={ref}\n    variant=\"tinted\"\n    intensity=\"regular\"\n    interactive\n    {...props}\n  />\n))\nLiquidButton.Tinted.displayName = 'LiquidButton.Tinted'\n\nLiquidButton.Small = forwardRef<HTMLButtonElement, Omit<LiquidButtonProps, 'size'>>((props, ref) => (\n  <LiquidButtonBase\n    ref={ref}\n    size=\"sm\"\n    {...props}\n  />\n))\nLiquidButton.Small.displayName = 'LiquidButton.Small'\n\nLiquidButton.Large = forwardRef<HTMLButtonElement, Omit<LiquidButtonProps, 'size'>>((props, ref) => (\n  <LiquidButtonBase\n    ref={ref}\n    size=\"lg\"\n    {...props}\n  />\n))\nLiquidButton.Large.displayName = 'LiquidButton.Large'"],"names":[],"sourceRoot":""}