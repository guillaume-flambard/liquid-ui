"use strict";
(self["webpackChunk_liquid_ui_storybook"] = self["webpackChunk_liquid_ui_storybook"] || []).push([["packages_react_src_components_LiquidButton_tsx-packages_react_src_components_LiquidModal_tsx"],{

/***/ "../../packages/react/src/components/LiquidButton.tsx":
/*!************************************************************!*\
  !*** ../../packages/react/src/components/LiquidButton.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidButton: () => (/* binding */ LiquidButton)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ "../../node_modules/clsx/dist/clsx.mjs");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");
/* harmony import */ var _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useInteractiveGlass */ "../../packages/react/src/hooks/useInteractiveGlass.ts");




/**
 * LiquidButton - Interactive glass button component
 * 
 * A beautiful button with liquid glass effects, perfect for CTAs and interactive elements.
 * Includes loading states, icons, and responsive design.
 */ const LiquidButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ variant = 'frosted', intensity = 'regular', opacity = 'regular', interactive = true, adaptiveOpacity = false, environmentBlending = false, size = 'md', fullWidth = false, loading = false, leftIcon, rightIcon, className, children, disabled, style, ...props }, ref)=>{
    const [isPressed, setIsPressed] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const buttonRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Generate glass styles
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_2__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Interactive physics effects
    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = (0,_hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_3__.useInteractiveGlass)({
        elementRef: buttonRef,
        enabled: interactive && !disabled && !loading
    });
    // Size classes
    const sizeClasses = {
        sm: 'px-3 py-1.5 text-sm min-h-[2rem]',
        md: 'px-4 py-2 text-base min-h-[2.5rem]',
        lg: 'px-6 py-3 text-lg min-h-[3rem]'
    };
    // Handle mouse events
    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseEnter();
        props.onMouseEnter?.(e);
    }, [
        handleMouseEnter,
        props.onMouseEnter
    ]);
    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseLeave();
        setIsPressed(false);
        props.onMouseLeave?.(e);
    }, [
        handleMouseLeave,
        props.onMouseLeave
    ]);
    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        handleMouseMove(e);
        props.onMouseMove?.(e);
    }, [
        handleMouseMove,
        props.onMouseMove
    ]);
    const onMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setIsPressed(true);
        props.onMouseDown?.(e);
    }, [
        props.onMouseDown
    ]);
    const onMouseUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        setIsPressed(false);
        props.onMouseUp?.(e);
    }, [
        props.onMouseUp
    ]);
    // Build classes
    const classes = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(// Base button styles
    'liquid-button', 'relative', 'inline-flex', 'items-center', 'justify-center', 'gap-2', 'font-medium', 'rounded-lg', 'border', 'border-white/10', 'transition-all', 'duration-200', 'ease-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-blue-500/50', 'transform-gpu', // Size styles
    sizeClasses[size], // Width styles
    fullWidth && 'w-full', // State styles
    !disabled && !loading && [
        'hover:shadow-lg',
        'active:scale-[0.98]',
        isPressed && 'scale-[0.98]'
    ], // Disabled styles
    (disabled || loading) && [
        'opacity-50',
        'cursor-not-allowed',
        'pointer-events-none'
    ], // Interactive styles
    interactive && !disabled && !loading && 'cursor-pointer', className);
    // Combine styles
    const combinedStyles = {
        ...glassStyles,
        ...style
    };
    // Loading spinner component
    const LoadingSpinner = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
            className: "animate-spin h-4 w-4",
            fill: "none",
            viewBox: "0 0 24 24"
        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", {
            className: "opacity-25",
            cx: "12",
            cy: "12",
            r: "10",
            stroke: "currentColor",
            strokeWidth: "4"
        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
            className: "opacity-75",
            fill: "currentColor",
            d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        }));
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        ref: (node)=>{
            // Handle both forwarded ref and internal ref
            if (typeof ref === 'function') {
                ref(node);
            } else if (ref) {
                ref.current = node;
            }
            buttonRef.current = node;
        },
        className: classes,
        style: combinedStyles,
        disabled: disabled || loading,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onMouseMove: onMouseMove,
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        ...props
    }, loading && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LoadingSpinner, null), !loading && leftIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", {
        className: "flex-shrink-0"
    }, leftIcon), children && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", {
        className: loading ? 'opacity-0' : undefined
    }, children), !loading && rightIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", {
        className: "flex-shrink-0"
    }, rightIcon));
});
LiquidButton.displayName = 'LiquidButton';

try {
    // @ts-ignore
    LiquidButton.displayName = "LiquidButton";
    // @ts-ignore
    LiquidButton.__docgenInfo = { "description": "LiquidButton - Interactive glass button component\n\nA beautiful button with liquid glass effects, perfect for CTAs and interactive elements.\nIncludes loading states, icons, and responsive design.", "displayName": "LiquidButton", "props": { "size": { "defaultValue": { value: "md" }, "description": "", "name": "size", "required": false, "type": { "name": "enum", "value": [{ "value": "\"sm\"" }, { "value": "\"md\"" }, { "value": "\"lg\"" }] } }, "fullWidth": { "defaultValue": { value: "false" }, "description": "", "name": "fullWidth", "required": false, "type": { "name": "boolean" } }, "loading": { "defaultValue": { value: "false" }, "description": "", "name": "loading", "required": false, "type": { "name": "boolean" } }, "leftIcon": { "defaultValue": null, "description": "", "name": "leftIcon", "required": false, "type": { "name": "ReactNode" } }, "rightIcon": { "defaultValue": null, "description": "", "name": "rightIcon", "required": false, "type": { "name": "ReactNode" } }, "variant": { "defaultValue": { value: "frosted" }, "description": "", "name": "variant", "required": false, "type": { "name": "enum", "value": [{ "value": "\"clear\"" }, { "value": "\"frosted\"" }, { "value": "\"tinted\"" }, { "value": "\"dark\"" }] } }, "intensity": { "defaultValue": { value: "regular" }, "description": "", "name": "intensity", "required": false, "type": { "name": "enum", "value": [{ "value": "\"strong\"" }, { "value": "\"subtle\"" }, { "value": "\"regular\"" }, { "value": "\"none\"" }] } }, "opacity": { "defaultValue": { value: "regular" }, "description": "", "name": "opacity", "required": false, "type": { "name": "enum", "value": [{ "value": "\"strong\"" }, { "value": "\"regular\"" }, { "value": "\"light\"" }, { "value": "\"medium\"" }] } }, "interactive": { "defaultValue": { value: "true" }, "description": "", "name": "interactive", "required": false, "type": { "name": "boolean" } }, "adaptiveOpacity": { "defaultValue": { value: "false" }, "description": "", "name": "adaptiveOpacity", "required": false, "type": { "name": "boolean" } }, "environmentBlending": { "defaultValue": { value: "false" }, "description": "", "name": "environmentBlending", "required": false, "type": { "name": "boolean" } }, "className": { "defaultValue": null, "description": "", "name": "className", "required": false, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidButton.tsx#LiquidButton"] = { docgenInfo: LiquidButton.__docgenInfo, name: "LiquidButton", path: "../../packages/react/src/components/LiquidButton.tsx#LiquidButton" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "../../packages/react/src/components/LiquidModal.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidModal: () => (/* binding */ LiquidModal)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ "../../node_modules/clsx/dist/clsx.mjs");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");




/**
 * LiquidModal - Glass modal and overlay component
 * 
 * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.
 * Includes backdrop blur, keyboard navigation, and accessibility features.
 */ const LiquidModal = ({ open, onClose, title, showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, size = 'md', centered = true, variant = 'frosted', intensity = 'strong', opacity = 'regular', interactive = false, adaptiveOpacity = false, environmentBlending = true, className, children })=>{
    const modalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const backdropRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Generate glass styles for the modal content
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Generate backdrop glass styles
    const backdropGlassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant: 'dark',
        intensity: 'regular',
        opacity: 'light',
        interactive: false,
        adaptiveOpacity: false,
        environmentBlending: true
    });
    // Size classes
    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl'
    };
    // Handle escape key
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open || !closeOnEscape) return;
        const handleKeyDown = (e)=>{
            if (e.key === 'Escape') {
                onClose();
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown);
    }, [
        open,
        closeOnEscape,
        onClose
    ]);
    // Handle focus management
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const previousActiveElement = document.activeElement;
        // Focus the modal when opened
        if (modalRef.current) {
            modalRef.current.focus();
        }
        // Restore focus when closed
        return ()=>{
            if (previousActiveElement && previousActiveElement.focus) {
                previousActiveElement.focus();
            }
        };
    }, [
        open
    ]);
    // Handle body scroll lock
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const originalStyle = window.getComputedStyle(document.body).overflow;
        document.body.style.overflow = 'hidden';
        return ()=>{
            document.body.style.overflow = originalStyle;
        };
    }, [
        open
    ]);
    // Handle backdrop click
    const handleBackdropClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        if (closeOnBackdropClick && e.target === backdropRef.current) {
            onClose();
        }
    }, [
        closeOnBackdropClick,
        onClose
    ]);
    // Handle close button click
    const handleCloseClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        onClose();
    }, [
        onClose
    ]);
    if (!open) return null;
    const modalContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: backdropRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal-backdrop', 'fixed', 'inset-0', 'z-50', 'flex', 'items-center', 'justify-center', 'p-4', 'min-h-screen', centered ? 'items-center' : 'items-start pt-16'),
        style: backdropGlassStyles,
        onClick: handleBackdropClick
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: modalRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal', 'relative', 'w-full', sizeClasses[size], 'max-h-[90vh]', 'overflow-hidden', 'rounded-xl', 'border', 'border-white/10', 'shadow-2xl', 'transform', 'transition-all', 'duration-300', 'ease-out', 'animate-in', 'fade-in-0', 'zoom-in-95', className),
        style: glassStyles,
        tabIndex: -1,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": title ? 'modal-title' : undefined
    }, (title || showCloseButton) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
    }, title && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("h2", {
        id: "modal-title",
        className: "text-lg font-semibold text-white"
    }, title), showCloseButton && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        type: "button",
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('flex', 'items-center', 'justify-center', 'w-8', 'h-8', 'rounded-full', 'text-gray-400', 'hover:text-white', 'hover:bg-white/10', 'transition-colors', 'duration-200'),
        onClick: handleCloseClick,
        "aria-label": "Close modal"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6 18L18 6M6 6l12 12"
    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-content overflow-y-auto max-h-full"
    }, children)));
    // Render modal in a portal
    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(modalContent, document.body);
};
LiquidModal.displayName = 'LiquidModal';

try {
    // @ts-ignore
    LiquidModal.displayName = "LiquidModal";
    // @ts-ignore
    LiquidModal.__docgenInfo = { "description": "LiquidModal - Glass modal and overlay component\n\nA beautiful modal with liquid glass effects, perfect for dialogs and overlays.\nIncludes backdrop blur, keyboard navigation, and accessibility features.", "displayName": "LiquidModal", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidModal.tsx#LiquidModal"] = { docgenInfo: LiquidModal.__docgenInfo, name: "LiquidModal", path: "../../packages/react/src/components/LiquidModal.tsx#LiquidModal" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

}]);
//# sourceMappingURL=packages_react_src_components_LiquidButton_tsx-packages_react_src_components_LiquidModal_tsx.iframe.bundle.js.map