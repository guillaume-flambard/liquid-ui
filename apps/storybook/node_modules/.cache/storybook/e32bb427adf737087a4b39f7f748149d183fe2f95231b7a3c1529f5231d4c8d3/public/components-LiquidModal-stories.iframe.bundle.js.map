{"version":3,"file":"components-LiquidModal-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtQA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAMA;AACA;AACA;AAEA","sources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidModal.stories.tsx","webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport type { Meta, StoryObj } from '@storybook/react'\nimport { LiquidModal } from './LiquidModal'\nimport { LiquidButton } from './LiquidButton'\n\nconst meta = {\n  title: 'Components/LiquidModal',\n  component: LiquidModal,\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'gradient',\n      values: [\n        {\n          name: 'gradient',\n          value: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        },\n        {\n          name: 'dark',\n          value: '#1a1a1a',\n        },\n        {\n          name: 'light',\n          value: '#f5f5f5',\n        },\n      ],\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['frosted', 'clear', 'aurora', 'solid'],\n    },\n    intensity: {\n      control: { type: 'select' },\n      options: ['subtle', 'regular', 'strong'],\n    },\n    opacity: {\n      control: { type: 'select' },\n      options: ['light', 'regular', 'medium', 'strong'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg', 'xl'],\n    },\n  },\n} satisfies Meta<typeof LiquidModal>\n\nexport default meta\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false)\n    return (\n      <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Default Modal\"\n        >\n          <p style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n            This is a beautiful liquid glass modal with smooth animations and backdrop blur.\n          </p>\n        </LiquidModal>\n      </>\n    )\n  },\n}\n\nexport const Sizes: Story = {\n  render: () => {\n    const [openSize, setOpenSize] = useState<string | null>(null)\n    const sizes = ['sm', 'md', 'lg', 'xl'] as const\n    \n    return (\n      <>\n        <div style={{ display: 'flex', gap: '1rem' }}>\n          {sizes.map(size => (\n            <LiquidButton key={size} onClick={() => setOpenSize(size)}>\n              Open {size.toUpperCase()}\n            </LiquidButton>\n          ))}\n        </div>\n        {sizes.map(size => (\n          <LiquidModal\n            key={size}\n            open={openSize === size}\n            onClose={() => setOpenSize(null)}\n            title={`${size.toUpperCase()} Modal`}\n            size={size}\n          >\n            <p style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n              This is a {size} sized modal. Notice how the width changes based on the size prop.\n            </p>\n          </LiquidModal>\n        ))}\n      </>\n    )\n  },\n}\n\nexport const WithoutCloseButton: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false)\n    return (\n      <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"No Close Button\"\n          showCloseButton={false}\n        >\n          <p style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n            This modal doesn't show a close button. Click outside or press ESC to close.\n          </p>\n        </LiquidModal>\n      </>\n    )\n  },\n}\n\nexport const PreventBackdropClose: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false)\n    return (\n      <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Persistent Modal\"\n          closeOnBackdropClick={false}\n        >\n          <p style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n            This modal won't close when you click the backdrop. You must use the close button or ESC key.\n          </p>\n        </LiquidModal>\n      </>\n    )\n  },\n}\n\nexport const Centered: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false)\n    return (\n      <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Centered Modal\n        </LiquidButton>\n        <LiquidModal\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Centered Modal\"\n          centered\n        >\n          <p style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n            This modal is perfectly centered on the screen.\n          </p>\n        </LiquidModal>\n      </>\n    )\n  },\n}\n\nexport const ComplexContent: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false)\n    return (\n      <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Complex Modal\n        </LiquidButton>\n        <LiquidModal\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Subscribe to Newsletter\"\n          size=\"lg\"\n        >\n          <div style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n            <p style={{ marginBottom: '1.5rem' }}>\n              Stay updated with our latest news and updates. We promise not to spam!\n            </p>\n            \n            <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                style={{\n                  padding: '0.75rem',\n                  borderRadius: '8px',\n                  border: '1px solid rgba(255, 255, 255, 0.2)',\n                  background: 'rgba(255, 255, 255, 0.1)',\n                  color: 'white',\n                  fontSize: '1rem',\n                  backdropFilter: 'blur(10px)',\n                }}\n              />\n              \n              <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>\n                <input type=\"checkbox\" id=\"terms\" />\n                <label htmlFor=\"terms\" style={{ fontSize: '0.9rem' }}>\n                  I agree to the terms and conditions\n                </label>\n              </div>\n              \n              <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>\n                <LiquidButton fullWidth variant=\"aurora\">\n                  Subscribe\n                </LiquidButton>\n                <LiquidButton fullWidth variant=\"clear\" onClick={() => setIsOpen(false)}>\n                  Cancel\n                </LiquidButton>\n              </div>\n            </div>\n          </div>\n        </LiquidModal>\n      </>\n    )\n  },\n}\n\nexport const Variants: Story = {\n  render: () => {\n    const [openVariant, setOpenVariant] = useState<string | null>(null)\n    const variants = ['frosted', 'clear', 'aurora', 'solid'] as const\n    \n    return (\n      <>\n        <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>\n          {variants.map(variant => (\n            <LiquidButton key={variant} variant={variant} onClick={() => setOpenVariant(variant)}>\n              {variant.charAt(0).toUpperCase() + variant.slice(1)} Modal\n            </LiquidButton>\n          ))}\n        </div>\n        {variants.map(variant => (\n          <LiquidModal\n            key={variant}\n            open={openVariant === variant}\n            onClose={() => setOpenVariant(null)}\n            title={`${variant.charAt(0).toUpperCase() + variant.slice(1)} Variant`}\n            variant={variant}\n          >\n            <p style={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n              This modal uses the {variant} glass variant. Notice the different visual effects!\n            </p>\n          </LiquidModal>\n        ))}\n      </>\n    )\n  },\n}","import React, { useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport type { LiquidModalProps } from '../types'\n\n/**\n * LiquidModal - Glass modal and overlay component\n * \n * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.\n * Includes backdrop blur, keyboard navigation, and accessibility features.\n */\nexport const LiquidModal: React.FC<LiquidModalProps> = ({\n  open,\n  onClose,\n  title,\n  showCloseButton = true,\n  closeOnBackdropClick = true,\n  closeOnEscape = true,\n  size = 'md',\n  centered = true,\n  variant = 'frosted',\n  intensity = 'strong',\n  opacity = 'regular',\n  interactive = false,\n  adaptiveOpacity = false,\n  environmentBlending = true,\n  className,\n  children\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null)\n  const backdropRef = useRef<HTMLDivElement>(null)\n  \n  // Generate glass styles for the modal content\n  const glassStyles = useLiquidGlass({\n    variant,\n    intensity,\n    opacity,\n    interactive,\n    adaptiveOpacity,\n    environmentBlending\n  })\n  \n  // Generate backdrop glass styles\n  const backdropGlassStyles = useLiquidGlass({\n    variant: 'dark',\n    intensity: 'regular',\n    opacity: 'light',\n    interactive: false,\n    adaptiveOpacity: false,\n    environmentBlending: true\n  })\n  \n  // Size classes\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  }\n  \n  // Handle escape key\n  useEffect(() => {\n    if (!open || !closeOnEscape) return\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose()\n      }\n    }\n    \n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [open, closeOnEscape, onClose])\n  \n  // Handle focus management\n  useEffect(() => {\n    if (!open) return\n    \n    const previousActiveElement = document.activeElement as HTMLElement\n    \n    // Focus the modal when opened\n    if (modalRef.current) {\n      modalRef.current.focus()\n    }\n    \n    // Restore focus when closed\n    return () => {\n      if (previousActiveElement && previousActiveElement.focus) {\n        previousActiveElement.focus()\n      }\n    }\n  }, [open])\n  \n  // Handle body scroll lock\n  useEffect(() => {\n    if (!open) return\n    \n    const originalStyle = window.getComputedStyle(document.body).overflow\n    document.body.style.overflow = 'hidden'\n    \n    return () => {\n      document.body.style.overflow = originalStyle\n    }\n  }, [open])\n  \n  // Handle backdrop click\n  const handleBackdropClick = useCallback((e: React.MouseEvent) => {\n    if (closeOnBackdropClick && e.target === backdropRef.current) {\n      onClose()\n    }\n  }, [closeOnBackdropClick, onClose])\n  \n  // Handle close button click\n  const handleCloseClick = useCallback(() => {\n    onClose()\n  }, [onClose])\n  \n  if (!open) return null\n  \n  const modalContent = (\n    <div\n      ref={backdropRef}\n      className={clsx(\n        'liquid-modal-backdrop',\n        'fixed',\n        'inset-0',\n        'z-50',\n        'flex',\n        'items-center',\n        'justify-center',\n        'p-4',\n        'min-h-screen',\n        centered ? 'items-center' : 'items-start pt-16'\n      )}\n      style={backdropGlassStyles}\n      onClick={handleBackdropClick}\n    >\n      <div\n        ref={modalRef}\n        className={clsx(\n          'liquid-modal',\n          'relative',\n          'w-full',\n          sizeClasses[size],\n          'max-h-[90vh]',\n          'overflow-hidden',\n          'rounded-xl',\n          'border',\n          'border-white/10',\n          'shadow-2xl',\n          'transform',\n          'transition-all',\n          'duration-300',\n          'ease-out',\n          'animate-in',\n          'fade-in-0',\n          'zoom-in-95',\n          className\n        )}\n        style={glassStyles}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? 'modal-title' : undefined}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"liquid-modal-header flex items-center justify-between p-6 border-b border-white/10\">\n            {title && (\n              <h2 id=\"modal-title\" className=\"text-lg font-semibold text-white\">\n                {title}\n              </h2>\n            )}\n            \n            {showCloseButton && (\n              <button\n                type=\"button\"\n                className={clsx(\n                  'flex',\n                  'items-center',\n                  'justify-center',\n                  'w-8',\n                  'h-8',\n                  'rounded-full',\n                  'text-gray-400',\n                  'hover:text-white',\n                  'hover:bg-white/10',\n                  'transition-colors',\n                  'duration-200'\n                )}\n                onClick={handleCloseClick}\n                aria-label=\"Close modal\"\n              >\n                <svg\n                  className=\"w-4 h-4\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className=\"liquid-modal-content overflow-y-auto max-h-full\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n  \n  // Render modal in a portal\n  return createPortal(modalContent, document.body)\n}\n\nLiquidModal.displayName = 'LiquidModal'"],"names":[],"sourceRoot":""}