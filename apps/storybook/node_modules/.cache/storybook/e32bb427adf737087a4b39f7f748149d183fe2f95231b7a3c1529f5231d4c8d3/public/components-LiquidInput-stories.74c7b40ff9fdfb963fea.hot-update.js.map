{"version":3,"file":"components-LiquidInput-stories.74c7b40ff9fdfb963fea.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AAusources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidInput.tsx"],"sourcesContent":["import React, { forwardRef, useRef, useState, useCallback, useId } from 'react'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport { useInteractiveGlass } from '../hooks/useInteractiveGlass'\nimport type { LiquidInputProps, LiquidInputComponent } from '../types'\nimport '../styles/LiquidInput.css'\n\n/**\n * LiquidInput - Glass form input component\n * \n * A beautiful input field with liquid glass effects, perfect for forms and data entry.\n * Includes labels, error states, helper text, and icons.\n */\nconst LiquidInputBase = forwardRef<HTMLInputElement, LiquidInputProps>(\n  (\n    {\n      variant = 'frosted',\n      intensity = 'subtle',\n      opacity = 'regular',\n      interactive = true,\n      adaptiveOpacity = false,\n      environmentBlending = false,\n      label,\n      error,\n      helperText,\n      leftIcon,\n      rightIcon,\n      fullWidth = false,\n      className,\n      disabled,\n      style,\n      ...props\n    },\n    ref\n  ) => {\n    const [isFocused, setIsFocused] = useState(false)\n    const [hasValue, setHasValue] = useState(Boolean(props.value || props.defaultValue))\n    const inputRef = useRef<HTMLInputElement>(null)\n    const wrapperRef = useRef<HTMLDivElement>(null)\n    \n    const id = useId()\n    const inputId = props.id || `liquid-input-${id}`\n    const errorId = error ? `${inputId}-error` : undefined\n    const helperId = helperText ? `${inputId}-helper` : undefined\n    \n    // Generate glass styles for the wrapper\n    const glassStyles = useLiquidGlass({\n      variant,\n      intensity,\n      opacity,\n      interactive,\n      adaptiveOpacity,\n      environmentBlending\n    })\n    \n    // Interactive effects on the wrapper\n    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = useInteractiveGlass({\n      elementRef: wrapperRef,\n      enabled: interactive && !disabled\n    })\n    \n    // Handle input events\n    const onFocus = useCallback((e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(true)\n      props.onFocus?.(e)\n    }, [props.onFocus])\n    \n    const onBlur = useCallback((e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(false)\n      props.onBlur?.(e)\n    }, [props.onBlur])\n    \n    const onChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n      setHasValue(Boolean(e.target.value))\n      props.onChange?.(e)\n    }, [props.onChange])\n    \n    // Handle wrapper mouse events\n    const onMouseEnter = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n      handleMouseEnter()\n    }, [handleMouseEnter])\n    \n    const onMouseLeave = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n      handleMouseLeave()\n    }, [handleMouseLeave])\n    \n    const onMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n      handleMouseMove(e)\n    }, [handleMouseMove])\n    \n    // Base styles\n    const containerStyle: React.CSSProperties = {\n      display: 'flex',\n      flexDirection: 'column',\n      width: fullWidth ? '100%' : 'auto',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    }\n    \n    const labelStyle: React.CSSProperties = {\n      fontSize: '14px',\n      fontWeight: 500,\n      marginBottom: '6px',\n      color: error ? '#ef4444' : isFocused ? '#3b82f6' : 'rgba(255, 255, 255, 0.9)',\n      transition: 'color 0.2s ease',\n    }\n    \n    const wrapperStyle: React.CSSProperties = {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      borderRadius: '12px',\n      border: `1px solid ${error ? 'rgba(239, 68, 68, 0.5)' : isFocused ? 'rgba(59, 130, 246, 0.5)' : 'rgba(255, 255, 255, 0.15)'}`,\n      transition: 'all 0.2s ease',\n      cursor: disabled ? 'not-allowed' : 'text',\n      opacity: disabled ? 0.5 : 1,\n      transform: interactive && !disabled ? 'translateZ(0)' : 'none',\n      boxShadow: isFocused \n        ? `0 0 0 3px ${error ? 'rgba(239, 68, 68, 0.1)' : 'rgba(59, 130, 246, 0.1)'}, 0 8px 32px rgba(0, 0, 0, 0.12)` \n        : '0 4px 16px rgba(0, 0, 0, 0.08)',\n      ...glassStyles,\n    }\n    \n    const inputStyle: React.CSSProperties = {\n      width: '100%',\n      background: 'transparent',\n      border: 'none',\n      outline: 'none',\n      padding: '12px 16px',\n      paddingLeft: leftIcon ? '44px' : '16px',\n      paddingRight: rightIcon ? '44px' : '16px',\n      fontSize: '15px',\n      lineHeight: '1.4',\n      color: 'rgba(255, 255, 255, 0.95)',\n      fontFamily: 'inherit',\n      borderRadius: '12px',\n    }\n    \n    const iconStyle: React.CSSProperties = {\n      position: 'absolute',\n      top: '50%',\n      transform: 'translateY(-50%)',\n      width: '18px',\n      height: '18px',\n      color: 'rgba(255, 255, 255, 0.6)',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }\n    \n    const leftIconStyle: React.CSSProperties = {\n      ...iconStyle,\n      left: '14px',\n    }\n    \n    const rightIconStyle: React.CSSProperties = {\n      ...iconStyle,\n      right: '14px',\n    }\n    \n    const helperStyle: React.CSSProperties = {\n      fontSize: '12px',\n      marginTop: '6px',\n      color: error ? '#ef4444' : 'rgba(255, 255, 255, 0.6)',\n      lineHeight: '1.4',\n    }\n    \n    return (\n      <div style={containerStyle} className={`liquid-input ${className || ''}`}>\n        {label && (\n          <label htmlFor={inputId} style={labelStyle}>\n            {label}\n          </label>\n        )}\n        \n        <div\n          ref={wrapperRef}\n          style={{...wrapperStyle, ...style}}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          onMouseMove={onMouseMove}\n        >\n          {/* Left icon */}\n          {leftIcon && (\n            <div style={leftIconStyle}>\n              {leftIcon}\n            </div>\n          )}\n          \n          {/* Input field */}\n          <input\n            ref={(node) => {\n              // Handle both forwarded ref and internal ref\n              if (typeof ref === 'function') {\n                ref(node)\n              } else if (ref) {\n                (ref as React.MutableRefObject<HTMLInputElement | null>).current = node\n              }\n              (inputRef as React.MutableRefObject<HTMLInputElement | null>).current = node\n            }}\n            id={inputId}\n            style={inputStyle}\n            disabled={disabled}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            onChange={onChange}\n            aria-invalid={error ? 'true' : 'false'}\n            aria-describedby={errorId || helperId || undefined}\n            {...props}\n          />\n          \n          {/* Right icon */}\n          {rightIcon && (\n            <div style={rightIconStyle}>\n              {rightIcon}\n            </div>\n          )}\n        </div>\n        \n        {/* Helper text or error message */}\n        {(helperText || error) && (\n          <div\n            id={errorId || helperId}\n            style={helperStyle}\n          >\n            {error || helperText}\n          </div>\n        )}\n      </div>\n    )\n  }\n)\n\nLiquidInput.displayName = 'LiquidInput'\n\n// Preset components for easier usage\nLiquidInput.Default = forwardRef<HTMLInputElement, Omit<LiquidInputProps, 'variant' | 'intensity' | 'interactive'>>((props, ref) => (\n  <LiquidInput\n    ref={ref}\n    variant=\"frosted\"\n    intensity=\"subtle\"\n    interactive\n    {...props}\n  />\n))\nLiquidInput.Default.displayName = 'LiquidInput.Default'\n\nLiquidInput.Clear = forwardRef<HTMLInputElement, Omit<LiquidInputProps, 'variant' | 'opacity' | 'interactive'>>((props, ref) => (\n  <LiquidInput\n    ref={ref}\n    variant=\"clear\"\n    opacity=\"light\"\n    interactive\n    {...props}\n  />\n))\nLiquidInput.Clear.displayName = 'LiquidInput.Clear'\n\nLiquidInput.Email = forwardRef<HTMLInputElement, Omit<LiquidInputProps, 'type' | 'variant' | 'intensity' | 'interactive'>>((props, ref) => (\n  <LiquidInput\n    ref={ref}\n    type=\"email\"\n    variant=\"frosted\"\n    intensity=\"subtle\"\n    interactive\n    {...props}\n  />\n))\nLiquidInput.Email.displayName = 'LiquidInput.Email'\n\nLiquidInput.Password = forwardRef<HTMLInputElement, Omit<LiquidInputProps, 'type' | 'variant' | 'intensity' | 'interactive'>>((props, ref) => (\n  <LiquidInput\n    ref={ref}\n    type=\"password\"\n    variant=\"frosted\"\n    intensity=\"subtle\"\n    interactive\n    {...props}\n  />\n))\nLiquidInput.Password.displayName = 'LiquidInput.Password'\n\nLiquidInput.Search = forwardRef<HTMLInputElement, Omit<LiquidInputProps, 'type' | 'variant' | 'intensity' | 'interactive'>>((props, ref) => (\n  <LiquidInput\n    ref={ref}\n    type=\"search\"\n    variant=\"clear\"\n    intensity=\"subtle\"\n    interactive\n    {...props}\n  />\n))\nLiquidInput.Search.displayName = 'LiquidInput.Search'"],"names":[],"sourceRoot":""}