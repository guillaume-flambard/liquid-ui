"use strict";
self["webpackHotUpdate_liquid_ui_storybook"]("components-LiquidModal-stories",{

/***/ "../../packages/react/src/components/LiquidModal.stories.tsx":
/*!*******************************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.stories.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Centered: () => (/* binding */ Centered),
/* harmony export */   ComplexContent: () => (/* binding */ ComplexContent),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   PreventBackdropClose: () => (/* binding */ PreventBackdropClose),
/* harmony export */   Sizes: () => (/* binding */ Sizes),
/* harmony export */   Variants: () => (/* binding */ Variants),
/* harmony export */   WithoutCloseButton: () => (/* binding */ WithoutCloseButton),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _LiquidModal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LiquidModal */ "../../packages/react/src/components/LiquidModal.tsx");
/* harmony import */ var _LiquidButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LiquidButton */ "../../packages/react/src/components/LiquidButton.tsx");



const meta = {
  title: 'Components/LiquidModal',
  component: _LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal,
  parameters: {
    layout: 'centered',
    backgrounds: {
      default: 'gradient',
      values: [{
        name: 'gradient',
        value: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
      }, {
        name: 'dark',
        value: '#1a1a1a'
      }, {
        name: 'light',
        value: '#f5f5f5'
      }]
    }
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: {
        type: 'select'
      },
      options: ['frosted', 'clear', 'aurora', 'solid']
    },
    size: {
      control: {
        type: 'select'
      },
      options: ['sm', 'md', 'lg', 'xl']
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const Default = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Default Modal"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This is a beautiful liquid glass modal with smooth animations and backdrop blur.")));
  }
};
const Sizes = {
  render: () => {
    const [openSize, setOpenSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const sizes = ['sm', 'md', 'lg', 'xl'];
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '1rem'
      }
    }, sizes.map(size => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      key: size,
      onClick: () => setOpenSize(size)
    }, "Open ", size.toUpperCase()))), sizes.map(size => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      key: size,
      open: openSize === size,
      onClose: () => setOpenSize(null),
      title: `${size.toUpperCase()} Modal`,
      size: size
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This is a ", size, " sized modal. Notice how the width changes based on the size prop."))));
  }
};
const WithoutCloseButton = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "No Close Button",
      showCloseButton: false
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal doesn't show a close button. Click outside or press ESC to close.")));
  }
};
const PreventBackdropClose = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Persistent Modal",
      closeOnBackdropClick: false
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal won't close when you click the backdrop. You must use the close button or ESC key.")));
  }
};
const Centered = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Centered Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Centered Modal",
      centered: true
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal is perfectly centered on the screen.")));
  }
};
const ComplexContent = {
  render: () => {
    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      onClick: () => setIsOpen(true)
    }, "Open Complex Modal"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      open: isOpen,
      onClose: () => setIsOpen(false),
      title: "Subscribe to Newsletter",
      size: "lg"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        marginBottom: '1.5rem'
      }
    }, "Stay updated with our latest news and updates. We promise not to spam!"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
      type: "email",
      placeholder: "Enter your email",
      style: {
        padding: '0.75rem',
        borderRadius: '8px',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        background: 'rgba(255, 255, 255, 0.1)',
        color: 'white',
        fontSize: '1rem',
        backdropFilter: 'blur(10px)'
      }
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '0.5rem',
        alignItems: 'center'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {
      type: "checkbox",
      id: "terms"
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("label", {
      htmlFor: "terms",
      style: {
        fontSize: '0.9rem'
      }
    }, "I agree to the terms and conditions")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '1rem',
        marginTop: '1rem'
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      fullWidth: true,
      variant: "aurora"
    }, "Subscribe"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      fullWidth: true,
      variant: "clear",
      onClick: () => setIsOpen(false)
    }, "Cancel"))))));
  }
};
const Variants = {
  render: () => {
    const [openVariant, setOpenVariant] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const variants = ['frosted', 'clear', 'aurora', 'solid'];
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      style: {
        display: 'flex',
        gap: '1rem',
        flexWrap: 'wrap'
      }
    }, variants.map(variant => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidButton__WEBPACK_IMPORTED_MODULE_2__.LiquidButton, {
      key: variant,
      variant: variant,
      onClick: () => setOpenVariant(variant)
    }, variant.charAt(0).toUpperCase() + variant.slice(1), " Modal"))), variants.map(variant => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LiquidModal__WEBPACK_IMPORTED_MODULE_1__.LiquidModal, {
      key: variant,
      open: openVariant === variant,
      onClose: () => setOpenVariant(null),
      title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Variant`,
      variant: variant
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("p", {
      style: {
        color: 'rgba(255, 255, 255, 0.9)'
      }
    }, "This modal uses the ", variant, " glass variant. Notice the different visual effects!"))));
  }
};
;
const __namedExportsOrder = ["Default", "Sizes", "WithoutCloseButton", "PreventBackdropClose", "Centered", "ComplexContent", "Variants"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Default Modal\">\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This is a beautiful liquid glass modal with smooth animations and backdrop blur.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
Sizes.parameters = {
  ...Sizes.parameters,
  docs: {
    ...Sizes.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [openSize, setOpenSize] = useState<string | null>(null);\n    const sizes = ['sm', 'md', 'lg', 'xl'] as const;\n    return <>\n        <div style={{\n        display: 'flex',\n        gap: '1rem'\n      }}>\n          {sizes.map(size => <LiquidButton key={size} onClick={() => setOpenSize(size)}>\n              Open {size.toUpperCase()}\n            </LiquidButton>)}\n        </div>\n        {sizes.map(size => <LiquidModal key={size} open={openSize === size} onClose={() => setOpenSize(null)} title={`${size.toUpperCase()} Modal`} size={size}>\n            <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n              This is a {size} sized modal. Notice how the width changes based on the size prop.\n            </p>\n          </LiquidModal>)}\n      </>;\n  }\n}",
      ...Sizes.parameters?.docs?.source
    }
  }
};
WithoutCloseButton.parameters = {
  ...WithoutCloseButton.parameters,
  docs: {
    ...WithoutCloseButton.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"No Close Button\" showCloseButton={false}>\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This modal doesn't show a close button. Click outside or press ESC to close.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...WithoutCloseButton.parameters?.docs?.source
    }
  }
};
PreventBackdropClose.parameters = {
  ...PreventBackdropClose.parameters,
  docs: {
    ...PreventBackdropClose.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Persistent Modal\" closeOnBackdropClick={false}>\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This modal won't close when you click the backdrop. You must use the close button or ESC key.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...PreventBackdropClose.parameters?.docs?.source
    }
  }
};
Centered.parameters = {
  ...Centered.parameters,
  docs: {
    ...Centered.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Centered Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Centered Modal\" centered>\n          <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            This modal is perfectly centered on the screen.\n          </p>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...Centered.parameters?.docs?.source
    }
  }
};
ComplexContent.parameters = {
  ...ComplexContent.parameters,
  docs: {
    ...ComplexContent.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <LiquidButton onClick={() => setIsOpen(true)}>\n          Open Complex Modal\n        </LiquidButton>\n        <LiquidModal open={isOpen} onClose={() => setIsOpen(false)} title=\"Subscribe to Newsletter\" size=\"lg\">\n          <div style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n            <p style={{\n            marginBottom: '1.5rem'\n          }}>\n              Stay updated with our latest news and updates. We promise not to spam!\n            </p>\n            \n            <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '1rem'\n          }}>\n              <input type=\"email\" placeholder=\"Enter your email\" style={{\n              padding: '0.75rem',\n              borderRadius: '8px',\n              border: '1px solid rgba(255, 255, 255, 0.2)',\n              background: 'rgba(255, 255, 255, 0.1)',\n              color: 'white',\n              fontSize: '1rem',\n              backdropFilter: 'blur(10px)'\n            }} />\n              \n              <div style={{\n              display: 'flex',\n              gap: '0.5rem',\n              alignItems: 'center'\n            }}>\n                <input type=\"checkbox\" id=\"terms\" />\n                <label htmlFor=\"terms\" style={{\n                fontSize: '0.9rem'\n              }}>\n                  I agree to the terms and conditions\n                </label>\n              </div>\n              \n              <div style={{\n              display: 'flex',\n              gap: '1rem',\n              marginTop: '1rem'\n            }}>\n                <LiquidButton fullWidth variant=\"aurora\">\n                  Subscribe\n                </LiquidButton>\n                <LiquidButton fullWidth variant=\"clear\" onClick={() => setIsOpen(false)}>\n                  Cancel\n                </LiquidButton>\n              </div>\n            </div>\n          </div>\n        </LiquidModal>\n      </>;\n  }\n}",
      ...ComplexContent.parameters?.docs?.source
    }
  }
};
Variants.parameters = {
  ...Variants.parameters,
  docs: {
    ...Variants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [openVariant, setOpenVariant] = useState<string | null>(null);\n    const variants = ['frosted', 'clear', 'aurora', 'solid'] as const;\n    return <>\n        <div style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap'\n      }}>\n          {variants.map(variant => <LiquidButton key={variant} variant={variant} onClick={() => setOpenVariant(variant)}>\n              {variant.charAt(0).toUpperCase() + variant.slice(1)} Modal\n            </LiquidButton>)}\n        </div>\n        {variants.map(variant => <LiquidModal key={variant} open={openVariant === variant} onClose={() => setOpenVariant(null)} title={`${variant.charAt(0).toUpperCase() + variant.slice(1)} Variant`} variant={variant}>\n            <p style={{\n          color: 'rgba(255, 255, 255, 0.9)'\n        }}>\n              This modal uses the {variant} glass variant. Notice the different visual effects!\n            </p>\n          </LiquidModal>)}\n      </>;\n  }\n}",
      ...Variants.parameters?.docs?.source
    }
  }
};

/***/ })

});
//# sourceMappingURL=components-LiquidModal-stories.56b831051239ddd6f287.hot-update.js.map