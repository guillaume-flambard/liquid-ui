"use strict";
(self["webpackChunk_liquid_ui_storybook"] = self["webpackChunk_liquid_ui_storybook"] || []).push([["LiquidInput-stories"],{

/***/ "../../packages/react/src/components/LiquidModal.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidModal: () => (/* binding */ LiquidModal)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ "../../node_modules/clsx/dist/clsx.mjs");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");




/**
 * LiquidModal - Glass modal and overlay component
 * 
 * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.
 * Includes backdrop blur, keyboard navigation, and accessibility features.
 */ const LiquidModal = ({ open, onClose, title, showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, size = 'md', centered = true, variant = 'frosted', intensity = 'strong', opacity = 'regular', interactive = false, adaptiveOpacity = false, environmentBlending = true, className, children })=>{
    const modalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const backdropRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Generate glass styles for the modal content
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Generate backdrop glass styles
    const backdropGlassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant: 'dark',
        intensity: 'regular',
        opacity: 'light',
        interactive: false,
        adaptiveOpacity: false,
        environmentBlending: true
    });
    // Size classes
    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl'
    };
    // Handle escape key
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open || !closeOnEscape) return;
        const handleKeyDown = (e)=>{
            if (e.key === 'Escape') {
                onClose();
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown);
    }, [
        open,
        closeOnEscape,
        onClose
    ]);
    // Handle focus management
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const previousActiveElement = document.activeElement;
        // Focus the modal when opened
        if (modalRef.current) {
            modalRef.current.focus();
        }
        // Restore focus when closed
        return ()=>{
            if (previousActiveElement && previousActiveElement.focus) {
                previousActiveElement.focus();
            }
        };
    }, [
        open
    ]);
    // Handle body scroll lock
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const originalStyle = window.getComputedStyle(document.body).overflow;
        document.body.style.overflow = 'hidden';
        return ()=>{
            document.body.style.overflow = originalStyle;
        };
    }, [
        open
    ]);
    // Handle backdrop click
    const handleBackdropClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        if (closeOnBackdropClick && e.target === backdropRef.current) {
            onClose();
        }
    }, [
        closeOnBackdropClick,
        onClose
    ]);
    // Handle close button click
    const handleCloseClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        onClose();
    }, [
        onClose
    ]);
    if (!open) return null;
    const modalContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: backdropRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal-backdrop', 'fixed', 'inset-0', 'z-50', 'flex', 'items-center', 'justify-center', 'p-4', 'min-h-screen', centered ? 'items-center' : 'items-start pt-16'),
        style: backdropGlassStyles,
        onClick: handleBackdropClick
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: modalRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal', 'relative', 'w-full', sizeClasses[size], 'max-h-[90vh]', 'overflow-hidden', 'rounded-xl', 'border', 'border-white/10', 'shadow-2xl', 'transform', 'transition-all', 'duration-300', 'ease-out', 'animate-in', 'fade-in-0', 'zoom-in-95', className),
        style: glassStyles,
        tabIndex: -1,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": title ? 'modal-title' : undefined
    }, (title || showCloseButton) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
    }, title && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("h2", {
        id: "modal-title",
        className: "text-lg font-semibold text-white"
    }, title), showCloseButton && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        type: "button",
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('flex', 'items-center', 'justify-center', 'w-8', 'h-8', 'rounded-full', 'text-gray-400', 'hover:text-white', 'hover:bg-white/10', 'transition-colors', 'duration-200'),
        onClick: handleCloseClick,
        "aria-label": "Close modal"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6 18L18 6M6 6l12 12"
    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-content overflow-y-auto max-h-full"
    }, children)));
    // Render modal in a portal
    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(modalContent, document.body);
};
LiquidModal.displayName = 'LiquidModal';

try {
    // @ts-ignore
    LiquidModal.displayName = "LiquidModal";
    // @ts-ignore
    LiquidModal.__docgenInfo = { "description": "LiquidModal - Glass modal and overlay component\n\nA beautiful modal with liquid glass effects, perfect for dialogs and overlays.\nIncludes backdrop blur, keyboard navigation, and accessibility features.", "displayName": "LiquidModal", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidModal.tsx#LiquidModal"] = { docgenInfo: LiquidModal.__docgenInfo, name: "LiquidModal", path: "../../packages/react/src/components/LiquidModal.tsx#LiquidModal" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "../../packages/react/src/hooks/useAdaptiveGlass.ts":
/*!**********************************************************!*\
  !*** ../../packages/react/src/hooks/useAdaptiveGlass.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useAdaptiveGlass: () => (/* binding */ useAdaptiveGlass)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liquid-ui/core */ "../../packages/core/src/index.ts");


/**
 * useAdaptiveGlass - Hook for adaptive glass effects based on background
 * 
 * This hook analyzes the background behind the glass element and adjusts
 * opacity and tint automatically for optimal visual contrast and readability.
 */ function useAdaptiveGlass({ elementRef, config, enabled = true, debounceMs = 100 }) {
    const [adaptiveStyles, setAdaptiveStyles] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
    const [backgroundLuminance, setBackgroundLuminance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0.5);
    // Analyze background and calculate adaptive styles
    const analyzeBackground = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.debounce)(()=>{
        if (!enabled || !elementRef.current) return;
        const element = elementRef.current;
        const computedStyle = window.getComputedStyle(element.parentElement || element);
        const backgroundColor = computedStyle.backgroundColor;
        // Parse background color and calculate luminance
        const colorData = (0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.parseColor)(backgroundColor);
        if (colorData) {
            const luminance = (0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.calculateLuminance)(colorData.r, colorData.g, colorData.b);
            setBackgroundLuminance(luminance);
            // Generate adaptive background using the engine
            const engine = _liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.LiquidGlassEngine.getInstance();
            const adaptiveBackground = engine.getAdaptiveBackground(config, luminance);
            setAdaptiveStyles({
                background: adaptiveBackground,
                // Adjust border opacity based on background
                borderColor: luminance > 0.5 ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
            });
        }
    }, debounceMs), [
        enabled,
        elementRef,
        config,
        debounceMs
    ]);
    // Set up intersection observer to detect background changes
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!enabled || !elementRef.current) return;
        const element = elementRef.current;
        // Initial analysis
        analyzeBackground();
        // Create mutation observer to watch for style changes
        const observer = new MutationObserver((mutations)=>{
            const hasStyleChanges = mutations.some((mutation)=>mutation.type === 'attributes' && mutation.attributeName === 'style');
            if (hasStyleChanges) {
                analyzeBackground();
            }
        });
        // Observe parent elements for style changes
        let currentElement = element.parentElement;
        while(currentElement){
            observer.observe(currentElement, {
                attributes: true,
                attributeFilter: [
                    'style',
                    'class'
                ]
            });
            currentElement = currentElement.parentElement;
        }
        // Also listen for window resize (might change background)
        window.addEventListener('resize', analyzeBackground);
        return ()=>{
            observer.disconnect();
            window.removeEventListener('resize', analyzeBackground);
        };
    }, [
        enabled,
        elementRef,
        analyzeBackground
    ]);
    // Re-analyze when config changes
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (enabled) {
            analyzeBackground();
        }
    }, [
        config,
        analyzeBackground,
        enabled
    ]);
    return {
        adaptiveStyles,
        backgroundLuminance,
        reanalyze: analyzeBackground
    };
}


/***/ }),

/***/ "../../packages/react/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/react/src/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidButton: () => (/* reexport safe */ _components_LiquidButton__WEBPACK_IMPORTED_MODULE_1__.LiquidButton),
/* harmony export */   LiquidCard: () => (/* reexport safe */ _components_LiquidCard__WEBPACK_IMPORTED_MODULE_0__.LiquidCard),
/* harmony export */   LiquidInput: () => (/* reexport safe */ _components_LiquidInput__WEBPACK_IMPORTED_MODULE_2__.LiquidInput),
/* harmony export */   LiquidModal: () => (/* reexport safe */ _components_LiquidModal__WEBPACK_IMPORTED_MODULE_3__.LiquidModal),
/* harmony export */   useAdaptiveGlass: () => (/* reexport safe */ _hooks_useAdaptiveGlass__WEBPACK_IMPORTED_MODULE_6__.useAdaptiveGlass),
/* harmony export */   useInteractiveGlass: () => (/* reexport safe */ _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_5__.useInteractiveGlass),
/* harmony export */   useLiquidGlass: () => (/* reexport safe */ _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_4__.useLiquidGlass)
/* harmony export */ });
/* harmony import */ var _components_LiquidCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/LiquidCard */ "../../packages/react/src/components/LiquidCard.tsx");
/* harmony import */ var _components_LiquidButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/LiquidButton */ "../../packages/react/src/components/LiquidButton.tsx");
/* harmony import */ var _components_LiquidInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/LiquidInput */ "../../packages/react/src/components/LiquidInput.tsx");
/* harmony import */ var _components_LiquidModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/LiquidModal */ "../../packages/react/src/components/LiquidModal.tsx");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");
/* harmony import */ var _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useInteractiveGlass */ "../../packages/react/src/hooks/useInteractiveGlass.ts");
/* harmony import */ var _hooks_useAdaptiveGlass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useAdaptiveGlass */ "../../packages/react/src/hooks/useAdaptiveGlass.ts");
// Components




// Hooks





/***/ }),

/***/ "./src/stories/LiquidInput.stories.tsx":
/*!*********************************************!*\
  !*** ./src/stories/LiquidInput.stories.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedFeatures: () => (/* binding */ AdvancedFeatures),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   DisabledStates: () => (/* binding */ DisabledStates),
/* harmony export */   ErrorStates: () => (/* binding */ ErrorStates),
/* harmony export */   GlassVariants: () => (/* binding */ GlassVariants),
/* harmony export */   InteractiveForm: () => (/* binding */ InteractiveForm),
/* harmony export */   PresetComponents: () => (/* binding */ PresetComponents),
/* harmony export */   ValidationStates: () => (/* binding */ ValidationStates),
/* harmony export */   WithFloatingLabel: () => (/* binding */ WithFloatingLabel),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liquid-ui/react */ "../../packages/react/src/index.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


const meta = {
  title: 'Components/LiquidInput',
  component: _liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: `
The LiquidInput is a beautiful glass form input component with floating labels, validation states, and advanced features inspired by the LiquidModal design patterns.

## Features
- **Floating Labels**: Smooth glass label animations that float on focus/input
- **Validation States**: Visual feedback with color transitions and icons
- **Auto-formatting**: Format-aware input with real-time preview (phone numbers, etc.)
- **Input Masking**: Type-based input formatting and validation
- **Glass Effects**: Multiple variants with customizable intensity and opacity
- **Accessibility**: ARIA states, proper labeling, and keyboard navigation
        `
      }
    }
  },
  argTypes: {
    variant: {
      control: {
        type: 'select'
      },
      options: ['frosted', 'clear', 'tinted', 'dark'],
      description: 'Glass effect variant'
    },
    intensity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'strong'],
      description: 'Blur intensity'
    },
    opacity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'strong'],
      description: 'Background opacity'
    },
    interactive: {
      control: 'boolean',
      description: 'Enable interactive glass effects'
    },
    adaptiveOpacity: {
      control: 'boolean',
      description: 'Adaptive opacity based on content'
    },
    environmentBlending: {
      control: 'boolean',
      description: 'Environment color blending'
    },
    fullWidth: {
      control: 'boolean',
      description: 'Full width input'
    },
    disabled: {
      control: 'boolean',
      description: 'Disabled state'
    },
    label: {
      control: 'text',
      description: 'Input label'
    },
    error: {
      control: 'text',
      description: 'Error message'
    },
    helperText: {
      control: 'text',
      description: 'Helper text'
    }
  },
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Basic Examples
const Default = {
  args: {
    placeholder: 'Enter your name',
    variant: 'frosted',
    intensity: 'regular',
    opacity: 'regular',
    interactive: true,
    fullWidth: false
  }
};
const WithFloatingLabel = {
  args: {
    label: 'Full Name',
    placeholder: 'Enter your full name',
    variant: 'frosted',
    intensity: 'regular',
    interactive: true,
    fullWidth: true
  },
  parameters: {
    docs: {
      description: {
        story: 'Input with floating label animation. The label floats up when focused or when there is content.'
      }
    }
  }
};
// Validation States
const ValidationStates = {
  render: () => {
    const [email, setEmail] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [password, setPassword] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [phone, setPhone] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    return /*#__PURE__*/React.createElement("div", {
      className: "space-y-6 w-96"
    }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "email",
      label: "Email Address",
      placeholder: "Enter your email",
      value: email,
      onChange: e => setEmail(e.target.value),
      required: true,
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
      })),
      fullWidth: true
    }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "password",
      label: "Password",
      placeholder: "Enter your password",
      value: password,
      onChange: e => setPassword(e.target.value),
      required: true,
      minLength: 8,
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
      })),
      helperText: "Must be at least 8 characters",
      fullWidth: true
    }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "tel",
      label: "Phone Number",
      placeholder: "Enter your phone number",
      value: phone,
      onChange: e => setPhone(e.target.value),
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
      })),
      helperText: "Auto-formatted as you type",
      fullWidth: true
    }));
  },
  parameters: {
    docs: {
      description: {
        story: 'Real-time validation with visual feedback, color-coded borders, and validation icons.'
      }
    }
  }
};
// Glass Variants
const GlassVariants = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 gap-6"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    variant: "frosted",
    label: "Frosted Glass",
    placeholder: "Classic frosted effect",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
    }))
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    variant: "clear",
    label: "Clear Glass",
    placeholder: "Ultra-minimal transparency",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M13 10V3L4 14h7v7l9-11h-7z"
    }))
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    variant: "tinted",
    label: "Tinted Glass",
    placeholder: "Subtle color tinting",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"
    }))
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    variant: "dark",
    label: "Dark Glass",
    placeholder: "Dark glass variant",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    }))
  })),
  parameters: {
    docs: {
      description: {
        story: 'Different glass effect variants with floating labels and validation states.'
      }
    }
  }
};
// Error States
const ErrorStates = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "space-y-6 w-96"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    label: "Email",
    placeholder: "Enter your email",
    error: "Please enter a valid email address",
    value: "invalid-email",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
    })),
    fullWidth: true
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    label: "Password",
    placeholder: "Enter password",
    type: "password",
    error: "Password must be at least 8 characters",
    value: "123",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
    })),
    fullWidth: true
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    label: "Required Field",
    placeholder: "This field is required",
    error: "This field cannot be empty",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z"
    })),
    fullWidth: true
  })),
  parameters: {
    docs: {
      description: {
        story: 'Error states with validation feedback, red borders, error icons, and descriptive messages.'
      }
    }
  }
};
// Interactive Form
const InteractiveForm = {
  render: () => {
    const [formData, setFormData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      website: '',
      message: ''
    });
    const [showSuccess, setShowSuccess] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const handleSubmit = e => {
      e.preventDefault();
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 3000);
    };
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: handleSubmit,
      className: "w-96 space-y-6"
    }, showSuccess && /*#__PURE__*/React.createElement("div", {
      className: "p-4 bg-green-500/20 border border-green-500/30 rounded-lg text-green-300 text-sm"
    }, "✅ Form submitted successfully!"), /*#__PURE__*/React.createElement("div", {
      className: "grid grid-cols-2 gap-4"
    }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      label: "First Name",
      placeholder: "John",
      value: formData.firstName,
      onChange: e => setFormData(prev => ({
        ...prev,
        firstName: e.target.value
      })),
      required: true
    }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      label: "Last Name",
      placeholder: "Doe",
      value: formData.lastName,
      onChange: e => setFormData(prev => ({
        ...prev,
        lastName: e.target.value
      })),
      required: true
    })), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "email",
      label: "Email Address",
      placeholder: "john@example.com",
      value: formData.email,
      onChange: e => setFormData(prev => ({
        ...prev,
        email: e.target.value
      })),
      required: true,
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
      })),
      fullWidth: true
    }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "tel",
      label: "Phone Number",
      placeholder: "(555) 123-4567",
      value: formData.phone,
      onChange: e => setFormData(prev => ({
        ...prev,
        phone: e.target.value
      })),
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
      })),
      helperText: "Auto-formatted as you type",
      fullWidth: true
    }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "url",
      label: "Website",
      placeholder: "https://example.com",
      value: formData.website,
      onChange: e => setFormData(prev => ({
        ...prev,
        website: e.target.value
      })),
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9"
      })),
      helperText: "Optional website URL",
      fullWidth: true
    }), /*#__PURE__*/React.createElement("button", {
      type: "submit",
      className: "w-full px-4 py-3 bg-blue-500/20 border border-blue-500/30 rounded-lg text-blue-300 font-medium hover:bg-blue-500/30 transition-colors"
    }, "Submit Form"));
  },
  parameters: {
    docs: {
      description: {
        story: 'Complete interactive form with validation, auto-formatting, and real-time feedback.'
      }
    }
  }
};
// Preset Components
const PresetComponents = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "space-y-8"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold mb-4 text-white"
  }, "Input Type Presets"), /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput.Email, {
    label: "Email",
    placeholder: "Enter your email",
    helperText: "We'll never share your email"
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput.Password, {
    label: "Password",
    placeholder: "Enter your password",
    helperText: "Must be at least 8 characters"
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput.Search, {
    placeholder: "Search...",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
    }))
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput.Default, {
    label: "Full Name",
    placeholder: "Enter your full name",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
    }))
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold mb-4 text-white"
  }, "Style Presets"), /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput.Clear, {
    label: "Clear Style",
    placeholder: "Minimal transparency"
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput.Default, {
    label: "Default Style",
    placeholder: "Frosted glass effect"
  })))),
  parameters: {
    docs: {
      description: {
        story: 'Pre-configured input components optimized for common use cases and input types.'
      }
    }
  }
};
// Advanced Features
const AdvancedFeatures = {
  render: () => {
    const [searchTerm, setSearchTerm] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    return /*#__PURE__*/React.createElement("div", {
      className: "space-y-8 w-96"
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
      className: "text-lg font-semibold mb-4 text-white"
    }, "Auto-formatting"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "tel",
      label: "Phone Number",
      placeholder: "Enter phone number",
      value: value,
      onChange: e => setValue(e.target.value),
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
      })),
      helperText: "Auto-formats to (555) 123-4567",
      fullWidth: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
      className: "text-lg font-semibold mb-4 text-white"
    }, "Real-time Search"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      type: "search",
      label: "Search",
      placeholder: "Type to search...",
      value: searchTerm,
      onChange: e => setSearchTerm(e.target.value),
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
      })),
      rightIcon: searchTerm && /*#__PURE__*/React.createElement("button", {
        onClick: () => setSearchTerm(''),
        className: "text-gray-400 hover:text-white transition-colors"
      }, /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6 18L18 6M6 6l12 12"
      }))),
      helperText: searchTerm ? `Searching for "${searchTerm}"...` : 'Start typing to search',
      fullWidth: true
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
      className: "text-lg font-semibold mb-4 text-white"
    }, "Environment Blending"), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
      label: "Advanced Input",
      placeholder: "Environment-aware styling",
      variant: "frosted",
      intensity: "strong",
      environmentBlending: true,
      adaptiveOpacity: true,
      leftIcon: /*#__PURE__*/React.createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
      }, /*#__PURE__*/React.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M13 10V3L4 14h7v7l9-11h-7z"
      })),
      helperText: "Adapts to background colors",
      fullWidth: true
    })));
  },
  parameters: {
    docs: {
      description: {
        story: 'Advanced features including auto-formatting, real-time feedback, and environment-aware styling.'
      }
    }
  }
};
// Disabled States
const DisabledStates = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "space-y-6 w-96"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    label: "Disabled Input",
    placeholder: "This input is disabled",
    disabled: true,
    value: "Cannot edit this",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
    })),
    helperText: "This field is currently disabled",
    fullWidth: true
  }), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidInput, {
    label: "Disabled with Error",
    placeholder: "Disabled with error state",
    disabled: true,
    error: "Field is disabled due to validation error",
    value: "Invalid value",
    leftIcon: /*#__PURE__*/React.createElement("svg", {
      className: "w-4 h-4",
      fill: "none",
      stroke: "currentColor",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z"
    })),
    fullWidth: true
  })),
  parameters: {
    docs: {
      description: {
        story: 'Disabled input states with proper styling and accessibility considerations.'
      }
    }
  }
};
;
const __namedExportsOrder = ["Default", "WithFloatingLabel", "ValidationStates", "GlassVariants", "ErrorStates", "InteractiveForm", "PresetComponents", "AdvancedFeatures", "DisabledStates"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    placeholder: 'Enter your name',\n    variant: 'frosted',\n    intensity: 'regular',\n    opacity: 'regular',\n    interactive: true,\n    fullWidth: false\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
WithFloatingLabel.parameters = {
  ...WithFloatingLabel.parameters,
  docs: {
    ...WithFloatingLabel.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: 'Full Name',\n    placeholder: 'Enter your full name',\n    variant: 'frosted',\n    intensity: 'regular',\n    interactive: true,\n    fullWidth: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Input with floating label animation. The label floats up when focused or when there is content.'\n      }\n    }\n  }\n}",
      ...WithFloatingLabel.parameters?.docs?.source
    }
  }
};
ValidationStates.parameters = {
  ...ValidationStates.parameters,
  docs: {
    ...ValidationStates.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [phone, setPhone] = useState('');\n    return <div className=\"space-y-6 w-96\">\n        <LiquidInput type=\"email\" label=\"Email Address\" placeholder=\"Enter your email\" value={email} onChange={e => setEmail(e.target.value)} required leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n            </svg>} fullWidth />\n        \n        <LiquidInput type=\"password\" label=\"Password\" placeholder=\"Enter your password\" value={password} onChange={e => setPassword(e.target.value)} required minLength={8} leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n            </svg>} helperText=\"Must be at least 8 characters\" fullWidth />\n        \n        <LiquidInput type=\"tel\" label=\"Phone Number\" placeholder=\"Enter your phone number\" value={phone} onChange={e => setPhone(e.target.value)} leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n            </svg>} helperText=\"Auto-formatted as you type\" fullWidth />\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real-time validation with visual feedback, color-coded borders, and validation icons.'\n      }\n    }\n  }\n}",
      ...ValidationStates.parameters?.docs?.source
    }
  }
};
GlassVariants.parameters = {
  ...GlassVariants.parameters,
  docs: {
    ...GlassVariants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <LiquidInput variant=\"frosted\" label=\"Frosted Glass\" placeholder=\"Classic frosted effect\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n          </svg>} />\n      \n      <LiquidInput variant=\"clear\" label=\"Clear Glass\" placeholder=\"Ultra-minimal transparency\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n          </svg>} />\n      \n      <LiquidInput variant=\"tinted\" label=\"Tinted Glass\" placeholder=\"Subtle color tinting\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z\" />\n          </svg>} />\n      \n      <LiquidInput variant=\"dark\" label=\"Dark Glass\" placeholder=\"Dark glass variant\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n          </svg>} />\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different glass effect variants with floating labels and validation states.'\n      }\n    }\n  }\n}",
      ...GlassVariants.parameters?.docs?.source
    }
  }
};
ErrorStates.parameters = {
  ...ErrorStates.parameters,
  docs: {
    ...ErrorStates.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"space-y-6 w-96\">\n      <LiquidInput label=\"Email\" placeholder=\"Enter your email\" error=\"Please enter a valid email address\" value=\"invalid-email\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n          </svg>} fullWidth />\n      \n      <LiquidInput label=\"Password\" placeholder=\"Enter password\" type=\"password\" error=\"Password must be at least 8 characters\" value=\"123\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n          </svg>} fullWidth />\n      \n      <LiquidInput label=\"Required Field\" placeholder=\"This field is required\" error=\"This field cannot be empty\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>} fullWidth />\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Error states with validation feedback, red borders, error icons, and descriptive messages.'\n      }\n    }\n  }\n}",
      ...ErrorStates.parameters?.docs?.source
    }
  }
};
InteractiveForm.parameters = {
  ...InteractiveForm.parameters,
  docs: {
    ...InteractiveForm.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [formData, setFormData] = useState({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      website: '',\n      message: ''\n    });\n    const [showSuccess, setShowSuccess] = useState(false);\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 3000);\n    };\n    return <form onSubmit={handleSubmit} className=\"w-96 space-y-6\">\n        {showSuccess && <div className=\"p-4 bg-green-500/20 border border-green-500/30 rounded-lg text-green-300 text-sm\">\n            \u2705 Form submitted successfully!\n          </div>}\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <LiquidInput label=\"First Name\" placeholder=\"John\" value={formData.firstName} onChange={e => setFormData(prev => ({\n          ...prev,\n          firstName: e.target.value\n        }))} required />\n          \n          <LiquidInput label=\"Last Name\" placeholder=\"Doe\" value={formData.lastName} onChange={e => setFormData(prev => ({\n          ...prev,\n          lastName: e.target.value\n        }))} required />\n        </div>\n        \n        <LiquidInput type=\"email\" label=\"Email Address\" placeholder=\"john@example.com\" value={formData.email} onChange={e => setFormData(prev => ({\n        ...prev,\n        email: e.target.value\n      }))} required leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n            </svg>} fullWidth />\n        \n        <LiquidInput type=\"tel\" label=\"Phone Number\" placeholder=\"(555) 123-4567\" value={formData.phone} onChange={e => setFormData(prev => ({\n        ...prev,\n        phone: e.target.value\n      }))} leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n            </svg>} helperText=\"Auto-formatted as you type\" fullWidth />\n        \n        <LiquidInput type=\"url\" label=\"Website\" placeholder=\"https://example.com\" value={formData.website} onChange={e => setFormData(prev => ({\n        ...prev,\n        website: e.target.value\n      }))} leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9\" />\n            </svg>} helperText=\"Optional website URL\" fullWidth />\n        \n        <button type=\"submit\" className=\"w-full px-4 py-3 bg-blue-500/20 border border-blue-500/30 rounded-lg text-blue-300 font-medium hover:bg-blue-500/30 transition-colors\">\n          Submit Form\n        </button>\n      </form>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Complete interactive form with validation, auto-formatting, and real-time feedback.'\n      }\n    }\n  }\n}",
      ...InteractiveForm.parameters?.docs?.source
    }
  }
};
PresetComponents.parameters = {
  ...PresetComponents.parameters,
  docs: {
    ...PresetComponents.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Input Type Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LiquidInput.Email label=\"Email\" placeholder=\"Enter your email\" helperText=\"We'll never share your email\" />\n          \n          <LiquidInput.Password label=\"Password\" placeholder=\"Enter your password\" helperText=\"Must be at least 8 characters\" />\n          \n          <LiquidInput.Search placeholder=\"Search...\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n              </svg>} />\n          \n          <LiquidInput.Default label=\"Full Name\" placeholder=\"Enter your full name\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n              </svg>} />\n        </div>\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Style Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LiquidInput.Clear label=\"Clear Style\" placeholder=\"Minimal transparency\" />\n          \n          <LiquidInput.Default label=\"Default Style\" placeholder=\"Frosted glass effect\" />\n        </div>\n      </div>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Pre-configured input components optimized for common use cases and input types.'\n      }\n    }\n  }\n}",
      ...PresetComponents.parameters?.docs?.source
    }
  }
};
AdvancedFeatures.parameters = {
  ...AdvancedFeatures.parameters,
  docs: {
    ...AdvancedFeatures.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [value, setValue] = useState('');\n    return <div className=\"space-y-8 w-96\">\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-white\">Auto-formatting</h3>\n          <LiquidInput type=\"tel\" label=\"Phone Number\" placeholder=\"Enter phone number\" value={value} onChange={e => setValue(e.target.value)} leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n              </svg>} helperText=\"Auto-formats to (555) 123-4567\" fullWidth />\n        </div>\n        \n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-white\">Real-time Search</h3>\n          <LiquidInput type=\"search\" label=\"Search\" placeholder=\"Type to search...\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n              </svg>} rightIcon={searchTerm && <button onClick={() => setSearchTerm('')} className=\"text-gray-400 hover:text-white transition-colors\">\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>} helperText={searchTerm ? `Searching for \"${searchTerm}\"...` : 'Start typing to search'} fullWidth />\n        </div>\n        \n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-white\">Environment Blending</h3>\n          <LiquidInput label=\"Advanced Input\" placeholder=\"Environment-aware styling\" variant=\"frosted\" intensity=\"strong\" environmentBlending adaptiveOpacity leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>} helperText=\"Adapts to background colors\" fullWidth />\n        </div>\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Advanced features including auto-formatting, real-time feedback, and environment-aware styling.'\n      }\n    }\n  }\n}",
      ...AdvancedFeatures.parameters?.docs?.source
    }
  }
};
DisabledStates.parameters = {
  ...DisabledStates.parameters,
  docs: {
    ...DisabledStates.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"space-y-6 w-96\">\n      <LiquidInput label=\"Disabled Input\" placeholder=\"This input is disabled\" disabled value=\"Cannot edit this\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n          </svg>} helperText=\"This field is currently disabled\" fullWidth />\n      \n      <LiquidInput label=\"Disabled with Error\" placeholder=\"Disabled with error state\" disabled error=\"Field is disabled due to validation error\" value=\"Invalid value\" leftIcon={<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>} fullWidth />\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Disabled input states with proper styling and accessibility considerations.'\n      }\n    }\n  }\n}",
      ...DisabledStates.parameters?.docs?.source
    }
  }
};

/***/ })

}]);
//# sourceMappingURL=LiquidInput-stories.iframe.bundle.js.map