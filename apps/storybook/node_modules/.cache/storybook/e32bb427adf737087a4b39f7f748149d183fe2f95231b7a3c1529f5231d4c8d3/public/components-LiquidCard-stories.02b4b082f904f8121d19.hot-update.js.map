{"version":3,"file":"components-LiquidCard-stories.02b4b082f904f8121d19.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAqBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAQA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://@liquid-ui/storybook/../../packages/react/src/components/LiquidCard.tsx"],"sourcesContent":["import React, { forwardRef, useRef, useCallback, useState } from 'react'\nimport { clsx } from 'clsx'\nimport { useLiquidGlass } from '../hooks/useLiquidGlass'\nimport { useInteractiveGlass } from '../hooks/useInteractiveGlass'\nimport type { LiquidCardProps, LiquidCardComponent } from '../types'\n\n/**\n * LiquidCard - The signature Liquid UI component\n * \n * A beautiful glass card with Apple-style liquid glass effects, perfect physics,\n * and smooth animations. This is the cornerstone component of Liquid UI.\n */\nexport const LiquidCard = forwardRef<HTMLDivElement, LiquidCardProps>(\n  (\n    {\n      variant = 'frosted',\n      intensity = 'regular',\n      opacity = 'regular',\n      interactive = true,\n      adaptiveOpacity = false,\n      environmentBlending = false,\n      hover = true,\n      shadow = true,\n      border = true,\n      className,\n      children,\n      onHover,\n      style,\n      ...props\n    },\n    ref\n  ) => {\n    const [isHovered, setIsHovered] = useState(false)\n    const cardRef = useRef<HTMLDivElement>(null)\n    \n    // Use our custom hooks for glass effects\n    const glassStyles = useLiquidGlass({\n      variant,\n      intensity,\n      opacity,\n      interactive,\n      adaptiveOpacity,\n      environmentBlending\n    })\n    \n    const { handleMouseEnter, handleMouseLeave, handleMouseMove } = useInteractiveGlass({\n      elementRef: cardRef,\n      enabled: interactive && hover,\n      onHover: (hovered) => {\n        setIsHovered(hovered)\n        onHover?.(hovered)\n      }\n    })\n    \n    // Combine all mouse event handlers\n    const onMouseEnter = useCallback((e: React.MouseEvent) => {\n      handleMouseEnter()\n      props.onMouseEnter?.(e as any)\n    }, [handleMouseEnter, props.onMouseEnter])\n    \n    const onMouseLeave = useCallback((e: React.MouseEvent) => {\n      handleMouseLeave()\n      props.onMouseLeave?.(e as any)\n    }, [handleMouseLeave, props.onMouseLeave])\n    \n    const onMouseMove = useCallback((e: React.MouseEvent) => {\n      handleMouseMove(e as React.MouseEvent<HTMLDivElement>)\n      props.onMouseMove?.(e as any)\n    }, [handleMouseMove, props.onMouseMove])\n    \n    // Build CSS classes\n    const classes = clsx(\n      // Base glass card styles\n      'liquid-card',\n      'relative',\n      'overflow-hidden',\n      'transition-all',\n      'duration-200',\n      'ease-out',\n      \n      // Border styles\n      border && 'border border-white/10',\n      \n      // Shadow styles\n      shadow && [\n        'shadow-lg',\n        isHovered && interactive && 'shadow-xl'\n      ],\n      \n      // Interactive styles\n      interactive && [\n        'cursor-pointer',\n        'transform-gpu',\n        hover && 'hover:scale-[1.02]',\n        isHovered && 'scale-[1.02]'\n      ],\n      \n      // Custom className\n      className\n    )\n    \n    // Merge styles\n    const combinedStyles = {\n      ...glassStyles,\n      ...style\n    }\n    \n    return (\n      <div\n        ref={(node: HTMLDivElement | null) => {\n          // Handle both forwarded ref and internal ref\n          if (typeof ref === 'function') {\n            ref(node)\n          } else if (ref) {\n            (ref as React.MutableRefObject<HTMLDivElement | null>).current = node\n          }\n          if (cardRef.current !== node) {\n            (cardRef as React.MutableRefObject<HTMLDivElement | null>).current = node\n          }\n        }}\n        className={classes}\n        style={combinedStyles}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onMouseMove={onMouseMove}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nLiquidCard.displayName = 'LiquidCard'\n\n// Preset components for easier usage\nLiquidCard.Frosted = forwardRef<HTMLDivElement, Omit<LiquidCardProps, 'variant' | 'intensity' | 'interactive' | 'hover' | 'shadow'>>((props, ref) => (\n  <LiquidCard\n    ref={ref}\n    variant=\"frosted\"\n    intensity=\"regular\"\n    interactive\n    hover\n    shadow\n    {...props}\n  />\n))\nLiquidCard.Frosted.displayName = 'LiquidCard.Frosted'\n\nLiquidCard.Clear = forwardRef<HTMLDivElement, Omit<LiquidCardProps, 'variant' | 'opacity' | 'interactive' | 'hover'>>((props, ref) => (\n  <LiquidCard\n    ref={ref}\n    variant=\"clear\"\n    opacity=\"light\"\n    interactive\n    hover\n    {...props}\n  />\n))\nLiquidCard.Clear.displayName = 'LiquidCard.Clear'\n\nLiquidCard.Tinted = forwardRef<HTMLDivElement, Omit<LiquidCardProps, 'variant' | 'intensity' | 'interactive' | 'hover' | 'shadow'>>((props, ref) => (\n  <LiquidCard\n    ref={ref}\n    variant=\"tinted\"\n    intensity=\"regular\"\n    interactive\n    hover\n    shadow\n    {...props}\n  />\n))\nLiquidCard.Tinted.displayName = 'LiquidCard.Tinted'\n\nLiquidCard.Interactive = forwardRef<HTMLDivElement, Omit<LiquidCardProps, 'interactive' | 'hover' | 'shadow' | 'border'>>((props, ref) => (\n  <LiquidCard\n    ref={ref}\n    interactive\n    hover\n    shadow\n    border\n    {...props}\n  />\n))\nLiquidCard.Interactive.displayName = 'LiquidCard.Interactive'\n\nLiquidCard.Static = forwardRef<HTMLDivElement, Omit<LiquidCardProps, 'interactive' | 'hover' | 'shadow'>>((props, ref) => (\n  <LiquidCard\n    ref={ref}\n    interactive={false}\n    hover={false}\n    shadow={false}\n    {...props}\n  />\n))\nLiquidCard.Static.displayName = 'LiquidCard.Static'"],"names":[],"sourceRoot":""}