"use strict";
(self["webpackChunk_liquid_ui_storybook"] = self["webpackChunk_liquid_ui_storybook"] || []).push([["LiquidCard-stories"],{

/***/ "../../packages/react/src/components/LiquidModal.tsx":
/*!***********************************************************!*\
  !*** ../../packages/react/src/components/LiquidModal.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidModal: () => (/* binding */ LiquidModal)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ "../../node_modules/clsx/dist/clsx.mjs");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");




/**
 * LiquidModal - Glass modal and overlay component
 * 
 * A beautiful modal with liquid glass effects, perfect for dialogs and overlays.
 * Includes backdrop blur, keyboard navigation, and accessibility features.
 */ const LiquidModal = ({ open, onClose, title, showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, size = 'md', centered = true, variant = 'frosted', intensity = 'strong', opacity = 'regular', interactive = false, adaptiveOpacity = false, environmentBlending = true, className, children })=>{
    const modalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const backdropRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    // Generate glass styles for the modal content
    const glassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant,
        intensity,
        opacity,
        interactive,
        adaptiveOpacity,
        environmentBlending
    });
    // Generate backdrop glass styles
    const backdropGlassStyles = (0,_hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_3__.useLiquidGlass)({
        variant: 'dark',
        intensity: 'regular',
        opacity: 'light',
        interactive: false,
        adaptiveOpacity: false,
        environmentBlending: true
    });
    // Size classes
    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl'
    };
    // Handle escape key
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open || !closeOnEscape) return;
        const handleKeyDown = (e)=>{
            if (e.key === 'Escape') {
                onClose();
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown);
    }, [
        open,
        closeOnEscape,
        onClose
    ]);
    // Handle focus management
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const previousActiveElement = document.activeElement;
        // Focus the modal when opened
        if (modalRef.current) {
            modalRef.current.focus();
        }
        // Restore focus when closed
        return ()=>{
            if (previousActiveElement && previousActiveElement.focus) {
                previousActiveElement.focus();
            }
        };
    }, [
        open
    ]);
    // Handle body scroll lock
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!open) return;
        const originalStyle = window.getComputedStyle(document.body).overflow;
        document.body.style.overflow = 'hidden';
        return ()=>{
            document.body.style.overflow = originalStyle;
        };
    }, [
        open
    ]);
    // Handle backdrop click
    const handleBackdropClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        if (closeOnBackdropClick && e.target === backdropRef.current) {
            onClose();
        }
    }, [
        closeOnBackdropClick,
        onClose
    ]);
    // Handle close button click
    const handleCloseClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        onClose();
    }, [
        onClose
    ]);
    if (!open) return null;
    const modalContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: backdropRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal-backdrop', 'fixed', 'inset-0', 'z-50', 'flex', 'items-center', 'justify-center', 'p-4', 'min-h-screen', centered ? 'items-center' : 'items-start pt-16'),
        style: backdropGlassStyles,
        onClick: handleBackdropClick
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        ref: modalRef,
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('liquid-modal', 'relative', 'w-full', sizeClasses[size], 'max-h-[90vh]', 'overflow-hidden', 'rounded-xl', 'border', 'border-white/10', 'shadow-2xl', 'transform', 'transition-all', 'duration-300', 'ease-out', 'animate-in', 'fade-in-0', 'zoom-in-95', className),
        style: glassStyles,
        tabIndex: -1,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": title ? 'modal-title' : undefined
    }, (title || showCloseButton) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
    }, title && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("h2", {
        id: "modal-title",
        className: "text-lg font-semibold text-white"
    }, title), showCloseButton && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        type: "button",
        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('flex', 'items-center', 'justify-center', 'w-8', 'h-8', 'rounded-full', 'text-gray-400', 'hover:text-white', 'hover:bg-white/10', 'transition-colors', 'duration-200'),
        onClick: handleCloseClick,
        "aria-label": "Close modal"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
        className: "w-4 h-4",
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24"
    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6 18L18 6M6 6l12 12"
    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
        className: "liquid-modal-content overflow-y-auto max-h-full"
    }, children)));
    // Render modal in a portal
    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(modalContent, document.body);
};
LiquidModal.displayName = 'LiquidModal';

try {
    // @ts-ignore
    LiquidModal.displayName = "LiquidModal";
    // @ts-ignore
    LiquidModal.__docgenInfo = { "description": "LiquidModal - Glass modal and overlay component\n\nA beautiful modal with liquid glass effects, perfect for dialogs and overlays.\nIncludes backdrop blur, keyboard navigation, and accessibility features.", "displayName": "LiquidModal", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["../../packages/react/src/components/LiquidModal.tsx#LiquidModal"] = { docgenInfo: LiquidModal.__docgenInfo, name: "LiquidModal", path: "../../packages/react/src/components/LiquidModal.tsx#LiquidModal" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "../../packages/react/src/hooks/useAdaptiveGlass.ts":
/*!**********************************************************!*\
  !*** ../../packages/react/src/hooks/useAdaptiveGlass.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useAdaptiveGlass: () => (/* binding */ useAdaptiveGlass)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liquid-ui/core */ "../../packages/core/src/index.ts");


/**
 * useAdaptiveGlass - Hook for adaptive glass effects based on background
 * 
 * This hook analyzes the background behind the glass element and adjusts
 * opacity and tint automatically for optimal visual contrast and readability.
 */ function useAdaptiveGlass({ elementRef, config, enabled = true, debounceMs = 100 }) {
    const [adaptiveStyles, setAdaptiveStyles] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
    const [backgroundLuminance, setBackgroundLuminance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0.5);
    // Analyze background and calculate adaptive styles
    const analyzeBackground = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.debounce)(()=>{
        if (!enabled || !elementRef.current) return;
        const element = elementRef.current;
        const computedStyle = window.getComputedStyle(element.parentElement || element);
        const backgroundColor = computedStyle.backgroundColor;
        // Parse background color and calculate luminance
        const colorData = (0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.parseColor)(backgroundColor);
        if (colorData) {
            const luminance = (0,_liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.calculateLuminance)(colorData.r, colorData.g, colorData.b);
            setBackgroundLuminance(luminance);
            // Generate adaptive background using the engine
            const engine = _liquid_ui_core__WEBPACK_IMPORTED_MODULE_1__.LiquidGlassEngine.getInstance();
            const adaptiveBackground = engine.getAdaptiveBackground(config, luminance);
            setAdaptiveStyles({
                background: adaptiveBackground,
                // Adjust border opacity based on background
                borderColor: luminance > 0.5 ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)'
            });
        }
    }, debounceMs), [
        enabled,
        elementRef,
        config,
        debounceMs
    ]);
    // Set up intersection observer to detect background changes
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!enabled || !elementRef.current) return;
        const element = elementRef.current;
        // Initial analysis
        analyzeBackground();
        // Create mutation observer to watch for style changes
        const observer = new MutationObserver((mutations)=>{
            const hasStyleChanges = mutations.some((mutation)=>mutation.type === 'attributes' && mutation.attributeName === 'style');
            if (hasStyleChanges) {
                analyzeBackground();
            }
        });
        // Observe parent elements for style changes
        let currentElement = element.parentElement;
        while(currentElement){
            observer.observe(currentElement, {
                attributes: true,
                attributeFilter: [
                    'style',
                    'class'
                ]
            });
            currentElement = currentElement.parentElement;
        }
        // Also listen for window resize (might change background)
        window.addEventListener('resize', analyzeBackground);
        return ()=>{
            observer.disconnect();
            window.removeEventListener('resize', analyzeBackground);
        };
    }, [
        enabled,
        elementRef,
        analyzeBackground
    ]);
    // Re-analyze when config changes
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (enabled) {
            analyzeBackground();
        }
    }, [
        config,
        analyzeBackground,
        enabled
    ]);
    return {
        adaptiveStyles,
        backgroundLuminance,
        reanalyze: analyzeBackground
    };
}


/***/ }),

/***/ "../../packages/react/src/index.ts":
/*!*****************************************!*\
  !*** ../../packages/react/src/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiquidButton: () => (/* reexport safe */ _components_LiquidButton__WEBPACK_IMPORTED_MODULE_1__.LiquidButton),
/* harmony export */   LiquidCard: () => (/* reexport safe */ _components_LiquidCard__WEBPACK_IMPORTED_MODULE_0__.LiquidCard),
/* harmony export */   LiquidInput: () => (/* reexport safe */ _components_LiquidInput__WEBPACK_IMPORTED_MODULE_2__.LiquidInput),
/* harmony export */   LiquidModal: () => (/* reexport safe */ _components_LiquidModal__WEBPACK_IMPORTED_MODULE_3__.LiquidModal),
/* harmony export */   useAdaptiveGlass: () => (/* reexport safe */ _hooks_useAdaptiveGlass__WEBPACK_IMPORTED_MODULE_6__.useAdaptiveGlass),
/* harmony export */   useInteractiveGlass: () => (/* reexport safe */ _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_5__.useInteractiveGlass),
/* harmony export */   useLiquidGlass: () => (/* reexport safe */ _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_4__.useLiquidGlass)
/* harmony export */ });
/* harmony import */ var _components_LiquidCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/LiquidCard */ "../../packages/react/src/components/LiquidCard.tsx");
/* harmony import */ var _components_LiquidButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/LiquidButton */ "../../packages/react/src/components/LiquidButton.tsx");
/* harmony import */ var _components_LiquidInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/LiquidInput */ "../../packages/react/src/components/LiquidInput.tsx");
/* harmony import */ var _components_LiquidModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/LiquidModal */ "../../packages/react/src/components/LiquidModal.tsx");
/* harmony import */ var _hooks_useLiquidGlass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useLiquidGlass */ "../../packages/react/src/hooks/useLiquidGlass.ts");
/* harmony import */ var _hooks_useInteractiveGlass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useInteractiveGlass */ "../../packages/react/src/hooks/useInteractiveGlass.ts");
/* harmony import */ var _hooks_useAdaptiveGlass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useAdaptiveGlass */ "../../packages/react/src/hooks/useAdaptiveGlass.ts");
// Components




// Hooks





/***/ }),

/***/ "./src/stories/LiquidCard.stories.tsx":
/*!********************************************!*\
  !*** ./src/stories/LiquidCard.stories.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedCustomization: () => (/* binding */ AdvancedCustomization),
/* harmony export */   ContentShowcase: () => (/* binding */ ContentShowcase),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   GlassVariants: () => (/* binding */ GlassVariants),
/* harmony export */   InteractivePlayground: () => (/* binding */ InteractivePlayground),
/* harmony export */   MagneticEffects: () => (/* binding */ MagneticEffects),
/* harmony export */   PresetComponents: () => (/* binding */ PresetComponents),
/* harmony export */   ShadowDepth: () => (/* binding */ ShadowDepth),
/* harmony export */   WithDragAndDrop: () => (/* binding */ WithDragAndDrop),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liquid-ui/react */ "../../packages/react/src/index.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


const meta = {
  title: 'Components/LiquidCard',
  component: _liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: `
The LiquidCard is a beautiful glass card component with liquid glass effects, drag & drop support, and magnetic edges inspired by the LiquidModal design patterns.

## Features
- **Drag & Drop Support**: Native drag events with glass distortion and 3D transforms
- **Magnetic Edges**: Subtle attraction effects near cursor with visual feedback
- **Dynamic Shadows**: Depth-aware shadows that respond to interactions
- **Gesture Recognition**: Mouse and touch support for all interactions
- **Auto-layout**: Smart content adaptation and overflow handling
- **Glass Effects**: Multiple variants with customizable intensity and opacity
        `
      }
    }
  },
  argTypes: {
    variant: {
      control: {
        type: 'select'
      },
      options: ['frosted', 'clear', 'tinted', 'dark'],
      description: 'Glass effect variant'
    },
    intensity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'strong'],
      description: 'Blur intensity'
    },
    opacity: {
      control: {
        type: 'select'
      },
      options: ['light', 'regular', 'strong'],
      description: 'Background opacity'
    },
    interactive: {
      control: 'boolean',
      description: 'Enable interactive glass effects'
    },
    adaptiveOpacity: {
      control: 'boolean',
      description: 'Adaptive opacity based on content'
    },
    environmentBlending: {
      control: 'boolean',
      description: 'Environment color blending'
    },
    hover: {
      control: 'boolean',
      description: 'Enable hover effects'
    },
    shadow: {
      control: 'boolean',
      description: 'Enable shadows'
    },
    border: {
      control: 'boolean',
      description: 'Enable borders'
    },
    draggable: {
      control: 'boolean',
      description: 'Enable drag and drop'
    },
    magneticEdges: {
      control: 'boolean',
      description: 'Enable magnetic edge effects'
    },
    magneticStrength: {
      control: {
        type: 'range',
        min: 0,
        max: 1,
        step: 0.1
      },
      description: 'Magnetic effect strength'
    }
  },
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Basic Examples
const Default = {
  args: {
    children: /*#__PURE__*/React.createElement("div", {
      className: "p-6"
    }, /*#__PURE__*/React.createElement("h3", {
      className: "text-xl font-semibold text-white mb-2"
    }, "Default Card"), /*#__PURE__*/React.createElement("p", {
      className: "text-gray-300"
    }, "A beautiful glass card with default settings.")),
    variant: 'frosted',
    intensity: 'regular',
    opacity: 'regular',
    interactive: true,
    hover: true,
    shadow: true,
    border: true
  }
};
const WithDragAndDrop = {
  args: {
    children: /*#__PURE__*/React.createElement("div", {
      className: "p-6"
    }, /*#__PURE__*/React.createElement("h3", {
      className: "text-xl font-semibold text-white mb-2"
    }, "Draggable Card"), /*#__PURE__*/React.createElement("p", {
      className: "text-gray-300 mb-4"
    }, "Click and drag me around! Notice the 3D effects and shadows."), /*#__PURE__*/React.createElement("div", {
      className: "text-sm text-blue-200"
    }, "✨ Drag indicator appears on hover")),
    variant: 'frosted',
    intensity: 'regular',
    interactive: true,
    hover: true,
    shadow: true,
    border: true,
    draggable: true
  },
  parameters: {
    docs: {
      description: {
        story: 'Drag this card around to see the beautiful 3D transforms, enhanced shadows, and glass distortion effects.'
      }
    }
  }
};
// Glass Variants
const GlassVariants = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-2 gap-6"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "frosted",
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "Frosted"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Classic frosted glass effect")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "clear",
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "Clear"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Ultra-minimal transparency")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "tinted",
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "Tinted"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Subtle color tinting")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "dark",
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "Dark"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Dark glass variant"))),
  parameters: {
    docs: {
      description: {
        story: 'Different glass effect variants, each with enhanced hover and depth effects.'
      }
    }
  }
};
// Magnetic Effects
const MagneticEffects = {
  render: () => {
    const [magneticStrength, setMagneticStrength] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0.3);
    return /*#__PURE__*/React.createElement("div", {
      className: "space-y-6"
    }, /*#__PURE__*/React.createElement("div", {
      className: "text-center"
    }, /*#__PURE__*/React.createElement("label", {
      className: "block text-sm font-medium text-gray-300 mb-2"
    }, "Magnetic Strength: ", magneticStrength), /*#__PURE__*/React.createElement("input", {
      type: "range",
      min: "0",
      max: "1",
      step: "0.1",
      value: magneticStrength,
      onChange: e => setMagneticStrength(parseFloat(e.target.value)),
      className: "w-48"
    })), /*#__PURE__*/React.createElement("div", {
      className: "grid grid-cols-1 md:grid-cols-2 gap-6"
    }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
      variant: "frosted",
      magneticEdges: true,
      magneticStrength: magneticStrength,
      className: "p-6"
    }, /*#__PURE__*/React.createElement("h4", {
      className: "text-lg font-semibold text-white mb-2"
    }, "Magnetic Card"), /*#__PURE__*/React.createElement("p", {
      className: "text-gray-300 text-sm"
    }, "Hover near me and feel the magnetic attraction! The closer you get, the stronger the pull.")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
      variant: "tinted",
      magneticEdges: true,
      magneticStrength: magneticStrength,
      draggable: true,
      className: "p-6"
    }, /*#__PURE__*/React.createElement("h4", {
      className: "text-lg font-semibold text-white mb-2"
    }, "Magnetic + Draggable"), /*#__PURE__*/React.createElement("p", {
      className: "text-gray-300 text-sm"
    }, "Combines magnetic effects with drag functionality for ultimate interactivity."))));
  },
  parameters: {
    docs: {
      description: {
        story: 'Magnetic edge effects that respond to cursor proximity with visual feedback and color shifts.'
      }
    }
  }
};
// Interactive Playground
const InteractivePlayground = {
  render: () => {
    const [dragEvents, setDragEvents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
    const [hoverCount, setHoverCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);
    const addEvent = event => {
      setDragEvents(prev => [...prev.slice(-4), `${new Date().toLocaleTimeString()}: ${event}`]);
    };
    return /*#__PURE__*/React.createElement("div", {
      className: "space-y-6"
    }, /*#__PURE__*/React.createElement("div", {
      className: "grid grid-cols-1 md:grid-cols-2 gap-6"
    }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
      variant: "frosted",
      draggable: true,
      magneticEdges: true,
      magneticStrength: 0.5,
      className: "p-6 min-h-[200px]",
      onDragStart: () => addEvent('Drag started'),
      onDrag: (_, pos) => addEvent(`Dragging (${Math.round(pos.x)}, ${Math.round(pos.y)})`),
      onDragEnd: () => addEvent('Drag ended'),
      onHover: hovered => {
        if (hovered) setHoverCount(c => c + 1);
        addEvent(hovered ? 'Hover enter' : 'Hover leave');
      }
    }, /*#__PURE__*/React.createElement("h4", {
      className: "text-lg font-semibold text-white mb-2"
    }, "Interactive Playground"), /*#__PURE__*/React.createElement("p", {
      className: "text-gray-300 text-sm mb-4"
    }, "Drag me around and watch the event log!"), /*#__PURE__*/React.createElement("div", {
      className: "text-xs text-blue-200"
    }, "Hovers: ", hoverCount)), /*#__PURE__*/React.createElement("div", {
      className: "space-y-4"
    }, /*#__PURE__*/React.createElement("h5", {
      className: "text-lg font-semibold text-white"
    }, "Event Log"), /*#__PURE__*/React.createElement("div", {
      className: "bg-black/30 rounded-lg p-4 font-mono text-xs"
    }, dragEvents.length === 0 ? /*#__PURE__*/React.createElement("div", {
      className: "text-gray-500"
    }, "No events yet...") : dragEvents.map((event, i) => /*#__PURE__*/React.createElement("div", {
      key: i,
      className: "text-gray-300"
    }, event))))));
  },
  parameters: {
    docs: {
      description: {
        story: 'Interactive playground showing all drag and hover events with real-time feedback.'
      }
    }
  }
};
// Shadow Depth Showcase
const ShadowDepth = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-3 gap-6"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "frosted",
    shadow: false,
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "No Shadow"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Clean, flat appearance")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "frosted",
    shadow: true,
    hover: true,
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "Hover Shadow"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Dynamic shadow on hover")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard, {
    variant: "frosted",
    shadow: true,
    draggable: true,
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "text-lg font-semibold text-white"
  }, "Drag Shadow"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Enhanced shadow when dragging"))),
  parameters: {
    docs: {
      description: {
        story: 'Showcase of dynamic shadow depths that respond to different interaction states.'
      }
    }
  }
};
// Preset Components
const PresetComponents = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "space-y-8"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold mb-4 text-white"
  }, "Style Presets"), /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-3 gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Frosted, {
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white"
  }, "Frosted Preset"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Pre-configured frosted glass")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Clear, {
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white"
  }, "Clear Preset"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Ultra-minimal transparency")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Tinted, {
    className: "p-4"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white"
  }, "Tinted Preset"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Subtle color tinting")))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold mb-4 text-white"
  }, "Behavior Presets"), /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 gap-4"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Interactive, {
    className: "p-6"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white mb-2"
  }, "Interactive Preset"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Full interactivity with hover, shadow, and border effects")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Static, {
    className: "p-6"
  }, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white mb-2"
  }, "Static Preset"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Pure display card without interactive effects"))))),
  parameters: {
    docs: {
      description: {
        story: 'Pre-configured card components with optimized settings for common use cases.'
      }
    }
  }
};
// Content Showcase
const ContentShowcase = {
  render: () => /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
  }, /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Frosted, {
    className: "p-6 space-y-4",
    draggable: true
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-3"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "w-6 h-6 text-white",
    fill: "none",
    stroke: "currentColor",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M13 10V3L4 14h7v7l9-11h-7z"
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white"
  }, "Performance"), /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-400"
  }, "60fps smooth"))), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Optimized rendering with hardware acceleration and efficient updates.")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Clear, {
    className: "p-6 space-y-4",
    magneticEdges: true
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-3"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-12 h-12 bg-green-500 rounded-full flex items-center justify-center"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "w-6 h-6 text-white",
    fill: "none",
    stroke: "currentColor",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white"
  }, "Accessible"), /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-400"
  }, "WCAG compliant"))), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Built with accessibility in mind, supporting keyboard navigation and screen readers.")), /*#__PURE__*/React.createElement(_liquid_ui_react__WEBPACK_IMPORTED_MODULE_0__.LiquidCard.Tinted, {
    className: "p-6 space-y-4",
    draggable: true,
    magneticEdges: true
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-3"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "w-6 h-6 text-white",
    fill: "none",
    stroke: "currentColor",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h4", {
    className: "font-semibold text-white"
  }, "Responsive"), /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-400"
  }, "Mobile ready"))), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300 text-sm"
  }, "Touch-friendly with gesture support and responsive design principles."))),
  parameters: {
    docs: {
      description: {
        story: 'Real-world content examples showcasing different features and combinations.'
      }
    }
  }
};
// Advanced Customization
const AdvancedCustomization = {
  args: {
    children: /*#__PURE__*/React.createElement("div", {
      className: "p-8 space-y-4"
    }, /*#__PURE__*/React.createElement("h3", {
      className: "text-2xl font-bold text-white"
    }, "Advanced Card"), /*#__PURE__*/React.createElement("p", {
      className: "text-gray-300"
    }, "This card combines all advanced features: drag & drop, magnetic edges, environment blending, and adaptive opacity."), /*#__PURE__*/React.createElement("div", {
      className: "flex flex-wrap gap-2"
    }, ['Draggable', 'Magnetic', 'Adaptive', 'Blended'].map(tag => /*#__PURE__*/React.createElement("span", {
      key: tag,
      className: "px-2 py-1 bg-white/10 rounded text-xs text-gray-300"
    }, tag)))),
    variant: 'frosted',
    intensity: 'strong',
    opacity: 'light',
    interactive: true,
    adaptiveOpacity: true,
    environmentBlending: true,
    hover: true,
    shadow: true,
    border: true,
    draggable: true,
    magneticEdges: true,
    magneticStrength: 0.6,
    className: 'border-2 border-blue-500/30 shadow-2xl shadow-blue-500/20'
  },
  parameters: {
    docs: {
      description: {
        story: 'Advanced customization combining all features with custom styling and maximum interactivity.'
      }
    }
  }
};
;
const __namedExportsOrder = ["Default", "WithDragAndDrop", "GlassVariants", "MagneticEffects", "InteractivePlayground", "ShadowDepth", "PresetComponents", "ContentShowcase", "AdvancedCustomization"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    children: <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold text-white mb-2\">Default Card</h3>\n        <p className=\"text-gray-300\">A beautiful glass card with default settings.</p>\n      </div>,\n    variant: 'frosted',\n    intensity: 'regular',\n    opacity: 'regular',\n    interactive: true,\n    hover: true,\n    shadow: true,\n    border: true\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
WithDragAndDrop.parameters = {
  ...WithDragAndDrop.parameters,
  docs: {
    ...WithDragAndDrop.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    children: <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold text-white mb-2\">Draggable Card</h3>\n        <p className=\"text-gray-300 mb-4\">Click and drag me around! Notice the 3D effects and shadows.</p>\n        <div className=\"text-sm text-blue-200\">\n          \u2728 Drag indicator appears on hover\n        </div>\n      </div>,\n    variant: 'frosted',\n    intensity: 'regular',\n    interactive: true,\n    hover: true,\n    shadow: true,\n    border: true,\n    draggable: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Drag this card around to see the beautiful 3D transforms, enhanced shadows, and glass distortion effects.'\n      }\n    }\n  }\n}",
      ...WithDragAndDrop.parameters?.docs?.source
    }
  }
};
GlassVariants.parameters = {
  ...GlassVariants.parameters,
  docs: {
    ...GlassVariants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"grid grid-cols-2 gap-6\">\n      <LiquidCard variant=\"frosted\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Frosted</h4>\n        <p className=\"text-gray-300 text-sm\">Classic frosted glass effect</p>\n      </LiquidCard>\n      <LiquidCard variant=\"clear\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Clear</h4>\n        <p className=\"text-gray-300 text-sm\">Ultra-minimal transparency</p>\n      </LiquidCard>\n      <LiquidCard variant=\"tinted\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Tinted</h4>\n        <p className=\"text-gray-300 text-sm\">Subtle color tinting</p>\n      </LiquidCard>\n      <LiquidCard variant=\"dark\" className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Dark</h4>\n        <p className=\"text-gray-300 text-sm\">Dark glass variant</p>\n      </LiquidCard>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different glass effect variants, each with enhanced hover and depth effects.'\n      }\n    }\n  }\n}",
      ...GlassVariants.parameters?.docs?.source
    }
  }
};
MagneticEffects.parameters = {
  ...MagneticEffects.parameters,
  docs: {
    ...MagneticEffects.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [magneticStrength, setMagneticStrength] = useState(0.3);\n    return <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n            Magnetic Strength: {magneticStrength}\n          </label>\n          <input type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value={magneticStrength} onChange={e => setMagneticStrength(parseFloat(e.target.value))} className=\"w-48\" />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <LiquidCard variant=\"frosted\" magneticEdges magneticStrength={magneticStrength} className=\"p-6\">\n            <h4 className=\"text-lg font-semibold text-white mb-2\">Magnetic Card</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Hover near me and feel the magnetic attraction! The closer you get, the stronger the pull.\n            </p>\n          </LiquidCard>\n          \n          <LiquidCard variant=\"tinted\" magneticEdges magneticStrength={magneticStrength} draggable className=\"p-6\">\n            <h4 className=\"text-lg font-semibold text-white mb-2\">Magnetic + Draggable</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Combines magnetic effects with drag functionality for ultimate interactivity.\n            </p>\n          </LiquidCard>\n        </div>\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Magnetic edge effects that respond to cursor proximity with visual feedback and color shifts.'\n      }\n    }\n  }\n}",
      ...MagneticEffects.parameters?.docs?.source
    }
  }
};
InteractivePlayground.parameters = {
  ...InteractivePlayground.parameters,
  docs: {
    ...InteractivePlayground.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => {\n    const [dragEvents, setDragEvents] = useState<string[]>([]);\n    const [hoverCount, setHoverCount] = useState(0);\n    const addEvent = (event: string) => {\n      setDragEvents(prev => [...prev.slice(-4), `${new Date().toLocaleTimeString()}: ${event}`]);\n    };\n    return <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <LiquidCard variant=\"frosted\" draggable magneticEdges magneticStrength={0.5} className=\"p-6 min-h-[200px]\" onDragStart={() => addEvent('Drag started')} onDrag={(_, pos) => addEvent(`Dragging (${Math.round(pos.x)}, ${Math.round(pos.y)})`)} onDragEnd={() => addEvent('Drag ended')} onHover={hovered => {\n          if (hovered) setHoverCount(c => c + 1);\n          addEvent(hovered ? 'Hover enter' : 'Hover leave');\n        }}>\n            <h4 className=\"text-lg font-semibold text-white mb-2\">\n              Interactive Playground\n            </h4>\n            <p className=\"text-gray-300 text-sm mb-4\">\n              Drag me around and watch the event log!\n            </p>\n            <div className=\"text-xs text-blue-200\">\n              Hovers: {hoverCount}\n            </div>\n          </LiquidCard>\n          \n          <div className=\"space-y-4\">\n            <h5 className=\"text-lg font-semibold text-white\">Event Log</h5>\n            <div className=\"bg-black/30 rounded-lg p-4 font-mono text-xs\">\n              {dragEvents.length === 0 ? <div className=\"text-gray-500\">No events yet...</div> : dragEvents.map((event, i) => <div key={i} className=\"text-gray-300\">{event}</div>)}\n            </div>\n          </div>\n        </div>\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive playground showing all drag and hover events with real-time feedback.'\n      }\n    }\n  }\n}",
      ...InteractivePlayground.parameters?.docs?.source
    }
  }
};
ShadowDepth.parameters = {
  ...ShadowDepth.parameters,
  docs: {
    ...ShadowDepth.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n      <LiquidCard variant=\"frosted\" shadow={false} className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">No Shadow</h4>\n        <p className=\"text-gray-300 text-sm\">Clean, flat appearance</p>\n      </LiquidCard>\n      \n      <LiquidCard variant=\"frosted\" shadow hover className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Hover Shadow</h4>\n        <p className=\"text-gray-300 text-sm\">Dynamic shadow on hover</p>\n      </LiquidCard>\n      \n      <LiquidCard variant=\"frosted\" shadow draggable className=\"p-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Drag Shadow</h4>\n        <p className=\"text-gray-300 text-sm\">Enhanced shadow when dragging</p>\n      </LiquidCard>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Showcase of dynamic shadow depths that respond to different interaction states.'\n      }\n    }\n  }\n}",
      ...ShadowDepth.parameters?.docs?.source
    }
  }
};
PresetComponents.parameters = {
  ...PresetComponents.parameters,
  docs: {
    ...PresetComponents.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Style Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <LiquidCard.Frosted className=\"p-4\">\n            <h4 className=\"font-semibold text-white\">Frosted Preset</h4>\n            <p className=\"text-gray-300 text-sm\">Pre-configured frosted glass</p>\n          </LiquidCard.Frosted>\n          \n          <LiquidCard.Clear className=\"p-4\">\n            <h4 className=\"font-semibold text-white\">Clear Preset</h4>\n            <p className=\"text-gray-300 text-sm\">Ultra-minimal transparency</p>\n          </LiquidCard.Clear>\n          \n          <LiquidCard.Tinted className=\"p-4\">\n            <h4 className=\"font-semibold text-white\">Tinted Preset</h4>\n            <p className=\"text-gray-300 text-sm\">Subtle color tinting</p>\n          </LiquidCard.Tinted>\n        </div>\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-white\">Behavior Presets</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LiquidCard.Interactive className=\"p-6\">\n            <h4 className=\"font-semibold text-white mb-2\">Interactive Preset</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Full interactivity with hover, shadow, and border effects\n            </p>\n          </LiquidCard.Interactive>\n          \n          <LiquidCard.Static className=\"p-6\">\n            <h4 className=\"font-semibold text-white mb-2\">Static Preset</h4>\n            <p className=\"text-gray-300 text-sm\">\n              Pure display card without interactive effects\n            </p>\n          </LiquidCard.Static>\n        </div>\n      </div>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Pre-configured card components with optimized settings for common use cases.'\n      }\n    }\n  }\n}",
      ...PresetComponents.parameters?.docs?.source
    }
  }
};
ContentShowcase.parameters = {
  ...ContentShowcase.parameters,
  docs: {
    ...ContentShowcase.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <LiquidCard.Frosted className=\"p-6 space-y-4\" draggable>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white\">Performance</h4>\n            <p className=\"text-sm text-gray-400\">60fps smooth</p>\n          </div>\n        </div>\n        <p className=\"text-gray-300 text-sm\">\n          Optimized rendering with hardware acceleration and efficient updates.\n        </p>\n      </LiquidCard.Frosted>\n      \n      <LiquidCard.Clear className=\"p-6 space-y-4\" magneticEdges>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white\">Accessible</h4>\n            <p className=\"text-sm text-gray-400\">WCAG compliant</p>\n          </div>\n        </div>\n        <p className=\"text-gray-300 text-sm\">\n          Built with accessibility in mind, supporting keyboard navigation and screen readers.\n        </p>\n      </LiquidCard.Clear>\n      \n      <LiquidCard.Tinted className=\"p-6 space-y-4\" draggable magneticEdges>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z\" />\n            </svg>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white\">Responsive</h4>\n            <p className=\"text-sm text-gray-400\">Mobile ready</p>\n          </div>\n        </div>\n        <p className=\"text-gray-300 text-sm\">\n          Touch-friendly with gesture support and responsive design principles.\n        </p>\n      </LiquidCard.Tinted>\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real-world content examples showcasing different features and combinations.'\n      }\n    }\n  }\n}",
      ...ContentShowcase.parameters?.docs?.source
    }
  }
};
AdvancedCustomization.parameters = {
  ...AdvancedCustomization.parameters,
  docs: {
    ...AdvancedCustomization.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    children: <div className=\"p-8 space-y-4\">\n        <h3 className=\"text-2xl font-bold text-white\">Advanced Card</h3>\n        <p className=\"text-gray-300\">\n          This card combines all advanced features: drag & drop, magnetic edges, \n          environment blending, and adaptive opacity.\n        </p>\n        <div className=\"flex flex-wrap gap-2\">\n          {['Draggable', 'Magnetic', 'Adaptive', 'Blended'].map(tag => <span key={tag} className=\"px-2 py-1 bg-white/10 rounded text-xs text-gray-300\">\n              {tag}\n            </span>)}\n        </div>\n      </div>,\n    variant: 'frosted',\n    intensity: 'strong',\n    opacity: 'light',\n    interactive: true,\n    adaptiveOpacity: true,\n    environmentBlending: true,\n    hover: true,\n    shadow: true,\n    border: true,\n    draggable: true,\n    magneticEdges: true,\n    magneticStrength: 0.6,\n    className: 'border-2 border-blue-500/30 shadow-2xl shadow-blue-500/20'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Advanced customization combining all features with custom styling and maximum interactivity.'\n      }\n    }\n  }\n}",
      ...AdvancedCustomization.parameters?.docs?.source
    }
  }
};

/***/ })

}]);
//# sourceMappingURL=LiquidCard-stories.iframe.bundle.js.map