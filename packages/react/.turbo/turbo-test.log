
> @liquid-ui/react@0.1.0 test
> vitest --coverage --passWithNoTests

[33mThe CJS build of Vite's Node API is deprecated. See https://vite.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.[39m

 DEV  v1.6.1 /Users/memo/projects/liquid-ui/packages/react
      Coverage enabled with v8

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle click events
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 14 failed) 1198ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with different intensity levels
     → expect(element).toHaveClass("backdrop-blur-sm")

Expected the element to have class:
  backdrop-blur-sm
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Input Types > should render text input by default
     → expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
     → expect(element).toHaveClass("focus-within:ring-2")

Expected the element to have class:
  focus-within:ring-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
     → expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
     → expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
     → expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
     → expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
        />,
        "timeStamp": 1757841720598,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
     → Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 8 failed) 1606ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
     → expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
     → expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 5 failed) 2148ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should render within performance budget
     → expected 17.472792000000027 to be less than 16
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should show focus indicators
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Accessibility > should support keyboard navigation
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidButton.test.tsx  (27 tests | 3 failed) 4491ms
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
     → expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"

⎯⎯⎯⎯⎯⎯ Failed Tests 30 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
 ❯ src/components/__tests__/LiquidButton.test.tsx:24:22
     22|       const button = screen.getByRole('button', { name: 'Click me' })
     23|       expect(button).toBeInTheDocument()
     24|       expect(button).toHaveAttribute('type', 'button')
       |                      ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/30]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidButton.test.tsx:31:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/30]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
Error: expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"
 ❯ src/components/__tests__/LiquidButton.test.tsx:319:22
    317|       const button = screen.getByRole('button')
    318|       expect(button).toBeInTheDocument()
    319|       expect(button).toBeEmptyDOMElement()
       |                      ^
    320|     })
    321| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:30:20
     28|       
     29|       const card = screen.getByText('Glass Card').closest('[class*="ba…
     30|       expect(card).toBeInTheDocument()
       |                    ^
     31|       stateTestingHelpers.expectGlassEffect(card!)
     32|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
Error: expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:48:20
     46|       const { rerender } = render(<LiquidCard intensity="light">Light<…
     47|       const card = screen.getByText('Light').closest('[class*="backdro…
     48|       expect(card).toHaveClass('backdrop-blur-sm')
       |                    ^
     49|       
     50|       rerender(<LiquidCard intensity="regular">Regular</LiquidCard>)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
Error: expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:242:20
    240|       
    241|       expect(card).toHaveFocus()
    242|       expect(card).toHaveClass('focus:outline-none')
       |                    ^
    243|       expect(card).toHaveClass('focus:ring-2')
    244|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
 ❯ src/components/__tests__/LiquidCard.test.tsx:283:20
    281|       const card = screen.getByText('Custom Styled Card').closest('div…
    282|       expect(card).toHaveClass('custom-class')
    283|       expect(card).toHaveClass('backdrop-blur-md')
       |                    ^
    284|     })
    285| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/30]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:304:20
    302|       
    303|       const card = document.querySelector('[class*="backdrop-blur"]')
    304|       expect(card).toBeInTheDocument()
       |                    ^
    305|     })
    306| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
 ❯ src/components/__tests__/LiquidInput.test.tsx:24:21
     22|       const input = screen.getByPlaceholderText('Enter text')
     23|       expect(input).toBeInTheDocument()
     24|       expect(input).toHaveAttribute('type', 'text')
       |                     ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with different intensity levels
Error: expect(element).toHaveClass("backdrop-blur-sm")

Expected the element to have class:
  backdrop-blur-sm
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:49:25
     47|       const { rerender } = render(<LiquidInput intensity="light" place…
     48|       const container = screen.getByPlaceholderText('Light').closest('…
     49|       expect(container).toHaveClass('backdrop-blur-sm')
       |                         ^
     50|       
     51|       rerender(<LiquidInput intensity="regular" placeholder="Regular" …

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Input Types > should render text input by default
Error: expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
 ❯ src/components/__tests__/LiquidInput.test.tsx:66:21
     64|       
     65|       const input = screen.getByRole('textbox')
     66|       expect(input).toHaveAttribute('type', 'text')
       |                     ^
     67|     })
     68| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Error: expect(element).toHaveClass("focus-within:ring-2")

Expected the element to have class:
  focus-within:ring-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:150:25
    148|       expect(input).toHaveFocus()
    149|       const container = input.closest('div')
    150|       expect(container).toHaveClass('focus-within:ring-2')
       |                         ^
    151|     })
    152|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
Error: expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:158:21
    156|       const { rerender } = render(<LiquidInput size="sm" placeholder="…
    157|       let input = screen.getByPlaceholderText('Small')
    158|       expect(input).toHaveClass('text-sm', 'px-3', 'py-2')
       |                     ^
    159|       
    160|       rerender(<LiquidInput size="md" placeholder="Medium" />)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
Error: expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:215:21
    213|       )
    214|       let input = screen.getByPlaceholderText('Left padding')
    215|       expect(input).toHaveClass('pl-10')
       |                     ^
    216|       
    217|       rerender(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
Error: expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:246:25
    244|       
    245|       const container = screen.getByPlaceholderText('Error styling').c…
    246|       expect(container).toHaveClass('ring-red-500')
       |                         ^
    247|     })
    248| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
Error: expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:269:21
    267|       
    268|       const input = screen.getByPlaceholderText('Disabled styling')
    269|       expect(input).toHaveClass('cursor-not-allowed', 'opacity-60')
       |                     ^
    270|     })
    271| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
        />,
        "timeStamp": 1757841720598,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
TestingLibraryElementError: Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/__tests__/LiquidInput.test.tsx:294:32
    292|       render(<LiquidInput required placeholder="Required indicator" />)
    293|       
    294|       const indicator = screen.getByText('*')
       |                                ^
    295|       expect(indicator).toBeInTheDocument()
    296|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:424:21
    422|       
    423|       const input = screen.getByPlaceholderText('Custom styled')
    424|       expect(input).toHaveClass('custom-input-class')
       |                     ^
    425|     })
    426| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/30]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/30]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidModal.test.tsx:48:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/30]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/30]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/30]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should render within performance budget
AssertionError: expected 17.472792000000027 to be less than 16
 ❯ src/components/__tests__/LiquidModal.test.tsx:365:26
    363|       })
    364|       
    365|       expect(renderTime).toBeLessThan(16)
       |                          ^
    366|     })
    367| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/30]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
 Test Files  4 failed (4)
    451|       const modal = screen.getByRole('dialog')
      Tests  30 failed | 98 passed (128)
   Start at  16:21:59
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
   Duration  5.76s (transform 291ms, setup 1.09s, collect 1.10s, tests 9.44s, environment 1.84s, prepare 318ms)

       |                     ^

 FAIL  Tests failed. Watching for file changes...
    453|     })
       press h to show help, press q to quit
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/30]⎯

[3Jc
 RERUN  package.json

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle click events
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 14 failed) 710ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with different intensity levels
     → expect(element).toHaveClass("backdrop-blur-sm")

Expected the element to have class:
  backdrop-blur-sm
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Input Types > should render text input by default
     → expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
     → expect(element).toHaveClass("focus-within:ring-2")

Expected the element to have class:
  focus-within:ring-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
     → expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
     → expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
     → expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
     → expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
        />,
        "timeStamp": 1757843398654,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
     → Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 8 failed) 960ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
     → expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
     → expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 4 failed) 1160ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should show focus indicators
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Accessibility > should support keyboard navigation
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle rapid click events without errors
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400639`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400639`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400639`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400639`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400639`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400640`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400637`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400638`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400639`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843400640`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidButton.test.tsx  (27 tests | 3 failed) 2299ms
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
     → expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"

⎯⎯⎯⎯⎯⎯ Failed Tests 29 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:30:20
     28|       
     29|       const card = screen.getByText('Glass Card').closest('[class*="ba…
     30|       expect(card).toBeInTheDocument()
       |                    ^
     31|       stateTestingHelpers.expectGlassEffect(card!)
     32|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
Error: expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:48:20
     46|       const { rerender } = render(<LiquidCard intensity="light">Light<…
     47|       const card = screen.getByText('Light').closest('[class*="backdro…
     48|       expect(card).toHaveClass('backdrop-blur-sm')
       |                    ^
     49|       
     50|       rerender(<LiquidCard intensity="regular">Regular</LiquidCard>)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
Error: expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:242:20
    240|       
    241|       expect(card).toHaveFocus()
    242|       expect(card).toHaveClass('focus:outline-none')
       |                    ^
    243|       expect(card).toHaveClass('focus:ring-2')
    244|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
 ❯ src/components/__tests__/LiquidCard.test.tsx:283:20
    281|       const card = screen.getByText('Custom Styled Card').closest('div…
    282|       expect(card).toHaveClass('custom-class')
    283|       expect(card).toHaveClass('backdrop-blur-md')
       |                    ^
    284|     })
    285| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:304:20
    302|       
    303|       const card = document.querySelector('[class*="backdrop-blur"]')
    304|       expect(card).toBeInTheDocument()
       |                    ^
    305|     })
    306| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/29]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
 ❯ src/components/__tests__/LiquidButton.test.tsx:24:22
     22|       const button = screen.getByRole('button', { name: 'Click me' })
     23|       expect(button).toBeInTheDocument()
     24|       expect(button).toHaveAttribute('type', 'button')
       |                      ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/29]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidButton.test.tsx:31:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/29]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
Error: expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"
 ❯ src/components/__tests__/LiquidButton.test.tsx:319:22
    317|       const button = screen.getByRole('button')
    318|       expect(button).toBeInTheDocument()
    319|       expect(button).toBeEmptyDOMElement()
       |                      ^
    320|     })
    321| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidModal.test.tsx:48:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
    451|       const modal = screen.getByRole('dialog')
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
 ❯ src/components/__tests__/LiquidInput.test.tsx:24:21
     22|       const input = screen.getByPlaceholderText('Enter text')
     23|       expect(input).toBeInTheDocument()
     24|       expect(input).toHaveAttribute('type', 'text')
       |                     ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with different intensity levels
Error: expect(element).toHaveClass("backdrop-blur-sm")

Expected the element to have class:
  backdrop-blur-sm
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:49:25
     47|       const { rerender } = render(<LiquidInput intensity="light" place…
     48|       const container = screen.getByPlaceholderText('Light').closest('…
     49|       expect(container).toHaveClass('backdrop-blur-sm')
       |                         ^
     50|       
     51|       rerender(<LiquidInput intensity="regular" placeholder="Regular" …

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Input Types > should render text input by default
Error: expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
 ❯ src/components/__tests__/LiquidInput.test.tsx:66:21
     64|       
     65|       const input = screen.getByRole('textbox')
     66|       expect(input).toHaveAttribute('type', 'text')
       |                     ^
     67|     })
     68| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Error: expect(element).toHaveClass("focus-within:ring-2")

Expected the element to have class:
  focus-within:ring-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:150:25
    148|       expect(input).toHaveFocus()
    149|       const container = input.closest('div')
    150|       expect(container).toHaveClass('focus-within:ring-2')
       |                         ^
    151|     })
    152|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
Error: expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:158:21
    156|       const { rerender } = render(<LiquidInput size="sm" placeholder="…
    157|       let input = screen.getByPlaceholderText('Small')
    158|       expect(input).toHaveClass('text-sm', 'px-3', 'py-2')
       |                     ^
    159|       
    160|       rerender(<LiquidInput size="md" placeholder="Medium" />)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
Error: expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:215:21
    213|       )
    214|       let input = screen.getByPlaceholderText('Left padding')
    215|       expect(input).toHaveClass('pl-10')
       |                     ^
    216|       
    217|       rerender(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
Error: expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:246:25
    244|       
    245|       const container = screen.getByPlaceholderText('Error styling').c…
    246|       expect(container).toHaveClass('ring-red-500')
       |                         ^
    247|     })
    248| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
Error: expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:269:21
    267|       
    268|       const input = screen.getByPlaceholderText('Disabled styling')
    269|       expect(input).toHaveClass('cursor-not-allowed', 'opacity-60')
       |                     ^
    270|     })
    271| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
        />,
        "timeStamp": 1757843398654,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
TestingLibraryElementError: Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/__tests__/LiquidInput.test.tsx:294:32
    292|       render(<LiquidInput required placeholder="Required indicator" />)
    293|       
    294|       const indicator = screen.getByText('*')
       |                                ^
    295|       expect(indicator).toBeInTheDocument()
    296|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:424:21
    422|       
    423|       const input = screen.getByPlaceholderText('Custom styled')
    424|       expect(input).toHaveClass('custom-input-class')
       |                     ^
    425|     })
    426| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/29]⎯

 Test Files  4 failed (4)
      Tests  29 failed | 99 passed (128)
   Start at  16:49:57
   Duration  6.95s


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
[3Jc
 RERUN  package.json

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle click events
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 14 failed) 766ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with different intensity levels
     → expect(element).toHaveClass("backdrop-blur-sm")

Expected the element to have class:
  backdrop-blur-sm
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Input Types > should render text input by default
     → expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
     → expect(element).toHaveClass("focus-within:ring-2")

Expected the element to have class:
  focus-within:ring-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
     → expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
     → expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
     → expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
     → expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
        />,
        "timeStamp": 1757843405195,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
     → Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 8 failed) 984ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
     → expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
     → expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 4 failed) 1193ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should show focus indicators
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Accessibility > should support keyboard navigation
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle rapid click events without errors
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407220`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407220`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407220`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407220`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407220`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407221`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407218`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407219`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407220`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757843407221`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidButton.test.tsx  (27 tests | 3 failed) 2345ms
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
     → expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"

⎯⎯⎯⎯⎯⎯ Failed Tests 29 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
 ❯ src/components/__tests__/LiquidButton.test.tsx:24:22
     22|       const button = screen.getByRole('button', { name: 'Click me' })
     23|       expect(button).toBeInTheDocument()
     24|       expect(button).toHaveAttribute('type', 'button')
       |                      ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/29]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidButton.test.tsx:31:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/29]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
Error: expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"
 ❯ src/components/__tests__/LiquidButton.test.tsx:319:22
    317|       const button = screen.getByRole('button')
    318|       expect(button).toBeInTheDocument()
    319|       expect(button).toBeEmptyDOMElement()
       |                      ^
    320|     })
    321| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:30:20
     28|       
     29|       const card = screen.getByText('Glass Card').closest('[class*="ba…
     30|       expect(card).toBeInTheDocument()
       |                    ^
     31|       stateTestingHelpers.expectGlassEffect(card!)
     32|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
Error: expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:48:20
     46|       const { rerender } = render(<LiquidCard intensity="light">Light<…
     47|       const card = screen.getByText('Light').closest('[class*="backdro…
     48|       expect(card).toHaveClass('backdrop-blur-sm')
       |                    ^
     49|       
     50|       rerender(<LiquidCard intensity="regular">Regular</LiquidCard>)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
Error: expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:242:20
    240|       
    241|       expect(card).toHaveFocus()
    242|       expect(card).toHaveClass('focus:outline-none')
       |                    ^
    243|       expect(card).toHaveClass('focus:ring-2')
    244|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
 ❯ src/components/__tests__/LiquidCard.test.tsx:283:20
    281|       const card = screen.getByText('Custom Styled Card').closest('div…
    282|       expect(card).toHaveClass('custom-class')
    283|       expect(card).toHaveClass('backdrop-blur-md')
       |                    ^
    284|     })
    285| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/29]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:304:20
    302|       
    303|       const card = document.querySelector('[class*="backdrop-blur"]')
    304|       expect(card).toBeInTheDocument()
       |                    ^
    305|     })
    306| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
 ❯ src/components/__tests__/LiquidInput.test.tsx:24:21
     22|       const input = screen.getByPlaceholderText('Enter text')
     23|       expect(input).toBeInTheDocument()
     24|       expect(input).toHaveAttribute('type', 'text')
       |                     ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should render with different intensity levels
Error: expect(element).toHaveClass("backdrop-blur-sm")

Expected the element to have class:
  backdrop-blur-sm
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:49:25
     47|       const { rerender } = render(<LiquidInput intensity="light" place…
     48|       const container = screen.getByPlaceholderText('Light').closest('…
     49|       expect(container).toHaveClass('backdrop-blur-sm')
       |                         ^
     50|       
     51|       rerender(<LiquidInput intensity="regular" placeholder="Regular" …

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Input Types > should render text input by default
Error: expect(element).toHaveAttribute("type", "text") // element.getAttribute("type") === "text"

Expected the element to have attribute:
  type="text"
Received:
  null
 ❯ src/components/__tests__/LiquidInput.test.tsx:66:21
     64|       
     65|       const input = screen.getByRole('textbox')
     66|       expect(input).toHaveAttribute('type', 'text')
       |                     ^
     67|     })
     68| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Error: expect(element).toHaveClass("focus-within:ring-2")

Expected the element to have class:
  focus-within:ring-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:150:25
    148|       expect(input).toHaveFocus()
    149|       const container = input.closest('div')
    150|       expect(container).toHaveClass('focus-within:ring-2')
       |                         ^
    151|     })
    152|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
Error: expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:158:21
    156|       const { rerender } = render(<LiquidInput size="sm" placeholder="…
    157|       let input = screen.getByPlaceholderText('Small')
    158|       expect(input).toHaveClass('text-sm', 'px-3', 'py-2')
       |                     ^
    159|       
    160|       rerender(<LiquidInput size="md" placeholder="Medium" />)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
Error: expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:215:21
    213|       )
    214|       let input = screen.getByPlaceholderText('Left padding')
    215|       expect(input).toHaveClass('pl-10')
       |                     ^
    216|       
    217|       rerender(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
Error: expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:246:25
    244|       
    245|       const container = screen.getByPlaceholderText('Error styling').c…
    246|       expect(container).toHaveClass('ring-red-500')
       |                         ^
    247|     })
    248| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
Error: expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:269:21
    267|       
    268|       const input = screen.getByPlaceholderText('Disabled styling')
    269|       expect(input).toHaveClass('cursor-not-allowed', 'opacity-60')
       |                     ^
    270|     })
    271| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
        />,
        "timeStamp": 1757843405195,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
TestingLibraryElementError: Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/__tests__/LiquidInput.test.tsx:294:32
    292|       render(<LiquidInput required placeholder="Required indicator" />)
    293|       
    294|       const indicator = screen.getByText('*')
       |                                ^
    295|       expect(indicator).toBeInTheDocument()
    296|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:424:21
    422|       
    423|       const input = screen.getByPlaceholderText('Custom styled')
    424|       expect(input).toHaveClass('custom-input-class')
       |                     ^
    425|     })
    426| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/29]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidModal.test.tsx:48:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/29]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
    451|       const modal = screen.getByRole('dialog')
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/29]⎯

 Test Files  4 failed (4)
      Tests  29 failed | 99 passed (128)
   Start at  16:50:04
   Duration  6.21s


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
[3Jc
 RERUN  src/components/LiquidInput.tsx x3

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 10 failed) 347ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
     → expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
     → expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
     → expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:
  backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
     → expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 10px 16px 10px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px; --tw-text-base: 16px;"
          type="text"
        />,
        "timeStamp": 1757844131385,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
     → Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none"[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 10px 16px 10px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px; --tw-text-base: 16px;"[39m
            [33mtype[39m=[32m"text"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯ Failed Tests 10 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
Error: expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:158:21
    156|       const { rerender } = render(<LiquidInput size="sm" placeholder="…
    157|       let input = screen.getByPlaceholderText('Small')
    158|       expect(input).toHaveClass('text-sm', 'px-3', 'py-2')
       |                     ^
    159|       
    160|       rerender(<LiquidInput size="md" placeholder="Medium" />)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
Error: expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:215:21
    213|       )
    214|       let input = screen.getByPlaceholderText('Left padding')
    215|       expect(input).toHaveClass('pl-10')
       |                     ^
    216|       
    217|       rerender(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
Error: expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:
  backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none
 ❯ src/components/__tests__/LiquidInput.test.tsx:246:25
    244|       
    245|       const container = screen.getByPlaceholderText('Error styling').c…
    246|       expect(container).toHaveClass('ring-red-500')
       |                         ^
    247|     })
    248| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
Error: expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:269:21
    267|       
    268|       const input = screen.getByPlaceholderText('Disabled styling')
    269|       expect(input).toHaveClass('cursor-not-allowed', 'opacity-60')
       |                     ^
    270|     })
    271| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 10px 16px 10px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px; --tw-text-base: 16px;"
          type="text"
        />,
        "timeStamp": 1757844131385,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
TestingLibraryElementError: Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none"[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 10px 16px 10px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px; --tw-text-base: 16px;"[39m
            [33mtype[39m=[32m"text"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/__tests__/LiquidInput.test.tsx:294:32
    292|       render(<LiquidInput required placeholder="Required indicator" />)
    293|       
    294|       const indicator = screen.getByText('*')
       |                                ^
    295|       expect(indicator).toBeInTheDocument()
    296|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:424:21
    422|       
    423|       const input = screen.getByPlaceholderText('Custom styled')
    424|       expect(input).toHaveClass('custom-input-class')
       |                     ^
    425|     })
    426| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/10]⎯

 Test Files  1 failed (1)
      Tests  10 failed | 31 passed (41)
   Start at  17:02:10
   Duration  657ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x3
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x4

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 10 failed) 350ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
     → expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
     → expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
     → expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:
  backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
     → expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844180467,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
     → Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none"[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
            [33mtype[39m=[32m"text"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯ Failed Tests 10 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Size Variants > should apply correct size classes
Error: expect(element).toHaveClass("text-sm px-3 py-2")

Expected the element to have class:
  text-sm px-3 py-2
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:158:21
    156|       const { rerender } = render(<LiquidInput size="sm" placeholder="…
    157|       let input = screen.getByPlaceholderText('Small')
    158|       expect(input).toHaveClass('text-sm', 'px-3', 'py-2')
       |                     ^
    159|       
    160|       rerender(<LiquidInput size="md" placeholder="Medium" />)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
Error: expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:215:21
    213|       )
    214|       let input = screen.getByPlaceholderText('Left padding')
    215|       expect(input).toHaveClass('pl-10')
       |                     ^
    216|       
    217|       rerender(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
Error: expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:
  backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none
 ❯ src/components/__tests__/LiquidInput.test.tsx:246:25
    244|       
    245|       const container = screen.getByPlaceholderText('Error styling').c…
    246|       expect(container).toHaveClass('ring-red-500')
       |                         ^
    247|     })
    248| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should apply disabled styling
Error: expect(element).toHaveClass("cursor-not-allowed opacity-60")

Expected the element to have class:
  cursor-not-allowed opacity-60
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:269:21
    267|       
    268|       const input = screen.getByPlaceholderText('Disabled styling')
    269|       expect(input).toHaveClass('cursor-not-allowed', 'opacity-60')
       |                     ^
    270|     })
    271| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844180467,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
TestingLibraryElementError: Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none"[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
            [33mtype[39m=[32m"text"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/__tests__/LiquidInput.test.tsx:294:32
    292|       render(<LiquidInput required placeholder="Required indicator" />)
    293|       
    294|       const indicator = screen.getByText('*')
       |                                ^
    295|       expect(indicator).toBeInTheDocument()
    296|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:

 ❯ src/components/__tests__/LiquidInput.test.tsx:424:21
    422|       
    423|       const input = screen.getByPlaceholderText('Custom styled')
    424|       expect(input).toHaveClass('custom-input-class')
       |                     ^
    425|     })
    426| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/10]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/10]⎯

 Test Files  1 failed (1)
      Tests  10 failed | 31 passed (41)
   Start at  17:02:59
   Duration  647ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x4
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x5

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 8 failed) 378ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
     → expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:
  text-base px-4 py-2.5
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
     → expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:
  backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base px-4 py-2.5 cursor-not-allowed opacity-60"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844190410,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
     → Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none"[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mclass[39m=[32m"text-base px-4 py-2.5 "[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
            [33mtype[39m=[32m"text"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:
  text-base px-4 py-2.5
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 8 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Icons > should adjust padding when icons are present
Error: expect(element).toHaveClass("pl-10")

Expected the element to have class:
  pl-10
Received:
  text-base px-4 py-2.5
 ❯ src/components/__tests__/LiquidInput.test.tsx:215:21
    213|       )
    214|       let input = screen.getByPlaceholderText('Left padding')
    215|       expect(input).toHaveClass('pl-10')
       |                     ^
    216|       
    217|       rerender(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Error States > should apply error styling
Error: expect(element).toHaveClass("ring-red-500")

Expected the element to have class:
  ring-red-500
Received:
  backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none
 ❯ src/components/__tests__/LiquidInput.test.tsx:246:25
    244|       
    245|       const container = screen.getByPlaceholderText('Error styling').c…
    246|       expect(container).toHaveClass('ring-red-500')
       |                         ^
    247|     })
    248| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base px-4 py-2.5 cursor-not-allowed opacity-60"
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844190410,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Required Field > should display required indicator
TestingLibraryElementError: Unable to find an element with the text: *. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mdata-config[39m=[32m"{\"variant\":\"frosted\",\"intensity\":\"regular\",\"opacity\":\"regular\",\"interactive\":true,\"adaptiveOpacity\":false,\"environmentBlending\":false}"[39m
      [33mdata-testid[39m=[32m"liquid-test-provider"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"liquid-input "[39m
        [33mstyle[39m=[32m"display: flex; flex-direction: column; width: auto; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"backdrop-blur-sm focus-within:ring-2 focus-within:ring-blue-400 focus:outline-none"[39m
          [33mstyle[39m=[32m"position: relative; display: flex; align-items: center; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.3); transition: all 0.3s ease; cursor: text; opacity: 1; transform: translateZ(0); box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08); background: rgba(255, 255, 255, 0.25);"[39m
        [36m>[39m
          [36m<input[39m
            [33maria-invalid[39m=[32m"false"[39m
            [33mclass[39m=[32m"text-base px-4 py-2.5 "[39m
            [33mid[39m=[32m"liquid-input-:rq:"[39m
            [33mplaceholder[39m=[32m"Required indicator"[39m
            [33mrequired[39m=[32m""[39m
            [33mstyle[39m=[32m"width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"[39m
            [33mtype[39m=[32m"text"[39m
          [36m/>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/__tests__/LiquidInput.test.tsx:294:32
    292|       render(<LiquidInput required placeholder="Required indicator" />)
    293|       
    294|       const indicator = screen.getByText('*')
       |                                ^
    295|       expect(indicator).toBeInTheDocument()
    296|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("custom-input-class")

Expected the element to have class:
  custom-input-class
Received:
  text-base px-4 py-2.5
 ❯ src/components/__tests__/LiquidInput.test.tsx:424:21
    422|       
    423|       const input = screen.getByPlaceholderText('Custom styled')
    424|       expect(input).toHaveClass('custom-input-class')
       |                     ^
    425|     })
    426| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/8]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/8]⎯

 Test Files  1 failed (1)
      Tests  8 failed | 33 passed (41)
   Start at  17:03:09
   Duration  653ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x5
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x6

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 4 failed) 366ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844276692,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
     → expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 4 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/4]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844276692,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/4]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should associate error messages with input
Error: expect(element).toHaveAttribute("id", "error-message") // element.getAttribute("id") === "error-message"

Expected the element to have attribute:
  id="error-message"
Received:
  id="liquid-input-:r42:-error"
 ❯ src/components/__tests__/LiquidInput.test.tsx:368:28
    366|       
    367|       expect(input).toHaveAttribute('aria-describedby', 'error-message…
    368|       expect(errorMessage).toHaveAttribute('id', 'error-message')
       |                            ^
    369|     })
    370| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/4]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/4]⎯

 Test Files  1 failed (1)
      Tests  4 failed | 37 passed (41)
   Start at  17:04:35
   Duration  676ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x6
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x7

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 3 failed) 358ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844285839,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844285839,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 38 passed (41)
   Start at  17:04:45
   Duration  617ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x7
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x8

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 3 failed) 343ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844294129,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844294129,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 38 passed (41)
   Start at  17:04:53
   Duration  508ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x8
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x9

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 3 failed) 353ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844362372,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844362372,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 38 passed (41)
   Start at  17:06:01
   Duration  649ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x9
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x10

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 3 failed) 355ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844388705,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844388705,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 38 passed (41)
   Start at  17:06:27
   Duration  621ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x10
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x11

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 3 failed) 356ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844393392,
        "type": "change",
      },
    ]


Number of calls: 1

   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
     → expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844393392,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Custom Styling > should apply custom styles
Error: expect(element).toHaveStyle()

- Expected

- borderRadius: 12px;
 ❯ src/components/__tests__/LiquidInput.test.tsx:437:21
    435|       
    436|       const input = screen.getByPlaceholderText('Custom styled')
    437|       expect(input).toHaveStyle({ borderRadius: '12px' })
       |                     ^
    438|     })
    439|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 38 passed (41)
   Start at  17:06:32
   Duration  500ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x11
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x12

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 2 failed) 335ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844397678,
        "type": "change",
      },
    ]


Number of calls: 1


⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844397678,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 39 passed (41)
   Start at  17:06:37
   Duration  481ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x12
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x13

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 2 failed) 330ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844404249,
        "type": "change",
      },
    ]


Number of calls: 1


⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844404249,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 39 passed (41)
   Start at  17:06:43
   Duration  475ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x13
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x14

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 2 failed) 376ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
     → .toMatch() expects to receive a string, but got undefined
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844429418,
        "type": "change",
      },
    ]


Number of calls: 1


⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Basic Rendering > should apply glass effect styles
TypeError: .toMatch() expects to receive a string, but got undefined
 ❯ Object.expectGlassEffect src/test/utils.tsx:183:35
    181|   expectGlassEffect: (element: HTMLElement) => {
    182|     const styles = window.getComputedStyle(element)
    183|     expect(styles.backdropFilter).toMatch(/blur\(\d+px\)/)
       |                                   ^
    184|     expect(styles.background).toMatch(/rgba?\(/)
    185|   },
 ❯ src/components/__tests__/LiquidInput.test.tsx:32:27

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844429418,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 39 passed (41)
   Start at  17:07:08
   Duration  542ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x14
[2K[1A[2K[G[3Jc
 RERUN  src/test/utils.tsx

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle click events
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidInput.test.tsx  (41 tests | 1 failed) 490ms
   ❯ src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844467620,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 8 failed) 799ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
     → expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
     → expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 3 failed) 960ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should show focus indicators
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Accessibility > should support keyboard navigation
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle rapid click events without errors
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469373`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469373`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469373`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469370`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469371`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469372`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844469373`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidButton.test.tsx  (27 tests | 2 failed) 1960ms
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
     → expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
     → expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"

⎯⎯⎯⎯⎯⎯ Failed Tests 14 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:30:20
     28|       
     29|       const card = screen.getByText('Glass Card').closest('[class*="ba…
     30|       expect(card).toBeInTheDocument()
       |                    ^
     31|       stateTestingHelpers.expectGlassEffect(card!)
     32|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
Error: expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:48:20
     46|       const { rerender } = render(<LiquidCard intensity="light">Light<…
     47|       const card = screen.getByText('Light').closest('[class*="backdro…
     48|       expect(card).toHaveClass('backdrop-blur-sm')
       |                    ^
     49|       
     50|       rerender(<LiquidCard intensity="regular">Regular</LiquidCard>)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
Error: expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:242:20
    240|       
    241|       expect(card).toHaveFocus()
    242|       expect(card).toHaveClass('focus:outline-none')
       |                    ^
    243|       expect(card).toHaveClass('focus:ring-2')
    244|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
 ❯ src/components/__tests__/LiquidCard.test.tsx:283:20
    281|       const card = screen.getByText('Custom Styled Card').closest('div…
    282|       expect(card).toHaveClass('custom-class')
    283|       expect(card).toHaveClass('backdrop-blur-md')
       |                    ^
    284|     })
    285| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/14]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:304:20
    302|       
    303|       const card = document.querySelector('[class*="backdrop-blur"]')
    304|       expect(card).toBeInTheDocument()
       |                    ^
    305|     })
    306| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/14]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Basic Rendering > should render with default props
Error: expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  null
 ❯ src/components/__tests__/LiquidButton.test.tsx:24:22
     22|       const button = screen.getByRole('button', { name: 'Click me' })
     23|       expect(button).toBeInTheDocument()
     24|       expect(button).toHaveAttribute('type', 'button')
       |                      ^
     25|     })
     26| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/14]⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
Error: expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"
 ❯ src/components/__tests__/LiquidButton.test.tsx:319:22
    317|       const button = screen.getByRole('button')
    318|       expect(button).toBeInTheDocument()
    319|       expect(button).toBeEmptyDOMElement()
       |                      ^
    320|     })
    321| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/14]⎯

 FAIL  src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Disabled State > should not respond to interactions when disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array [
      SyntheticBaseEvent {
        "_reactName": "onChange",
        "_targetInst": null,
        "bubbles": true,
        "cancelable": false,
        "currentTarget": null,
        "defaultPrevented": false,
        "eventPhase": 3,
        "isDefaultPrevented": [Function functionThatReturnsFalse],
        "isPropagationStopped": [Function functionThatReturnsFalse],
        "isTrusted": false,
        "nativeEvent": Event {
          "isTrusted": false,
        },
        "target": <input
          aria-invalid="false"
          class="text-base py-2.5 px-4 cursor-not-allowed opacity-60 "
          disabled=""
          id="liquid-input-:ro:"
          placeholder="No interaction"
          style="width: 100%; background: transparent; outline: none; padding: 12px 16px 12px 16px; font-size: 15px; line-height: 1.4; color: rgba(255, 255, 255, 0.95); font-family: inherit; border-radius: 10px;"
          type="text"
        />,
        "timeStamp": 1757844467620,
        "type": "change",
      },
    ]


Number of calls: 1

 ❯ src/components/__tests__/LiquidInput.test.tsx:279:32
    277|       fireEvent.change(input, { target: { value: 'test' } })
    278|       
    279|       expect(handleChange).not.toHaveBeenCalled()
       |                                ^
    280|     })
    281|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/14]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <div
  aria-modal="true"
  class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
  role="dialog"
  style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
  tabindex="-1"
>
  <div
    class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
  >
    <button
      aria-label="Close modal"
      class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
      type="button"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M6 18L18 6M6 6l12 12"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        />
      </svg>
    </button>
  </div>
  <div
    class="liquid-modal-content overflow-y-auto max-h-full"
  >
    <button>
      Focus me
    </button>
  </div>
</div>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/14]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/14]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
    451|       const modal = screen.getByRole('dialog')
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/14]⎯

 Test Files  4 failed (4)
      Tests  14 failed | 114 passed (128)
   Start at  17:07:46
   Duration  5.55s


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
[3Jc
 RERUN  src/components/LiquidInput.tsx x16

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidInput.test.tsx  (41 tests) 325ms

 Test Files  1 passed (1)
      Tests  41 passed (41)
   Start at  17:08:13
   Duration  484ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x16
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidButton.tsx x4

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle click events
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should show focus indicators
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Accessibility > should support keyboard navigation
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle rapid click events without errors
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548047`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548047`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548047`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548044`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548045`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548046`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844548047`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidButton.test.tsx  (27 tests | 1 failed) 1680ms
   ❯ src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
     → expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle undefined children gracefully
Error: expect(element).toBeEmptyDOMElement()

Received:
  "<div class="absolute inset-0 overflow-hidden rounded-lg pointer-events-none"></div>"
 ❯ src/components/__tests__/LiquidButton.test.tsx:319:22
    317|       const button = screen.getByRole('button')
    318|       expect(button).toBeInTheDocument()
    319|       expect(button).toBeEmptyDOMElement()
       |                      ^
    320|     })
    321| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯

 Test Files  1 failed (1)
      Tests  1 failed | 26 passed (27)
   Start at  17:09:05
   Duration  1.95s


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x4
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidButton.tsx x5

 ❯ src/components/__tests__/LiquidButton.test.tsx  (0 test)

⎯⎯⎯⎯⎯⎯ Failed Suites 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidButton.test.tsx [ src/components/__tests__/LiquidButton.test.tsx ]
Error: Transform failed with 1 error:
/Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:316:8: ERROR: Expected ")" but found "{"
 ❯ failureErrorWithLog ../../node_modules/vite/node_modules/esbuild/lib/main.js:1472:15
 ❯ ../../node_modules/vite/node_modules/esbuild/lib/main.js:755:50
 ❯ responseCallbacks.<computed> ../../node_modules/vite/node_modules/esbuild/lib/main.js:622:9
 ❯ handleIncomingPacket ../../node_modules/vite/node_modules/esbuild/lib/main.js:677:12
 ❯ Socket.readFromStdout ../../node_modules/vite/node_modules/esbuild/lib/main.js:600:7
 ❯ Socket.emit node:events:507:28

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯

 Test Files  1 failed (1)
      Tests  no tests
   Start at  17:09:14
   Duration  144ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x5
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidButton.tsx x6

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle click events
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should handle keyboard interactions
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Interactive Features > should show focus indicators
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Accessibility > should support keyboard navigation
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidButton inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidButton.test.tsx > LiquidButton > Edge Cases > should handle rapid click events without errors
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570498`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570498`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570498`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570495`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570496`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570497`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: Encountered two children with the same key, `1757844570498`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
    at div
    at button
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidButton.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidButton.test.tsx  (27 tests) 1644ms

 Test Files  1 passed (1)
      Tests  27 passed (27)
   Start at  17:09:28
   Duration  1.93s


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x6
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x4

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 8 failed) 506ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
     → expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
     → expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
     → expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
     → expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.


⎯⎯⎯⎯⎯⎯⎯ Failed Tests 8 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should apply glass effect styles
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:30:20
     28|       
     29|       const card = screen.getByText('Glass Card').closest('[class*="ba…
     30|       expect(card).toBeInTheDocument()
       |                    ^
     31|       stateTestingHelpers.expectGlassEffect(card!)
     32|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Basic Rendering > should render with different intensity levels
Error: expect(received).toHaveClass()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:48:20
     46|       const { rerender } = render(<LiquidCard intensity="light">Light<…
     47|       const card = screen.getByText('Light').closest('[class*="backdro…
     48|       expect(card).toHaveClass('backdrop-blur-sm')
       |                    ^
     49|       
     50|       rerender(<LiquidCard intensity="regular">Regular</LiquidCard>)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should have proper focus indicators
Error: expect(element).toHaveClass("focus:outline-none")

Expected the element to have class:
  focus:outline-none
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105
 ❯ src/components/__tests__/LiquidCard.test.tsx:242:20
    240|       
    241|       expect(card).toHaveFocus()
    242|       expect(card).toHaveClass('focus:outline-none')
       |                    ^
    243|       expect(card).toHaveClass('focus:ring-2')
    244|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Custom Styling > should merge custom className with defaults
Error: expect(element).toHaveClass("backdrop-blur-md")

Expected the element to have class:
  backdrop-blur-md
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl p-6 border border-white/10 shadow-lg cursor-pointer transform-gpu transition-all duration-300 ease-out hover:scale-105 custom-class
 ❯ src/components/__tests__/LiquidCard.test.tsx:283:20
    281|       const card = screen.getByText('Custom Styled Card').closest('div…
    282|       expect(card).toHaveClass('custom-class')
    283|       expect(card).toHaveClass('backdrop-blur-md')
       |                    ^
    284|     })
    285| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/8]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Edge Cases > should handle undefined children gracefully
Error: expect(received).toBeInTheDocument()

received value must be an HTMLElement or an SVGElement.

 ❯ src/components/__tests__/LiquidCard.test.tsx:304:20
    302|       
    303|       const card = document.querySelector('[class*="backdrop-blur"]')
    304|       expect(card).toBeInTheDocument()
       |                    ^
    305|     })
    306| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/8]⎯

 Test Files  1 failed (1)
      Tests  8 failed | 18 passed (26)
   Start at  17:12:13
   Duration  831ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x4
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x5

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 3 failed) 532ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl backdrop-filter backdrop-blur-md bg-white/25 p-6 border border-white/10 shadow-lg hover:scale-105 cursor-pointer transform-gpu transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl backdrop-filter backdrop-blur-md bg-white/25 p-6 border border-white/10 shadow-lg hover:scale-105 cursor-pointer transform-gpu transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 23 passed (26)
   Start at  17:12:24
   Duration  810ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x5
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x6

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 3 failed) 531ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl backdrop-filter backdrop-blur-md bg-white/25 p-6 border border-white/10 shadow-lg hover:scale-105 cursor-pointer transform-gpu transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
     → expected "spy" to be called at least once

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl backdrop-filter backdrop-blur-md bg-white/25 p-6 border border-white/10 shadow-lg hover:scale-105 cursor-pointer transform-gpu transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Accessibility > should support keyboard navigation when interactive
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:228:27
    226|       
    227|       fireEvent.keyDown(card, { key: 'Enter' })
    228|       expect(handleClick).toHaveBeenCalled()
       |                           ^
    229|     })
    230| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 23 passed (26)
   Start at  17:12:41
   Duration  820ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x6
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x7

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 2 failed) 509ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
     → expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl backdrop-filter backdrop-blur-md bg-white/25 p-6 border border-white/10 shadow-lg hover:scale-105 cursor-pointer transform-gpu transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should not respond to hover when not interactive
Error: expect(element).not.toHaveClass("hover:scale-105")

Expected the element not to have class:
  hover:scale-105
Received:
  liquid-card relative overflow-hidden transition-all duration-200 ease-out rounded-xl backdrop-filter backdrop-blur-md bg-white/25 p-6 border border-white/10 shadow-lg hover:scale-105 cursor-pointer transform-gpu transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent
 ❯ src/components/__tests__/LiquidCard.test.tsx:74:24
     72|       
     73|       const card = screen.getByText('Static Card').closest('div')!
     74|       expect(card).not.toHaveClass('hover:scale-105')
       |                        ^
     75|     })
     76| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
     95|       expect(handleDragStart).toHaveBeenCalled()
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 24 passed (26)
   Start at  17:12:47
   Duration  790ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x7
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x4

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 3 failed) 667ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
    451|       const modal = screen.getByRole('dialog')
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 31 passed (34)
   Start at  17:13:07
   Duration  962ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x4
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x5

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 3 failed) 637ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
 Test Files  1 failed (1)
      Tests  3 failed | 31 passed (34)
   Start at  17:13:17
   Duration  910ms

    450|       
    451|       const modal = screen.getByRole('dialog')

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

       rerun x5
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x6

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 3 failed) 670ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
    451|       const modal = screen.getByRole('dialog')
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 31 passed (34)
   Start at  17:13:23
   Duration  823ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x6
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x7

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 3 failed) 650ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: expect(element).toHaveAttribute("aria-labelledby", "modal-title") // element.getAttribute("aria-labelledby") === "modal-title"

Expected the element to have attribute:
  aria-labelledby="modal-title"
Received:
  null
 ❯ src/components/__tests__/LiquidModal.test.tsx:452:21
    450|       
    451|       const modal = screen.getByRole('dialog')
    452|       expect(modal).toHaveAttribute('aria-labelledby', 'modal-title')
       |                     ^
    453|     })
    454|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯

 Test Files  1 failed (1)
      Tests  3 failed | 31 passed (34)
   Start at  17:13:37
   Duration  922ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x7
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x8

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ❯ src/components/__tests__/LiquidCard.test.tsx  (26 tests | 1 failed) 526ms
   ❯ src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
     → expected "spy" to be called at least once

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle drag and drop interactions
AssertionError: expected "spy" to be called at least once
 Test Files  1 failed (1)
      Tests  1 failed | 25 passed (26)
   Start at  17:17:15
 ❯ src/components/__tests__/LiquidCard.test.tsx:95:31
     93|       
   Duration  805ms


     94|       fireEvent.mouseDown(card, { clientX: 100, clientY: 100 })
 FAIL  Tests failed. Watching for file changes...
     95|       expect(handleDragStart).toHaveBeenCalled()
       press h to show help, press q to quit
       |                               ^
     96|       
     97|       fireEvent.mouseMove(card, { clientX: 150, clientY: 150 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯

       rerun x8
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x9

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidCard.test.tsx  (26 tests) 487ms

 Test Files  1 passed (1)
      Tests  26 passed (26)
   Start at  17:17:33
   Duration  765ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x9
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x10

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidCard.test.tsx  (26 tests) 490ms

 Test Files  1 passed (1)
      Tests  26 passed (26)
   Start at  17:17:39
   Duration  685ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x10
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x11

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidCard.test.tsx  (26 tests) 600ms

 Test Files  1 passed (1)
      Tests  26 passed (26)
   Start at  17:17:44
   Duration  835ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x11
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x12

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidCard.test.tsx  (26 tests) 525ms

 Test Files  1 passed (1)
      Tests  26 passed (26)
   Start at  17:17:51
   Duration  730ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x12
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x13

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidCard.test.tsx  (26 tests) 519ms

 Test Files  1 passed (1)
      Tests  26 passed (26)
   Start at  17:17:58
   Duration  700ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x13
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidCard.tsx x14

stderr | src/components/__tests__/LiquidCard.test.tsx > LiquidCard > Interactive Features > should handle hover effects when interactive
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidCard inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidCard.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

 ✓ src/components/__tests__/LiquidCard.test.tsx  (26 tests) 493ms

 Test Files  1 passed (1)
      Tests  26 passed (26)
   Start at  17:18:02
   Duration  645ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x14
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x8

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should not render when closed
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should render when open
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should render with different variants
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should call onClose when backdrop is clicked
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close when clicking modal content
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should close when pressing Escape key
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close on Escape when closeOnEscape is false
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close on backdrop click when closeOnBackdrop is false
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should render close button by default
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should hide close button when showCloseButton is false
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should call onClose when close button is clicked
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Size Variants > should apply correct size classes
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Animation States > should apply enter animation when opening
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Animation States > should apply exit animation when closing
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should restore focus when closed
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Body Scroll Lock > should lock body scroll when modal is open
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Body Scroll Lock > should restore body scroll when modal is closed
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should render within performance budget
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should not cause memory leaks with rapid open/close
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should meet WCAG accessibility standards
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should have proper ARIA attributes
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should support custom ARIA labels
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Alert preset correctly
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at LiquidModal.Alert
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Confirm preset correctly
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at LiquidModal.Confirm
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Fullscreen preset correctly
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at LiquidModal.Fullscreen
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Custom Styling > should merge custom className with defaults
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Custom Styling > should apply custom styles to backdrop
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should handle portal mounting errors gracefully
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should handle rapid state changes without errors
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

stderr | src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should cleanup all event listeners on unmount
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
Error: Uncaught [ReferenceError: useMemo is not defined]
    at reportException (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
    at HTMLUnknownElement.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
    at Object.invokeGuardedCallbackDev (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
    at invokeGuardedCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
    at beginWork$1 (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
    at performUnitOfWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:26599:12) ReferenceError: useMemo is not defined
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:154:26
    at renderWithHooks (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
    at updateForwardRef (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:19245:20)
    at beginWork (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:21675:16)
    at HTMLUnknownElement.callCallback (/Users/memo/projects/liquid-ui/packages/react/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
    at invokeEventListeners (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
    at HTMLUnknownElementImpl._dispatch (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/memo/projects/liquid-ui/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
The above error occurred in the <LiquidModal> component:

    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidModal.tsx:13:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 34 failed) 51ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should not render when closed
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should render when open
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should render with different variants
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should call onClose when backdrop is clicked
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close when clicking modal content
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should close when pressing Escape key
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close on Escape when closeOnEscape is false
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close on backdrop click when closeOnBackdrop is false
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should render close button by default
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should hide close button when showCloseButton is false
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should call onClose when close button is clicked
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Size Variants > should apply correct size classes
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Animation States > should apply enter animation when opening
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Animation States > should apply exit animation when closing
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should restore focus when closed
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Body Scroll Lock > should lock body scroll when modal is open
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Body Scroll Lock > should restore body scroll when modal is closed
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should render within performance budget
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should not cause memory leaks with rapid open/close
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should meet WCAG accessibility standards
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should have proper ARIA attributes
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should support custom ARIA labels
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Alert preset correctly
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Confirm preset correctly
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Fullscreen preset correctly
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Custom Styling > should merge custom className with defaults
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Custom Styling > should apply custom styles to backdrop
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should handle portal mounting errors gracefully
     → expected [Function] to not throw an error but 'ReferenceError: useMemo is not defined' was thrown
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should handle rapid state changes without errors
     → useMemo is not defined
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should cleanup all event listeners on unmount
     → useMemo is not defined

⎯⎯⎯⎯⎯⎯ Failed Tests 34 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should not render when closed
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should render when open
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should apply glass effect styles to backdrop
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Basic Rendering > should render with different variants
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should call onClose when backdrop is clicked
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close when clicking modal content
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should close when pressing Escape key
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close on Escape when closeOnEscape is false
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Interactive Features > should not close on backdrop click when closeOnBackdrop is false
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should render close button by default
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should hide close button when showCloseButton is false
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Close Button > should call onClose when close button is clicked
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Size Variants > should apply correct size classes
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Animation States > should apply enter animation when opening
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Animation States > should apply exit animation when closing
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should restore focus when closed
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Body Scroll Lock > should lock body scroll when modal is open
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Body Scroll Lock > should restore body scroll when modal is closed
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should render within performance budget
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Performance > should not cause memory leaks with rapid open/close
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should meet WCAG accessibility standards
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should have proper ARIA attributes
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should support custom ARIA labels
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Accessibility > should associate with title when provided
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Alert preset correctly
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Confirm preset correctly
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Preset Components > should render Fullscreen preset correctly
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Custom Styling > should merge custom className with defaults
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Custom Styling > should apply custom styles to backdrop
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should handle rapid state changes without errors
 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should cleanup all event listeners on unmount
ReferenceError: useMemo is not defined
 ❯ src/components/LiquidModal.tsx:154:26
    152|   
    153|   // Detect aria-labelledby from children
    154|   const ariaLabelledBy = useMemo(() => {
       |                          ^
    155|     if (title) return 'modal-title'
    156|     if (rest['aria-labelledby']) return rest['aria-labelledby']
 ❯ renderWithHooks node_modules/react-dom/cjs/react-dom.development.js:15486:18
 ❯ updateForwardRef node_modules/react-dom/cjs/react-dom.development.js:19245:20
 ❯ beginWork node_modules/react-dom/cjs/react-dom.development.js:21675:16
 ❯ beginWork$1 node_modules/react-dom/cjs/react-dom.development.js:27465:14
 ❯ performUnitOfWork node_modules/react-dom/cjs/react-dom.development.js:26599:12
 ❯ workLoopSync node_modules/react-dom/cjs/react-dom.development.js:26505:5
 ❯ renderRootSync node_modules/react-dom/cjs/react-dom.development.js:26473:7
 ❯ recoverFromConcurrentError node_modules/react-dom/cjs/react-dom.development.js:25889:20
 ❯ performConcurrentWorkOnRoot node_modules/react-dom/cjs/react-dom.development.js:25789:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/34]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Edge Cases > should handle portal mounting errors gracefully
AssertionError: expected [Function] to not throw an error but 'ReferenceError: useMemo is not defined' was thrown

- Expected: 
undefined

+ Received: 
"ReferenceError: useMemo is not defined"

 ❯ src/components/__tests__/LiquidModal.test.tsx:525:14
    523|           </LiquidModal>
    524|         )
    525|       }).not.toThrow()
       |              ^
    526|       
    527|       // Restore original createPortal

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/34]⎯

 Test Files  1 failed (1)
      Tests  34 failed (34)
   Start at  17:19:00
   Duration  335ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x8
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x9

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 2 failed) 665ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 32 passed (34)
   Start at  17:19:05
   Duration  817ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x9
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x10

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 2 failed) 649ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 32 passed (34)
   Start at  17:19:23
   Duration  982ms


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x10
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidModal.tsx x11

 ❯ src/components/__tests__/LiquidModal.test.tsx  (34 tests | 2 failed) 656ms
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
   ❯ src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
     → expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should focus modal content when opened
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Focus me
</button>
Received element with focus:
  <body
  style="overflow: hidden;"
>
  <div>
    <div
      data-config="{"variant":"frosted","intensity":"regular","opacity":"regular","interactive":true,"adaptiveOpacity":false,"environmentBlending":false}"
      data-testid="liquid-test-provider"
    />
  </div>
  <div
    class="liquid-modal-backdrop fixed inset-0 z-50 flex items-center justify-center p-4 min-h-screen backdrop-blur-md items-center"
    style="background: rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1);"
  >
    <div
      aria-modal="true"
      class="liquid-modal relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-xl border border-white/10 shadow-2xl transform transition-all duration-300 ease-out animate-in fade-in-0 zoom-in-95"
      role="dialog"
      style="background: rgba(255, 255, 255, 0.25); border: 1px solid rgba(255, 255, 255, 0.3);"
      tabindex="-1"
    >
      <div
        class="liquid-modal-header flex items-center justify-between p-6 border-b border-white/10"
      >
        <button
          aria-label="Close modal"
          class="flex items-center justify-center w-8 h-8 rounded-full text-gray-400 hover:text-white hover:bg-white/10 transition-colors duration-200"
          type="button"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M6 18L18 6M6 6l12 12"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            />
          </svg>
        </button>
      </div>
      <div
        class="liquid-modal-content overflow-y-auto max-h-full"
      >
        <button>
          Focus me
        </button>
      </div>
    </div>
  </div>
</body>
 ❯ src/components/__tests__/LiquidModal.test.tsx:274:22
    272|       
    273|       const button = screen.getByRole('button', { name: 'Focus me' })
    274|       expect(button).toHaveFocus()
       |                      ^
    275|     })
    276| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/components/__tests__/LiquidModal.test.tsx > LiquidModal > Focus Management > should trap focus within modal
Error: expect(element).toHaveFocus()

Expected element with focus:
  <button>
  Second
</button>
Received element with focus:
  <button>
  First
</button>
 ❯ src/components/__tests__/LiquidModal.test.tsx:292:28
    290|       
    291|       fireEvent.keyDown(firstButton, { key: 'Tab' })
    292|       expect(secondButton).toHaveFocus()
       |                            ^
    293|       
    294|       fireEvent.keyDown(secondButton, { key: 'Tab' })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯

 Test Files  1 failed (1)
      Tests  2 failed | 32 passed (34)
   Start at  17:20:42
   Duration  1.02s


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
       rerun x11
[2K[1A[2K[G[3Jc
 RERUN  src/components/LiquidInput.tsx x17

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should handle blur events
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Interactive Features > should show focus effects
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at /Users/memo/projects/liquid-ui/packages/react/src/components/LiquidInput.tsx:11:5
    at div
    at LiquidTestProvider (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:52:31)
    at Wrapper (/Users/memo/projects/liquid-ui/packages/react/src/test/utils.tsx:62:22)

stderr | src/components/__tests__/LiquidInput.test.tsx > LiquidInput > Accessibility > should support keyboard navigation
Warning: An update to LiquidInput inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
