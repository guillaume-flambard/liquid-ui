name: Deploy to Google Cloud

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  GCP_PROJECT_ID: strayeye
  GCP_SERVICE_ACCOUNT: github-actions-liquid@strayeye.iam.gserviceaccount.com
  WORKLOAD_IDENTITY_PROVIDER: projects/877046715242/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider
  DOMAIN: liquid-ui.strayeye.com

jobs:
  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci
        env:
          CI: true

      - name: Build packages
        run: npm run build

      - name: Build demo app
        run: npm run build
        working-directory: apps/demo
        env:
          NEXT_PUBLIC_SITE_URL: https://${{ env.DOMAIN }}
          NODE_ENV: production

      - name: Build Storybook
        run: npm run build
        working-directory: apps/storybook

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Enable required APIs
        run: |
          gcloud services enable cloudbuild.googleapis.com || echo "Cloud Build API already enabled"
          gcloud services enable containerregistry.googleapis.com || echo "Container Registry API already enabled"

      - name: Build and push with Cloud Build
        run: |
          # Submit build asynchronously to avoid log streaming issues
          BUILD_ID=$(gcloud builds submit --tag gcr.io/${{ env.GCP_PROJECT_ID }}/liquid-ui:${{ github.sha }} --async --format="value(id)" .)
          echo "Build ID: $BUILD_ID"
          
          # Wait for build to complete
          gcloud builds wait $BUILD_ID
          
          # Tag as latest
          BUILD_ID_LATEST=$(gcloud builds submit --tag gcr.io/${{ env.GCP_PROJECT_ID }}/liquid-ui:latest --async --format="value(id)" .)
          echo "Latest Build ID: $BUILD_ID_LATEST" 
          
          # Wait for latest build to complete
          gcloud builds wait $BUILD_ID_LATEST

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy liquid-ui \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/liquid-ui:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 3000 \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 20 \
            --min-instances 1 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars NEXT_PUBLIC_SITE_URL=https://${{ env.DOMAIN }}

      - name: Configure domain mapping
        run: |
          gcloud run domain-mappings create \
            --service liquid-ui \
            --domain ${{ env.DOMAIN }} \
            --region us-central1 \
            --platform managed || echo "Domain mapping already exists"

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe liquid-ui --region us-central1 --format 'value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $SERVICE_URL"

      - name: Warm up the service
        run: |
          sleep 30
          curl -f https://${{ env.DOMAIN }} || echo "Service warming up..."
          
      - name: Run smoke tests
        run: |
          # Simple health check
          curl -f https://${{ env.DOMAIN }} -H "User-Agent: GitHub-Actions-Health-Check"
          
          # Check if Storybook is accessible (if deployed)
          # curl -f https://${{ env.DOMAIN }}/storybook || echo "Storybook not accessible"

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from main branch
            
            **Deployed to:** https://${{ env.DOMAIN }}
            **Commit:** ${{ github.sha }}
            
            ## Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Live at: https://${{ env.DOMAIN }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üè∑Ô∏è Release: v${{ github.run_number }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üîç Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"